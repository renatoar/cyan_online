package main

@concept{*
  Int has [ func <=> Int -> Int ],
    "The first argument should define method <=>",
  Char  has [ func <=> Char -> Int ],
    "The last argument should define method <=>",
  axiom spaceShipTestFirst: Int a, Int b {%
    if (a <=> b) != (b <=> a) { 
      return "Method <=> of Int is not commutative"
    }
  %},
  axiom spaceShipTestLast: Char a, Char b {%
    if (a <=> b) != (b <=> a) {
      return "Method <=> of Char is not commutative"
    }    
  %}
*}
 
object Pair<Int, Char> 

    func init: (Int first, Char last)   {
        self.first = first; 
        self.last = last
    } 

    func getFirst -> Int  = first;

    func setFirst: (Int first)   { self.first = first    } 

    func getLast -> Char  = last;

    func setLast: (Char last)   { self.last = last    } 

    @doc{* 
      return -1 if self < other, 
      0 if self == other, and 
      1 if self > other  
    
    *}
 
    func <=> Pair<Int, Char> other -> Int  {
        var fc = first <=> other getFirst; 
                if fc != 0 {
            return fc
        }        return last <=> other getLast
    } 

    override func asString -> String  = "($first, $last)";

    private var Int first
    private var Char last

end

