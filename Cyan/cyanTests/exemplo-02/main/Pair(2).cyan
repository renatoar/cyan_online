package main

@concept{*
  First has [ func <=> First -> Int ],
    "The first argument should define method <=>",
  Last  has [ func <=> Last -> Int ],
    "The last argument should define method <=>",
  axiom spaceShipTestFirst: First a, First b {%
    if (a <=> b) != (b <=> a) { 
      return "Method <=> of First is not commutative"
    }
  %},
  axiom spaceShipTestLast: Last a, Last b {%
    if (a <=> b) != (b <=> a) {
      return "Method <=> of Last is not commutative"
    }    
  %}
*}
object Pair<First, Last>
    func init: First first, Last last {
        self.first = first;
        self.last = last
    }
    func getFirst -> First = first;
    func setFirst: First first {
        self.first = first
    }
    func getLast -> Last = last;
    func setLast: Last last {
        self.last = last
    }
    @doc{* 
      return -1 if self < other, 
      0 if self == other, and 
      1 if self > other  
    *}
    func <=> Pair<First, Last> other -> Int {
        var fc = first <=> other getFirst;
        if fc != 0 { return fc }
        return last <=> other getLast
    }
    override
    func asString -> String = "($first, $last)";
    var First first
    var Last  last
end
