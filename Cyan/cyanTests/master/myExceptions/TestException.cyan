package myExceptions

object TestException 

    let Int maxN = 1000;
    shared var String _traceString = "";
    
    func traceString -> String = _traceString;
    func resetTraceString { _traceString = "" }
    
    func trace: String s {
        _traceString = _traceString ++ s
    }

    func run {
        /*
        var ea = Array<CyException>();
        ea add: ExceptionZero;
        ea add: ExceptionNeg;
        ea add: ExceptionBig;
        ea add: ExceptionNum;
        for elem in ea {
            {
                throw: elem
            }
            catch: CatchTable();
        }
        */
    }

    func test: Int n {
           
        {  
           process: n
        } catch: CatchZeroBig
          catch: CatchEven
          catch: CatchNum;
        TestException trace: " endTest";
    }
    private func process: (Int n) {
        {  
           check: n;
           if n > maxN {
               throw: ExceptionBig(n)
           }
        } catch: CatchNeg;
        TestException trace: " endProcess";
    }
    private func check: (Int n) {
        if n == 0 {
            throw: ExceptionZero()
        }
        if n < 0 {
            throw: ExceptionNeg(n)
        }
        if n%2 == 0 {
            throw: ExceptionEven(n)
        }
        if n == 5 {
            throw: ExceptionFive(n)
        }
    }
end
