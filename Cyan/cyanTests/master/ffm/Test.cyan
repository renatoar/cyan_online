package ffm


object Test


    func run {
 
    
        let carol = FFM_Test("Carolina", 7);
        let livia = FFM_Test("Livia", 10);



        let sa0b0c0_carol = carol functionForMethodWithSelf: "aaa:0 bbb:0 ccc:0";
        let sa0b0c0_livia = livia functionForMethodWithSelf: "aaa:0 bbb:0 ccc:0";

        assert sa0b0c0_carol eval: carol eval: eval: eval: == "Carolina 7aaa:bbb:ccc:";
        assert sa0b0c0_carol eval: livia eval: eval: eval: == "Livia 10aaa:bbb:ccc:";
        assert sa0b0c0_livia eval: carol eval: eval: eval: == "Carolina 7aaa:bbb:ccc:";
        assert sa0b0c0_livia eval: livia eval: eval: eval: == "Livia 10aaa:bbb:ccc:";

        let fm1_carol = FFM_Test("Carolina", 7) functionForMethod: "m1";
        let fm1_livia = FFM_Test("Livia", 10) functionForMethod: "m1";
        assert fm1_carol eval == 7 &&
               fm1_livia eval == 10;


        var sm1 = FFM_Test functionForMethodWithSelf: "m1";
        assert sm1 eval: carol == 7 &&
               sm1 eval: livia == 10;
        sm1 = carol functionForMethodWithSelf: "m1";
        assert sm1 eval: carol == 7 &&
               sm1 eval: livia == 10;

        //let test_sa0b0c0_carol = carol functionForMethodWithSelf: "aaa:0 bbb:0 ccc:0";

        var Test .# writeCode xyx;
        
        assert (carol functionForMethod: "m2") eval asString == "Carolina 7";
        assert (livia functionForMethod: "m2") eval asString == "Livia 10";
        assert ((carol functionForMethodWithSelf: "m2") eval: carol) asString == "Carolina 7";
        assert ((livia functionForMethodWithSelf: "m2") eval: carol) asString == "Carolina 7";
        assert ((carol functionForMethodWithSelf: "m2") eval: livia) asString == "Livia 10";
        assert ((livia functionForMethodWithSelf: "m2") eval: livia) asString == "Livia 10";
        
        
        let a3b2c2_carol = carol functionForMethod: "aaa:3 bbb:2 ccc:2";

        /*
        Out println: (a3b2c2_carol eval: "0", 1, '2' eval: 3, '4' eval: '5', "6");
        System exit: 0;
        */

        assert a3b2c2_carol eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Carolina 70123456";
        let a3b2c2_livia = livia functionForMethod: "aaa:3 bbb:2 ccc:2";
        assert a3b2c2_livia  eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Livia 100123456";
        // Out println: (a3b2c2_livia  eval: "0", 1, '2' eval: 3, '4' eval: '5', "6");

        let sa3b2c2_carol = carol functionForMethodWithSelf: "aaa:3 bbb:2 ccc:2";
        assert sa3b2c2_carol eval: carol eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Carolina 70123456";
        assert sa3b2c2_carol eval: livia eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Livia 100123456";
        let sa3b2c2_livia = livia functionForMethodWithSelf: "aaa:3 bbb:2 ccc:2";
        assert sa3b2c2_livia  eval: livia eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Livia 100123456";
        assert sa3b2c2_livia  eval: carol eval: "0", 1, '2' eval: 3, '4' eval: '5', "6" ==
               "Carolina 70123456";
               
    
        let a0b0c0_carol = carol functionForMethod: "aaa:0 bbb:0 ccc:0";
        let a0b0c0_livia = livia functionForMethod: "aaa:0 bbb:0 ccc:0";
        
        assert a0b0c0_carol eval: eval: eval: == "Carolina 7aaa:bbb:ccc:";
        assert a0b0c0_livia eval: eval: eval: == "Livia 10aaa:bbb:ccc:";
        


        // aaa: bbb: String s, Char ch ccc:
        let a0b2c0_carol = carol functionForMethod: "aaa:0 bbb:2 ccc:0";
        let a0b2c0_livia = livia functionForMethod: "aaa:0 bbb:2 ccc:0";

        assert a0b2c0_carol eval: eval: "xy", '0' eval: == "Carolina 7xy0";
        assert a0b2c0_livia eval: eval: "ttt", 'u' eval: == "Livia 10tttu";

        let sa0b2c0_carol = carol functionForMethodWithSelf: "aaa:0 bbb:2 ccc:0";
        let sa0b2c0_livia = livia functionForMethodWithSelf: "aaa:0 bbb:2 ccc:0";

        assert sa0b2c0_carol eval: carol eval: eval: "xy", '0' eval: == "Carolina 7xy0";
        assert sa0b2c0_livia eval: carol eval: eval: "ttt", 'u' eval: == "Carolina 7tttu";
        assert sa0b2c0_carol eval: livia eval: eval: "xy", '0' eval: == "Livia 10xy0";
        assert sa0b2c0_livia eval: livia eval: eval: "ttt", 'u' eval: == "Livia 10tttu";
 
        // aaa: String s, Int n   bbb:  ccc: Char ch -> String =

        /*
           func aaa: bbb: String s, Int n -> String = 
               asString ++ "aaa:bbb:" ++ s ++ n;
           
           func aaa: String s, Int n -> String = 
               asString ++ "aaa:" ++ s ++ n;
           
        
        */
        let a0b2_carol = carol functionForMethod: "aaa:0 bbb:2";
        let a0b2_livia = livia functionForMethod: "aaa:0 bbb:2";
     
        assert a0b2_carol eval: eval: "0", 1 == "Carolina 7aaa:bbb:01";   
        assert a0b2_livia eval: eval: "0", 1 == "Livia 10aaa:bbb:01";   
        
        let sa0b2_carol = carol functionForMethodWithSelf: "aaa:0 bbb:2";
        let sa0b2_livia = livia functionForMethodWithSelf: "aaa:0 bbb:2";
     
        assert sa0b2_carol eval: carol eval: eval: "0", 1 == "Carolina 7aaa:bbb:01";   
        assert sa0b2_carol eval: livia eval: eval: "0", 1 == "Livia 10aaa:bbb:01";   
        assert sa0b2_livia eval: carol eval: eval: "0", 1 == "Carolina 7aaa:bbb:01";   
        assert sa0b2_livia eval: livia eval: eval: "0", 1 == "Livia 10aaa:bbb:01";   

        let a2_carol = carol functionForMethod: "aaa:2";
        let a2_livia = livia functionForMethod: "aaa:2";
     
        assert a2_carol eval: "0", 1 == "Carolina 7aaa:01";   
        assert a2_livia eval: "0", 1 == "Livia 10aaa:01";   
        
        let sa2_carol = carol functionForMethodWithSelf: "aaa:2";
        let sa2_livia = livia functionForMethodWithSelf: "aaa:2";
     
        assert sa2_carol eval: carol eval: "0", 1 == "Carolina 7aaa:01";   
        assert sa2_carol eval: livia eval: "0", 1 == "Livia 10aaa:01";   
        assert sa2_livia eval: carol eval: "0", 1 == "Carolina 7aaa:01";   
        assert sa2_livia eval: livia eval: "0", 1 == "Livia 10aaa:01";   


        //     func aaa: -> String = asString ++ "aaa:";

        let a0_carol = carol functionForMethod: "aaa0:1";
        let a0_livia = livia functionForMethod: "aaa0:1";
     
        assert a0_carol eval: Nil == "Carolina 7aaa:";   
        assert a0_livia eval: Nil == "Livia 10aaa:";   
        
        let sa0_carol = carol functionForMethodWithSelf: "aaa0:1";
        let sa0_livia = livia functionForMethodWithSelf: "aaa0:1";
     
        assert sa0_carol eval: carol eval: Nil == "Carolina 7aaa:";   
        assert sa0_carol eval: livia eval: Nil == "Livia 10aaa:";   
        assert sa0_livia eval: carol eval: Nil == "Carolina 7aaa:";   
        assert sa0_livia eval: livia eval: Nil == "Livia 10aaa:";   



        let plus1_carol = carol functionForMethodWithSelf: "*1";
        let plus1_livia = livia functionForMethodWithSelf: "*1";
        let minus_carol = carol functionForMethodWithSelf: "-";
        let minus_livia = livia functionForMethodWithSelf: "-";



        assert (carol functionForMethod: "*1") eval: 41 == '0';
        assert (livia functionForMethod: "*1") eval: 90 == 'd';
        assert (carol functionForMethod: "-") eval == "Carolina 7sss";
        assert (livia functionForMethod: "-") eval == "Livia 10sss";
        

        assert plus1_carol eval: carol eval: 42 == '1';
        assert plus1_carol eval: livia eval: 40 == '2';
        assert plus1_livia eval: carol eval: 42 == '1';
        assert plus1_livia eval: livia eval: 40 == '2';

        assert minus_carol eval: carol == "Carolina 7sss";
        assert minus_carol eval: livia == "Livia 10sss";
        assert minus_livia eval: carol == "Carolina 7sss";
        assert minus_livia eval: livia == "Livia 10sss";
        
        
        /*

        let Function<Nil> mRun = Test functionForMethod: "run2";
        mRun eval;
        let Function<Array<String>, Nil> mRun1 = Test functionForMethod: "run:1";
        mRun1 eval: [ "0", "1", "2" ];
        let Function<String, Int, Char><Int, Char><Char, String, String> mabc = 
            Test functionForMethod: "aa:3 bb:2 cc:2";
        (mabc eval: "0", 1, '2' eval: 3, '4' eval: '5', "6") println;
        let Function<Int, Char> mMult = Test functionForMethod: "*1";
        (mMult eval: 0) println;
        let Function<String> mMinus = Test functionForMethod: "-";
        mMinus eval println;


        
        let t0 = Test();
        let t1 = Test();
        let Function<Test, Nil> mRunSelf = Test functionForMethodWithSelf: "run2";
        mRunSelf eval: t0;
        "aaa" println;
        let Function<Test><Array<String>, Nil> mRun1Self = Test functionForMethodWithSelf: "run:1";
        mRun1Self eval: t1 eval: [ "0", "1", "2" ];
        "bbb" println;
        let Function<Test><String, Int, Char><Int, Char><Char, String, String> mabcSelf = 
            Test functionForMethodWithSelf: "aa:3 bb:2 cc:2";
        (mabcSelf eval: t0 eval: "0", 1, '2' eval: 3, '4' eval: '5', "6") println;
        "ccc" println;
        let Function<Test><Int, Char> mMultSelf = Test functionForMethodWithSelf: "*1";
        (mMultSelf eval: t1 eval: 0) println;
        "ddd" println;
        let Function<Test, String> mMinusSelf = Test functionForMethodWithSelf: "-";
        (mMinusSelf eval: t1) println;
        "eee" println;
        
        */

    }
    
    func run2 { "run" println }
    func run: Array<String> args { args foreach: Println<String> }
    func aa: String s0, Int s1, Char s2
         bb: Int s3, Char s4
         cc: Char s5, String s6 -> String  {
         "aa:bb:cc:" println;
         return ""
    }

    func * Int n -> Char { "* Int" println; return n asChar }
    func - -> String { "- unary" println; return "000" }    

end
