package funct

import bank

object FuncTest

    var Int a0 = 0;
    
    var Function<Int> f0


    func init {
        f0 = { ^0 }
    }

    func test {
        f0 = { ^a0 };   


        var a1 = 49;
        assert ({ (: Int i -> Char :) ^i asChar } eval: 48) asString == "0";
        
        assert ({ (: Char ch :) ^(a1 + (ch asInt)) asChar } eval: '\0') == '1'; 
        assert ( { a1 = 2; ^a1 } eval asString ) == "2";
        var typeof( { (: Int x :) ^'A' } ) ff;      
        ff = { (: Int w :) ^'w' };
        assert (ff eval: 0) == 'w';
        
        a1 = 1;
        a0 = 0;
        var f1 = { (: Int n :)
            a0 = a0 + n;  // a0 is instance variable
            a1 = a1 + 5;
            var a2 = 2;
            var f2 = { (: Int k :)
                var a3 = 3;
                a0 = a0 + 10;
                a1 = a1 + 1000;
                a2 = a2 + 10000;
                ^a0 + a1 + a2 + a3 + k;
            };
            ^a0 + a1 + a2 + (f2 eval: a0);
        };
        assert (f1 eval: 3) == 11038;
        assert (a0 + a1 + (f1 eval: 3)) == (14_000 + 106);
        // a0 = 3, 13
        // a1 = 6, 1006
        // a2 = 2, 10002
        // a3 = 3
        // k = 3
        // f2 returns 10017
        a0 = 0;
        assert f0 eval == 0;        

        a1 = 1;
        var Int i = 13;
        var f11 = { (: Int ii, Char p2, String p3 :) ^p3 ++ p2 ++ ii ++ a1 };
        assert (f11 eval: 0, 'w', "z") == "zw01";
        var f22 = { (: Int ii, Char p2 -> String :) 
           ^ "" ++ a1 ++ p2 ++ ii 
           };
        assert (f22 eval: 0, 'a') == "1a0";

    
        var Function<Int, Char><String, Long><Char><Function<Int, String>, Any, String> f27;
        
        f27 = { (: eval: Int a, Char b eval: String c, Long d eval: Char e 
                  eval: Function<Int, String> f, Any g :) 
           ^ "" ++ a ++ b ++ c ++ d ++ e ++ (f eval: 0) ++ g;
        };
        assert (f27 eval: 5, 'C' eval: "arolina", 5L eval: 'k' 
            eval: { (: Int i3 :) ^i3 asString }, 'g') == "5Carolina5k0g";                

        var ff1 = { (: Int a -> Int :) ^2*a };
        var ff2 = { (: Int b -> Int :) ^b + 1 };
        var ff3 = { (: Int c -> Int :) ^4*c };
        var ff4 = { (: -> Int :) ^1 };
        var ff5 = { (: -> Int :) ^2 };
        var ff6 = { (: Int a :) a println };
        
        assert (ff1 |> ff2 |> ff3 eval: 1) == 12;
        assert (1 |> ff1 |> ff2 |> ff3) == 12;
        assert ((ff4 |> ff1) eval == 2) &&
            ((ff5 |> ff2) eval == 3);

        funcTest0;
        funcTest1;
    }

    func funcTest0 {
        var f = { (: Int a, Int b, Int c -> Long :) ^ (a + b + c) asLong };
        var Function<Int, Int, Long> f2 = f curry: 0;
        var Function<Int, Long> f3 = f2 curry: 1;
        var Function<Long> f4 = f3 curry: 2;
        var r1 = f eval: 0, 1, 2;
        var r2 = f2 eval: 1, 2;
        var r3 = f3 eval: 2;
        var r4 = f4 eval;
        assert r1 == r2 && r1 == r3 && r1 == r4;
    }
    
   
    func + -> String { return #aString }
    
    func * Int n -> Char = '*';
    
    func % FuncTest p { }

 
    func funcTest1 {
        var f1 = { (: bank.Bank|Client b1 :) 
           ^ { (: Client n :) 
               ^ { (: Bank b, bank.Client c :) ^b } 
             } 
        };
        let carolClient = Client new: "Carol";
        let bankCarol = Bank new: "Central";
        var Bank|bank.Client b2 = carolClient;
        var bank.Bank|Client b11;
        b11 = b2; 
        b2 = b11;
        
        var Function<Client, Function<Bank, Client, Bank>> f2 = f1 eval: b2;
        f2 = f1 eval: b11;
        assert ((f2 eval: carolClient) eval: bankCarol, carolClient) getName == "Central";
        
        var Function<bank.Client, Function<bank.Bank, Client, Bank>> f5;
        var Function<Client, cyan.lang.Function<Bank, bank.Client, bank.Bank>> f6;

        f5 = f2;
        f2 = f5;
        f6 = f2;
        f2 = f6;
        f5 = f6;
        f6 = f5;
        var f3 = f2 eval: (Client new: "Lívia");
        var Function<Bank, Client, Bank> f7;
        var Function<bank.Bank, bank.Client, Bank> f8;
        var Function<Bank, Client, bank.Bank> f9;
        f7 = f3;
        f3 = f7;
        f8 = f3;
        f9 = f3;
        f3 = f8;
        f3 = f9;
        f8 = f9;
        f7 = f8;
        f8 = f7;
        f9 = f7;
        f7 = f9;
        
        var g1 = { (: Bank|bank.Client b1 :) 
           var Function<Client, Function<Bank, bank.Client, Bank>> b3 = { 
                (: bank.Client n :) 
                var Function<Bank, bank.Client, Bank> n2 = { 
                      (: bank.Bank b, Client c :) 
                   var Bank b22 = b;
                   ^b22
                };
                f7 = n2; n2 = f7; f8 = n2; n2 = f8; f9 = n2; n2 = f9;
                
                ^n2
           };
           f6 = b3; b3 = f6;
           ^b3
        };

        
        var Bank b3 = f3 eval: Bank new, (Client new: "Marcia");
    }    
    
    func get -> Int = 0;
    
 end    

