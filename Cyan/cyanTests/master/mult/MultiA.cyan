package mult

open
object MultiA

    func sum: mult: -> Int = 0;
    
    overload
    func sum: Int i mult: -> Int = i;
    func sum: String i 
         mult: -> Int { 
         
         cast value = i asInt {
            return value
         }
         else {
            return 88888
         }
         //^ i asInt 
    }
    
    overload
    func sum:  mult: Int n -> Int = n;
    func sum:  mult: String n -> Int { 
         cast value = n asInt {
            return value
         }
         else {
            return 88888
         }
        //^n asInt 
    }

    overload
    func sum: Int i -> Int = i;
    func sum: Short i -> Int = i asInt + 1;
    
    func sum: String s -> Int {
         cast value = s asInt {
            return value
         }
         else {
            return 88888
         }
         //s asInt;
    }
    
    func sum: Byte b -> Int = b asInt;

    overload
    func sum: Int i, Int j -> Int = i + j;
    func sum: Int i, String j -> Int { 
         cast value = j asInt {
            return i + value
         }
         else {
            return 88888
         }
        // ^i + j asInt; 
    }
    func sum: String i, Int j -> Int {
         cast value = i asInt {
            return value + j
         }
         else {
            return 88888
         }
        // ^i asInt + j;
    }

    overload
    func sum: Int i, Int j, Int k -> Int = i + j + k;
    func sum: Int i, String j, Int k -> Int {
         cast value = j asInt {
            return i + value + k
         }
         else {
            return 88888
         }
         //^i + j asInt + k;
    }
    func sum: String i, Int j, String k -> Int {
         cast valuei = i asInt, valuek = k asInt {
            return valuei + j + valuek;
         }
         else {
            return 88888
         }
        // ^i asInt + j + k asInt;
    }

    overload
    func sum: Int i mult: Int a -> Int = i*a;
    func sum: Byte i mult: Int a -> Int = i asInt *a;
    func sum: String i mult: MultiA a -> Int {
        cast valuei = i asInt {
            return valuei * a asInt
        }
        else {
            return 8888
        }
        // ^i asInt * a asInt;
    }

    overload
    func sum: Int i, Int j mult: Int a -> Int = (i + j)*a;

    overload
    func sum: Int i, Int j, Int k mult: Int a -> Int = (i + j + k)*a;
    
    overload
    func sum: Int i mult: Int a, Int b -> Int = i*a*b;
    func sum: String i mult: String a, Byte b -> Int {
        cast valuei = i asInt, valuea = a asInt {
            return valuei*valuea* b asInt
        }
        else {
            return 8888
        }
        // ^ i asInt *a asInt * b asInt;
    }


    overload
    func sum: Int i, Int j, Int k 
        mult: Int a
        mult: Int b, Int c
           -> Int = (i + j + k)*a*b*c;    
           
    func sum: Int i, String j, MultiA k 
         mult: String a
         mult: Int b, String c
           -> Int {
        cast valuej = j asInt, 
               valuea = a asInt, valuec = c asInt {
            return (i + valuej + k asInt)*valuea*b*valuec;
        }
        else {
            return 8888
        }
        // ^(i + j asInt + k asInt)*a asInt *b* c asInt;    
    }

    overload
    func m: Int n -> Int = m: "" ++ n;
    func m: String n -> Int { 
        cast valuen = n asShort {
            return m: valuen
        }
        else {
            return 8888
        }
        //^ m: (n asShort) 
    }
    func m: Short n -> Int = self m: (n asLong);
    func m: Long n -> Int = n asInt;
    func m: Byte n -> Int = 0;
    

    func testParamReturn: MultiB first, MultiC second -> MultiA = MultiA;

    func asInt -> Int = 1;
end
