package generic02.gb

/*
   test the rules 
       ExprPrimary ::= QualifId { "<" TypeList ">" }+ [ ObjectCreation ] |
                       "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
       SingleType ::= QualifId { "<" TypeList ">" } | BasicType |
                      "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
*/

@concept{*
    M in [ Empty ]
*}
object IdGenericPrototype<M>


    func test {
        assert M<Int> prototypeName == "" ++ ( @symbolToString(M) ) ++ "<Int>";
        var M<Int> x = M<Int> new;
        var M<Int> y = M<Int>();
        let stringM = ( @symbolToString(M) );
        assert x prototypeName == "" ++ stringM ++ "<Int>";
        var typeof( M<Int> ) v = typeof(x) new;
        assert v prototypeName == "" ++ stringM ++ "<Int>";
    }
end

