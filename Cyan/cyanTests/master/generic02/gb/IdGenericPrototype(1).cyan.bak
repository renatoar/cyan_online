package generic02.gb

/*
   test the rules 
       ExprPrimary ::= QualifId { "<" TypeList ">" }+ [ ObjectCreation ] |
                       "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
       SingleType ::= QualifId { "<" TypeList ">" } | BasicType |
                      "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
*/

object IdGenericPrototype<M>
    @firstBelongsTo(M, "Empty")


    fun test {
        assert M<Int> prototypeName == "" + ( @paramToString(M) ) + "<Int>";
        var M<Int> x = M<Int> new;
        var M<Int> y = M<Int>();
        const stringM = ( @paramToString(M) );
        assert x prototypeName == "" + stringM + "<Int>";
        var typeof( M<Int> ) v = typeof(x) new;
        assert v prototypeName == "" + stringM + "<Int>";
    }
end

