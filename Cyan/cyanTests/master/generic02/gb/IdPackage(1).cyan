package generic02.gb

/*
   test the rules 
       QualifId ::= Id { "." Id }
       ExprPrimary ::= "self" [ "." Id ]  |
                       "super" UnaryId |
                       QualifId { "<" TypeList ">" }+ [ ObjectCreation ] |
                       "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
       MetSigUnary ::= Id
       SelecWithParam ::= IdColon |
                          IdColon [ "[]" ] ParamList 
       MessageSendNonUnary ::= { [ BACKQUOTE ] IdColon [ RealParamters ] }+
       SingleType ::= QualifId { "<" TypeList ">" } | BasicType |
                      "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
*/

  // M should be "mult"
@concept{*
    T in [ mult ]
*}
object IdPackage<M> extends IdPackageSuper<M>
    
    func init {
    }
    func test {
        var M.MultiA a = M.MultiA new;
        let M.MultiA b = M.MultiA();
        var typeof( M.MultiA ) c = M.MultiA();
        
        assert (a sum: 0) == 0;
        assert (c sum: 1) == 1;
        
        let selfM = self M;
        let superM = super M;
        let stringM = ( @symbolToString(M) );
        let superMdot = super M1;
        let superMdotabcde = super M: "abcde";
        let selfMdotabc = M: "abc";
        let selfMdot = M1;
        let selfMdotabcExplicit = self M: "abc";
        let selfMdotExplicit = self M1;
        
        assert selfM == "mult";
        assert superM == "" ++ stringM ++ stringM &&
               (superMdot) == "ab" &&
               superMdotabcde == "abcde";
        
        assert selfMdotabc == "mult:abc" &&
               selfMdot == "abc";
        assert selfMdotabcExplicit == "mult:abc" &&
               selfMdotExplicit == "abc";
    }
    func M -> String = ( @symbolToString(M) );
    func M1 -> String = "abc";
    func M: String s = "mult:" ++ s;
end

