package generic02.ga

/*
   test the rules 
       QualifId ::= Id { "." Id }
       ExprPrimary ::= "self" [ "." Id ]  |
                       "super" UnaryId |
                       QualifId { "<" TypeList ">" }+ [ ObjectCreation ] |
                       "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
       MetSigUnary ::= Id
       SelecWithParam ::= IdColon |
                          IdColon [ "[]" ] ParamList 
       MessageSendNonUnary ::= { [ BACKQUOTE ] IdColon [ RealParamters ] }+
       SingleType ::= QualifId { "<" TypeList ">" } | BasicType |
                      "typeof" "(" QualifId [ "<" TypeList ">" ] ")"
*/

@concept{*
    M in [ mult ]
*}
object IdPackage<M> extends IdPackageSuper<M>
      // M should be "mult"
    
    func init {
    }
    func test {
        var M.MultiA a = M.MultiA new;
        let M.MultiA b = M.MultiA();
        var typeof( M.MultiA ) c = M.MultiA();
        assert a sum: 0 == 0;
        assert c sum: 1 == 1;
        
        let selfM = self M;
        let superM = super M;
        let superMdot = super M1;
        let superMdotabcde = super M: "abcde";
        let numberM = #M;        
        let selfMdot = M1;
        let superMabc = super M: "abc";
        let selfMabc = self M: "abc";
        
        assert selfM == "mult";
        let numberM2 = "" ++ numberM ++ numberM;
        assert superM == numberM2;
        assert numberM2 == superM;
        assert superMdot == "ab" &&
               superMdotabcde == "abcde";
        
        assert superMabc == "abc" &&
               selfMdot == "abc";
        assert selfMabc == "mult:abc" &&
               selfMdot == "abc";
    }
    override
    func M -> String = "" ++ #M;
    override
    func M1 -> String = "abc";
    override
    func M: String s -> String = "mult:" ++ s;
end

