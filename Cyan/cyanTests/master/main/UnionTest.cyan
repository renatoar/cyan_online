package main

import people
import bank
import unionTest

object UnionTest

    func run {
        @callTestMethods ;
    }

    func equalFloat: Float a, Float b -> Boolean {
        return (a - b) < 0.01F && (a - b) > -0.01F
    }

    func runMinus1 -> Short|String|Int|cyan.lang.Char|Nil|Bank|bank.Client = 0Short;


    func castTest {
    
        var IBox ibox = BoxA(BoxB("box-a-b"));
        type ibox
            case BoxA ba {
                cast boxb = ba get, s = boxb get {
                    assert s == "box-a-b";
                }
            }
            case BoxOther bo {
                assert false;
            }
            
        ibox = BoxOther();
        type ibox
            case BoxA ba {
                assert false;
            }
            case BoxOther bo {
                cast boxb = bo get, s = boxb get {
                    assert s == "ibox";
                }
            }            
    
        let energy = Union<wattHour, Float, calorie, Float, joule, Float> new;
        energy wattHour: 5.0Float;
    
        type energy
            case Float wattHour {
                assert wattHour equal: 5.0Float;
            }
            case Float calorie {
                assert false;
            }
            case Float joule {
                assert false;
            }
    
        var Int|String|Nil x = 0;
        type x 
            case Int n { assert n == 0; }
            case String s { assert false; }
            case Nil nil { assert false; }
            
        x = "Hi";
        
        type x 
            case Int n { assert false; }
            case String s { assert s == "Hi"; }
            case Nil nil { assert false; }
        
        
        x = Nil;
        
        type x 
            case Int n { assert false; }
            case String s { assert false;  }
            case Nil nil { assert nil == Nil; }
        
        
        
        var Int|UnionTest ip = 10;
        type ip 
            case Int n { assert n == 10; }
            case UnionTest ut { assert false; }
            
        ip = UnionTest();
        
        type ip 
            case Int n { assert false; }
            case UnionTest ut { 
                assert ut prototypeName == self prototypeName; 
            }
        

        let un = Union<aa, Int, bb, String, cc, Int, dd, UnionTest, ee, String> new;
        un aa: 0;
        type un 
            case Int aa { assert aa == 0; }
            case String bb { assert false; }
            case Int cc { assert false; }
            case UnionTest dd { assert false; }
            case String ee { assert false; }
            
        un bb: "1";        
        type un 
            case Int aa { assert false; }
            case String bb { assert bb == "1"; }
            case Int cc { assert false; }
            case UnionTest dd { assert false; }
            case String ee { assert false; }
        un cc: 2;
        type un 
            case Int aa { assert false; }
            case String bb { assert false; }
            case Int cc { assert cc == 2; }
            case UnionTest dd { assert false; }
            case String ee { assert false; }
            
        un dd: UnionTest();
        type un 
            case Int aa { assert false; }
            case String bb { assert false; }
            case Int cc { assert false; }
            case UnionTest dd { assert self prototypeName == dd prototypeName; }
            case String ee { assert false; }
        
        un ee: "ee";
        type un 
            case Int aa { assert false; }
            case String bb { assert false; }
            case Int cc { assert false; }
            case UnionTest dd { assert false; }
            case String ee { assert ee == "ee"; }
        
    
    }
    
    func unionTest {
        var Nil|Int ni;
        var Int|Nil in2;
        var String|Nil sn;
        var Nil|String ns;
        var Int|Nil|String ins;
        var Nil|Int|String nis;
        var Int|String|Nil isn;
        var Nil|Int ni_u;
        var Nil|Int|String nis_u;
        var Boolean ok = true;
        
        ni = 0;
        type ni
            case Nil { ok = false }
            case Int { ok = true }
        assert ok;
        ni = Nil;
        type ni
            case Nil { ok = false }
            case Int { ok = true }
        assert !ok;


        in2 = 0;
        type in2 
            case Int n { ok = n == 0 }
            case Nil   { ok = false }
        assert ok;
        in2 = Nil;
        type in2 
            case Int n  { ok = true }
            case Nil  { ok = false }
        assert !ok;

        
        var anUnion = returnUnion5: Bank("BB");
        type anUnion
           case String { assert false; }
           case Int  { assert false; }
           case Char  { assert false; } 
           case Bank b { assert b getName == "BB"; }
           case Client  { assert false; };

        anUnion = returnUnion5: Client("Carolina");
        type anUnion 
           case String  { assert false; }
           case Int  { assert false; }
           case Char  { assert false; } 
           case Bank  { assert false; }
           case Client c { assert c name == "Carolina"; };


        anUnion = returnUnion5: "Livia";
        type anUnion 
           case String s { assert s == "Livia"; }
           case Int  { assert false; }
           case Char  { assert false; } 
           case Bank  { assert false; }
           case Client  { assert false; };

        anUnion = returnUnion5: 11;
        type anUnion 
           case String  { assert false; }
           case Int n { assert n == 11; }
           case Char  { assert false; } 
           case Bank  { assert false; }
           case Client  { assert false; };

        anUnion = returnUnion5: '#';
        type anUnion 
           case String  { assert false; }
           case Int  { assert false; }
           case Char c { assert c == '#'; } 
           case Bank  { assert false; }
           case Client  { assert false; };

          // Short|String|Int|cyan.lang.Char|Nil|Bank|bank.Client = 0Short
        type runMinus1
           case Short  { assert true; }
           case String  { assert false; }
           case Int  { assert false; }
           case Char  { assert false; } 
           case Nil  { assert false; }
           case Bank  { assert false; }
           case Client  { assert false; };

        var bank.Bank|Client|String|Int|Char p;
        var Bank b = Bank("Banco do Brasil");
        var Client c = Client("Lívia");
        var String s = "Carol";
        var Int i = 5;
        var Char ch = 'a';
        p = b;
        type p 
            case Bank bank { assert bank getName == "Banco do Brasil"; }
            case Client  { assert false; }
            case String  { assert false; }
            case Int  { assert false; }
            case Char  { assert false; };
        
        p = c;
        type p 
            case Bank  { assert false; }
            case Client client { assert client name == "Lívia"; }
            case String  { assert false; }
            case Int  { assert false; }
            case Char  { assert false; };
        p = s;
        type p 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String s1 { assert s1 == "Carol"; }
            case Int  { assert false; }
            case Char  { assert false; };
        p = i;
        type p 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Int n { assert n == 5; }
            case Char  { assert false; }
          
        p = ch;
        type p 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Int  { assert false; }
            case Char ch1 { assert ch1 == 'a'; }

        var bank.Bank|Client|String|Nil|Int|Char pp;

        pp = b;
        type pp 
            case Bank bank { assert bank getName == "Banco do Brasil"; }
            case Client  { assert false; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char  { assert false; }
        
        pp = c;
        type pp 
            case Bank  { assert false; }
            case Client client { assert client name == "Lívia"; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char  { assert false; }
        pp = s;
        type pp 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String name { assert name == "Carol"; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char  { assert false; }
          
        pp = Nil;
        type pp 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char  { assert false; }

        type pp
            case Nil nil {
                assert true;
            }
            else {
                assert false;
            } 
        
        pp = i;
        type pp 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int n { assert n == 5; }
            case Char  { assert false; }
          
        pp = ch;
        type pp 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char ch1 { assert ch1 == 'a'; }

        
        type pp
            case Nil nil {
                assert false;
            }
            else {
                assert true;
            } 



        var fv = 329.0Float;
        var String|Int|cyan.lang.Char|Bank|bank.Client sicbc;
        var String|cyan.lang.Int|Char|bank.Bank|Client sicbc2;
                
        sicbc = 0;
        sicbc2 = sicbc;
        
        // sicbc = sicbc2 ?clone;
        type sicbc 
            case String  s1 { assert false; }
            case Int n { assert n == 0; }
            case Char  { assert false; }
            case Bank  { assert false; }
            case Client  { assert false; }
              
        // assert sicbc ?isA: Int;
                
        var Int|cyan.lang.Char u1;
        var cyan.lang.Int|Char u2 = 0;
        u1 = u2;
        u2 = u1;
        type u2 
            case Int n { assert n == 0; }
            case Char  { assert false; }
           
        var Bank|bank.Client ub1;
        var bank.Bank|Client ub2 = Client("Carol");
        ub1 = ub2;
        ub2 = ub1;
        type ub2 
            case Bank  { assert false; }
            case Client client { assert client name == "Carol"; }
            
        var mix = Union<calorie, Float, name, String, age, Int, 
                        bank, Bank, client, bank.Client> new;
        var anotherMix = mix clone;
                  
        mix calorie: 0.0Float;
        type mix 
            case Float calorie { assert equalFloat: calorie, 0.0Float; }
            case String name { assert false; }
            case Int age { assert false; }
            case Bank bank { assert false; }
            case bank.Client client { assert false; }
            
        assert mix == 0.0Float;

        anotherMix name: "Livia";
        type anotherMix 
            case Float calorie { assert false; }
            case String name { assert name == "Livia"; }
            case Int age { assert false; }
            case Bank bank { assert false; }
            case bank.Client client { assert false; };            
            
        assert anotherMix == "Livia" && anotherMix != "Livia NG";

        mix age: 100;
        
        type mix 
            case Float calorie { assert false; }
            case String name { assert false; }
            case Int age { assert age + 1 - 1 == 100; }
            case Bank bank { assert false; }
            case bank.Client client { assert false; };
            
        let Bank myBank = Bank("BB");
        mix bank: myBank;
        
        type mix 
            case Float calorie { assert false; }
            case String name { assert false; }
            case Int age { assert age + 1 - 1 == 100; }
            case Bank bank { assert bank eq: myBank; }
            case bank.Client client { assert false; };
            
        let myClient = Client("Carol");
        mix client: myClient;
        
        type mix 
            case Float calorie { assert false; }
            case String name { assert false; }
            case Int age { assert age + 1 - 1 == 100; }
            case Bank bank { assert bank eq: myBank; }
            case bank.Client client { assert client eq: myClient; };        
        
            

        var Union<wattHour, Float, calorie, Float, joule, Float> x, y;
        x = Union<wattHour, Float, calorie, Float, joule, Float> new;
        y = Union<wattHour, Float, calorie, Float, joule, Float> new;
        x wattHour: 329.0Float;
        x calorie: 10.0F;
        x joule: 34.0F;
        
        type x 
            case Float wattHour { assert false; }
            case Float calorie  { assert false; }
            case Float joule    { assert equalFloat: joule, 34.0F; };
        y joule: 34.0Float;
        type (self returnNamedUnion: x)
            case Float wattHour { assert false; }
            case Float calorie  { assert false; }
            case Float joule    { assert true; };

    }


    func castTypeTest {
    
        
        var Int|Nil nNil = 5;
    
        var BoxA|Nil ba, BoxB bb;
        bb = BoxB new: "AAAA";
        ba = BoxA(bb);

        cast a = ba, BoxB b = a get, c = b get, n9 = nNil {
            assert a == ba;
            assert b == bb;
            assert c == "AAAA";
            assert n9 == 5;
        }
    
        var String|Nil sn = Nil;

        cast s5 = sn {
            assert false;
        }
        else {
            assert true;
        }
        sn = "ok";
        cast s5 = sn {
            assert s5 == "ok";
        }
        else {
            assert true;
        }


        var String|cyan.lang.Nil sn2 = Nil;
        cast s5 = sn2 {
            assert false;
        }
        else {
            assert true;
        }
        sn = "ok";
        cast s5 = sn2 {
            assert s5 == "ok";
        }
        else {
            assert true;
        }

        var cyan.lang.String|Nil sn3 = Nil;
        cast s5 = sn3 {
            assert false;
        }
        else {
            assert true;
        }
        sn = "ok";
        cast s5 = sn3 {
            assert s5 == "ok";
        }
        else {
            assert true;
        }

        var cyan.lang.String|cyan.lang.Nil sn4 = Nil;
        cast s5 = sn4 {
            assert false;
        }
        else {
            assert true;
        }
        sn = "ok";
        cast s5 = sn4 {
            assert s5 == "ok";
        }
        else {
            assert true;
        }

        

        var Array<Union<number, Int, numberStr, String>> au;
        
        var Bank|Client|String|Nil|Int|Char pp2;

        pp2 = Nil;
        type pp2 
            case Bank  { assert false; }
            case Client  { assert false; }
            case String  { assert false; }
            case Nil  { assert true; }
            case Int  { assert false; }
            case Char  { assert false; }

        var myUnion = Union<number, Int, numberStr, String> new;

        // myUnion = "12"; // compile-time error
        myUnion number: 12; // ok
        type myUnion
            case Int number {
                assert number == 12;
            }
            case String numberStr {
                 assert false;
            }

        myUnion numberStr: "12"; // ok
        type myUnion
            case Int number {
                assert false;
            }
            case String numberStr {
                 assert numberStr == "12";
            }
        
        var Union<wattHour, Double, calorie, Double, joule, Double>  wwwww;
        var energy = Union<wattHour, Double, calorie, Double, joule, Double> new;

        energy wattHour: 314.15;
        type energy
            case Double wattHour {
               assert wattHour equal: 314.15;
            }
            case Double calorie {
                assert false;
            }
            case Double joule {
                assert false;
            }
        

        
        var Int|String is = 123;
        type is 
            case Int is123 { 
                assert is123 == 123;
                assert is123 eq: 123;
            }
            case String {
                assert false;
            }
        /*
        assert is == 123;
        assert is ?eq: 123;
        assert is ?isA: Int;
        assert !(is ?isA: String);
        */
        
    
        // var Person|Person pw;
        var Worker|Person pw2 = Worker("Marcia", 48, "UFSCar");
    
        var String|Char|Int mix;
        var String aString;
        var Char aChar;
        var Int anInt;
        
        aString = "";
        aChar = '\0';
        anInt = 0;
        
        var String ss;

        var Dyn dynMix = "cccc";
        type dynMix 
            case String s { 
                aString = s; 
                var Int kkk = 0;
                assert s == "cccc";
            }
            case Char ch  { 
                aChar = ch; 
                var Int kkk = 0;
                assert false;
            }
            case Int n    { 
                anInt = n; 
                var Int kkk = 0;
                assert false;
            }
        assert aString == "cccc" && aChar == '\0' && anInt == 0;


        dynMix = 'X';
        type dynMix 
            case String s { 
                aString = s; 
                var Int kkk = 0;
                assert false;
            }
            case Char ch  { 
                aChar = ch; 
                var Int kkk = 0;
                assert ch == 'X';
            }
            case Int n    { 
                anInt = n; 
                var Int kkk = 0;
                assert false;
            }


        
        mix = "aaaa";
        type mix 
            case String s { 
                aString = s; 
                var Int kkk = 0;
                aChar = 'x';
                anInt = 22;
                assert s == "aaaa";
            }
            case Char ch  { 
                aChar = ch; 
                var Int kkk = 0;
            }
            case Int n    { 
                anInt = n; 
                var Int kkk = 0;
            }
        assert aString == "aaaa" && aChar == 'x' && anInt == 22;


        mix = "aaaa";
        type mix 
            case Char ch  { 
                aChar = ch; 
                var Int kkk = 0;
            }
            case Int n    { 
                anInt = n; 
                var Int kkk = 0;
            }
            else {
                var Int kkk = 0;
                aString = "bbbb";
                aChar = 'y';
                anInt = 33;
            }
        assert aString == "bbbb" && aChar == 'y' && anInt == 33;


        aString = "";
        aChar = '\0';
        anInt = 0;
        mix = 'A';
        type mix 
            case String s { 
                aString = s; 
            }
            case Char ch  { aChar = ch; aString = "xy"; anInt = 44; }
            case Int n    { anInt = n; }
        assert aString == "xy" && aChar == 'A' && anInt == 44;

        aString = "";
        aChar = '\0';
        anInt = 0;
        mix = 12345;
        type mix 
            case String s { aString = s; }
            case Char ch  { aChar = ch; }
            case Int n    { anInt = n; aString = "abc"; aChar = 'w' }
        assert aString == "abc" && aChar == 'w' && anInt == 12345;

            
        var Person p = Person("Livia", 12);
        type p 
            case Worker w { 
                assert false;
            }
            case Person pp {
                assert true;
            }

        p = Worker;
        type p 
            case Worker w { 
                assert true;
            }
            case Person pp {
                assert false;
            }

    }
         

    func returnUnion5: bank.Bank|Client|String|Int|Char p1 
           -> String|Int|cyan.lang.Char|Bank|bank.Client {
           
        var Bank b = Bank("Banco do Brasil");
        var Client c = Client("Lívia");
        var String s = "Carol";
        var Int i = 5;
        var Char ch = 'a';

        var Int k = 99;
        type p1 
            case Bank bank { k = 0; b = bank }
            case Client client { k = 1; c = client }
            case String s1 { k = 2; s = s1 }
            case Int n { k = 3; i = n }
            case Char ch1 { k = 4; ch = ch1 }

        if k == 0 { return b }
        else if k == 1 { return c }
        else if k == 2 { return s }
        else if k == 3 { return i }
        else { return ch };
    }

    func returnNamedUnion: Union<wattHour, Float, calorie, Float, joule, Float> x 
        -> Union<wattHour, Float, calorie, Float, joule, Float> { 
        return x
    }


    func unionAssignTest {
        main.letters.UnionAssignTest() run
    }
    
    func taggedUnionTest {
        var chother = Union<ch, Char, other, String>();
        chother ch: 'a';
        chother other: "aaa";
        var  agename = 
            Union<age, Int, name, Union<ch, Char, other, String>>();
        agename age: 0;
        agename name: chother;
        type agename
            case Int age { assert false; }
            case Union<ch, Char, other, String> name {
                type name
                    case Char ch { assert false; }
                    case String other { assert true; }
            }
        
        //"Now Char|String" println;
        var p = Union<age, Int, name, Char|String>();
        p age: 0;
        p name: "p";
        p name: 'a';
        type p
            case Int age { assert false; }
            case Char|String name {
                type name
                    case Char ch { assert true; }
                    case String other { assert false; }
            }


    }
    
end
