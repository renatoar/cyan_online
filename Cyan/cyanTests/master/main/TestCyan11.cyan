package main

import context
import inter
import people
import shape
import initNewTests
import abstractPackage
import generic02.ga
import generic02.protoA
import myExceptions
import abstractPackage
import bank
import mult
import funct


object TestCyan11

    shared var String buffer
    shared let String one = "1";
    shared let  String two = "2";
    shared String three = "3";
    shared String four = "4";
    shared String five
    shared String six
    var IMap<Int, String> mapIntStr;
    shared var IMap<Int, String> sharedMapIntStr;
    let IMap<Int, String> letMapIntStr;
    shared let IMap<Int, String> sharedLetMapIntStr;

    
    private func initOnce {
       sharedInt = 0;
       five = "5";
       six = "6";
       buffer = "";
       sharedMapIntStr = [ 0 -> "zero" ]; 
       sharedLetMapIntStr = [ 0 -> "zero" ]; 
    }


    func run {
        InitTest run;
        javaInter.main.Program() run;
    
        @callTestMethods ;
    }



    let Int publicConst = 0;
    private let Int privateConst = 1;
    let Int protectedConst = 2;
    
    let Int zeroConst = 0;
    private let Int oneConst = 1;
    let Int twoConst = 2;
    
    var String name = "just a name";
    shared var Int sharedInt
    shared var Int n = 0;
    shared let Int sharedConstInt = -1;
    private shared let Int sharedConstIntPrivate = -2;
    
    func initConst: Int n -> Int = n;
    
    func init {
        mapIntStr = [ 0 -> "zero" ];
        letMapIntStr = [ 0 -> "zero" ]; 
    }

    func initOnceTest {
        buffer = one ++ two ++ three ++ four ++ five ++ six;    
        assert buffer == "123456";
    }
    
    
    func repeatTest {
        var Int i = 0;
        var Int j = 0;
        var sum = 0;
        var sumOut = 0;
        repeat
            j = 0;
            repeat
                sum = sum + j;
                ++j;
            until j >= 5;
            assert sum == 10;
            sum = 0;
            ++i;
            sumOut = sumOut + i;
        until i >= 5;
        assert sumOut == 15;
                
    }
    
    func literalMapTest {
    
        let repmap = [ "one" -> "um", "one" -> "UM", "one" -> "Um", "two" -> "dois", "one" -> "uM" ];
        assert repmap size == 2;
        type repmap["one"]
            case String s { 
                assert s == "uM";
            }
            case Nil {
                assert false;
            }
        type repmap["two"]
            case String s { 
                assert s == "dois";
            }
            case Nil {
                assert false;
            }
        
        let aMap = [ "1" -> 1, "5" -> 5, "9" -> 9 ];
        let Array<Tuple<key, String, value, Int>> ta = [ "1" -> 1, "5" -> 5, "9" -> 9 ] asArray;
        var sum = 0;
        for elem in ta {
            sum = sum + elem value;
        }
        assert sum == 15;
        // assert aMap["5"] == 5 && aMap["9"] == 9;
        cast five5 = aMap["5"] {
            assert five5 == 5;
        }
        else {
            assert false;
        }
        cast nine9 = aMap["9"] {
            assert nine9 == 9;
        }
        else {
            assert false;
        }
        

        let first = [ 0 -> "zero", 1 -> "um", 2 -> "dois" ];
        
        /* if (first get: 1) notNil {
            (first get: 1) println;
        } */
        // assert first get: 1  == "um";
        cast firstGet = first get: 1 {
            assert firstGet == "um";
        }
        else {
            assert false;
        }
        
        /*
        assert first size == 3 && 
           first[0] == "zero" &&
           first[1] == "um" && 
           first[2] == "dois";
        */
        cast first0 = first[0], first1 = first[1], first2 = first[2] {
            assert first0 == "zero" && first1 == "um" && first2 == "dois";
        }
        else {
            assert false;
        }
           
        assert first asArray size == 3;

        /*        
        Out println: "*" * 50;
        for elem in first {
            Out println: "key = " ++ elem key ++ " value = " ++ elem value;
        }
        Out println: "*" * 50;
        */
        let second = [ "zero" -> "zero", "one" -> "um", "two" -> "dois" ];
        /*
        for elem in second {
            Out println: "key = " ++ elem key ++ " value = " ++ elem value;
        }
        Out println: "*" * 50;
        */
        
    
        let IMap<Int, String> map = HashMap<Int, String>();
        
        map add: 0, "zero";
        map add: 1, "one";
        map add: 2, "two";
        
        var Dyn getMap = map get: 0;
        assert getMap == "zero";
        getMap = map get: 1;
        assert getMap == "one";
        getMap = map get: 2;
        assert getMap == "two";
        
        //assert [ "ten" -> 10, "five" -> 5, "fifteen" -> 15 ] get: "fifteen" == 15;
        cast num15 = [ "ten" -> 10, "five" -> 5, "fifteen" -> 15 ] get: "fifteen" {
            assert num15 == 15;
        }
        else {
            assert false;
        }
        // assert [ "ten" -> 10, "five" -> 5, "fifteen" -> 15 ] get: "ten" == 10;
        cast num10 = [ "ten" -> 10, "five" -> 5, "fifteen" -> 15 ] get: "ten" {
            assert num10 == 10;
        }
        else {
            assert false;
        }
        
        assert [ "ten" -> 10, "five" -> 5, "fifteen" -> 15 ] size == 3;

        return Nil
        
    }
    
    
    func stringTest {
    
        var String month = "mar";
        var Int year = 2014;
    
        n = 2;
    
        assert "publicConst = $publicConst" == "publicConst = 0";
        assert "privateConst = $privateConst" == "privateConst = 1";
        assert "protectedConst = $protectedConst" == "protectedConst = 2";
        assert "zeroConst = $zeroConst" == "zeroConst = 0";
        assert "oneConst = $oneConst" == "oneConst = 1";
        assert "twoConst = $twoConst" == "twoConst = 2";

        sharedInt = 1000;
        assert "name = $name" == "name = just a name";
        assert "sharedInt = $sharedInt" == "sharedInt = 1000";
        assert "self.n = $self.n" == "self.n = 2";
        assert "sharedConstInt = $sharedConstInt" == "sharedConstInt = -1";
        assert "sharedConstIntPrivate = $sharedConstIntPrivate" == "sharedConstIntPrivate = -2";
        
        var Dyn d = 0;
        let Nil nil = Nil;
        
        assert "d = $d nil = $nil" == "d = 0 nil = Nil";
        d = "\$d";
        assert "d = $d nil = $nil" == "d = \$d nil = Nil";
        d = false;
        assert "d = $d nil = $nil" == "d = false nil = Nil";
        assert "$month$year$month$year" == "mar2014mar2014";

        assert """d = $d 
                  nil = $nil""" 
           ==  """d = false 
                  nil = Nil""";
        d = "\$d";
        let String spp = """d = $d


                nil = $nil""";
        let spp2 = """d = \$d


                nil = Nil""";
        0 ..< spp size foreach: { (: Int jjj :) 
            if spp[jjj] != spp2[jjj] {
                let Char ch = spp[jjj];
                "spp != spp2 at character ch = $ch of spp, index jjj = $jjj" println;
            }
        };
        assert spp == spp2  ;
        d = false;
        assert 
          """$month
          $year
          $month
          $year""" == 
          """mar
          2014
          mar
          2014""";


        
        assert (daysMonth: month, year) == 31;
        assert (daysMonth: "apr", 2000) == 30;
        assert (daysMonth: "fev", 2012) == 29;
        assert (daysMonth: "fev", 2011) == 28;
        
        var Person carol = Person new: "Carolina", 4;
        carol name: "Carolina";
        assert (carol name) == "Carolina";
        
        var Person livia = Person new: "noname", -1;
        
        livia name: "Livia" age: 7;
        assert (livia name) == "Livia";
        assert (livia age) == 7;
        
        let regExpr2 = r"[a-z]+";
        let small = "abc";
        let big = "bc";
        let zero = "0";
        let strChar = "\0";
        cast shouldBeFalse = "false" asBoolean, 
               shouldBeTrue = "true" asBoolean {
            assert small < big && small <= big && big > small && big >= small &&
               big != small && ((small <=> big) == -1) && ((small <=> "a" ++ big) == 0) &&
               small ~= regExpr2 && (small size) == 3 && (big size == 2) &&
               (small asString == "abc") && (small in: [ "bc", "abc", "" ]) &&
               (String defaultValue == "") && (small last == 'c') &&
               (small[0] == 'a') && (small[1] == 'b') && (small[2] === 'c') &&
               !shouldBeFalse && shouldBeTrue ;
            cast Int zeroInt = zero asInt, Short zeroShort = zero asShort,
                 Char strChar0 = strChar asChar {
                assert zeroInt == 0;
                assert zeroShort == 0Short;
                assert strChar0 == '\0';
            }
        }
         
        
        
        let RegExpr re5 = RegExpr("0[a-z]+1[A-Z]*");
        var sre5 = "";
        [ "0a1CB", "a1CB", "0abdefe1F", "02", "Z", "0z1T" ] filter: re5 foreach: ConcatStr<String>(sre5, " ");
        assert sre5 == "0a1CB 0abdefe1F 0z1T ";
        //printexpr sre5;
        
        sre5 = "";
        [ "0a1CB", "a1CB", "0abdefe1F", "02", "Z", "0z1T" ] 
            filter: re5 |> r".*bd.*" foreach: ConcatStr<String>(sre5, " ");
        assert sre5 == "0abdefe1F ";
        //printexpr sre5;
        
        
        let stringArray = [ "one", "bc", "0", "\0", "abc", "zero" ];
        var String all = "";
        for elem in stringArray {
            all = all ++ elem
        }
        assert all == "onebc0\0abczero";
        all = "";
        for ch in "abc" {
            all = all ++ ch
        }
        assert all == small;
        
        assert ( "0" |> { (: String s1 :) ^s1 ++ "1" } |> { (: String s1 :) ^s1 ++ "2" } ) == "012";
        
        assert all[0] == 'a' && all[all size - 1] == 'c' &&
           "abc"[0] == 'a' && "abc"[2] == 'c' ;
        assert all last == 'c';
        
        var String multLineStr;

        multLineStr = |"""
         |first77\|
         | \|
         |\|second77
         |
               """;
        assert multLineStr == "first77|\r\n |\r\n|second77\r\n";

        multLineStr = |"""|first13
         
                          |second13""";
        assert multLineStr == "first13\r\nsecond13";

        multLineStr = |"""
            |first5
            |second5
            
               """;
        assert multLineStr == "first5\r\nsecond5";

        multLineStr = |"""   |first3
                             |second3
                   
                """;
        assert multLineStr == "first3\r\nsecond3";

        multLineStr = |"""
                   |first2
                   |second2
               """;
        assert multLineStr == "first2\r\nsecond2";

     
        multLineStr = |"""
         |first4
         |second4
               """;
        assert multLineStr == "first4\r\nsecond4";
     
        multLineStr = |"""
         |first12
         
         |second12
         
               """;
        assert multLineStr == "first12\r\nsecond12";
     

        multLineStr = |"""
         |first0
         |
         |second0
         |
               """;
        assert multLineStr == "first0\r\n\r\nsecond0\r\n";

        assert "abcde" - "de" == "abc";
        let String abcde = "abcde";
        let de = "de";
        assert abcde - de == "abc";
        assert "abcde" - "e" == "abcd";
        assert "abcde" - "" == "abcde";
        assert "" - "abcde" == "";
        assert "a" - "a" == "";
        assert "" - "" == "";
        assert "a" - """abcde""" == "a";
        assert """a
           b 
           c
           d
           e
           """ - """
           d
           e
           """ == """a
           b 
           c""";
    }


    func asTest {

        var String s = "true";
        cast elem = s asBoolean {
            assert elem;
        }
        else {
            assert false;
        }
        
        s = "false";
        cast elem = s asBoolean {
            assert !elem;
        }
        else {
            assert false;
        }

        s = "1";
        cast elem = s asBoolean {
            assert false;
        }
        else {
            assert true;
        }



        s = "100";
        cast elem = s asByte {
            assert elem == 100B;
        }
        else {
            assert false;
        }
        
        s = "0";
        cast elem = s asByte {
            assert elem == 0B;
        }
        else {
            assert false;
        }

        s = "aaaa";
        cast elem = s asByte {
            assert false;
        }
        else {
            assert true;
        }




        s = "A";
        cast elem = s asChar {
            assert elem == 'A';
        }
        else {
            assert false;
        }
        
        s = "w";
        cast elem = s asChar {
            assert elem == 'w';
        }
        else {
            assert false;
        }

        s = "1w";
        cast elem = s asChar {
            assert false;
        }
        else {
            assert true;
        }



        s = "12.5";
        cast elem = s asDouble {
            assert elem equal: 12.5;
        }
        else {
            assert false;
        }
        
        s = "-0.001";
        cast elem = s asDouble {
            assert elem equal: -0.001;
        }
        else {
            assert false;
        }

        s = "5. 0";
        cast elem = s asDouble {
            assert false;
        }
        else {
            assert true;
        }



        s = "10.75";
        cast elem = s asFloat {
            assert elem equal: 10.75F;
        }
        else {
            assert false;
        }
        
        s = "-0.77";
        cast elem = s asFloat {
            assert elem equal: -0.77F;
        }
        else {
            assert false;
        }

        s = "5.7a";
        cast elem = s asFloat {
            assert false;
        }
        else {
            assert true;
        }



        s = "12345";
        cast elem = s asInt {
            assert elem == 12345;
        }
        else {
            assert false;
        }
        
        s = "-54321";
        cast elem = s asInt {
            assert elem == -54321;
        }
        else {
            assert false;
        }

        s = "1.0";
        cast elem = s asInt {
            assert false;
        }
        else {
            assert true;
        }



        s = "987654321";
        cast elem = s asLong {
            assert elem == 987654321L;
        }
        else {
            assert false;
        }
        
        s = "-123456789";
        cast elem = s asLong {
            assert elem == -123456789L;
        }
        else {
            assert false;
        }

        s = "11111111111111111111111111111111111";
        cast elem = s asLong {
            assert false;
        }
        else {
            assert true;
        }



        s = "4321";
        cast elem = s asShort {
            assert elem == 4321S;
        }
        else {
            assert false;
        }
        
        s = "-1234";
        cast elem = s asShort {
            assert elem == -1234S;
        }
        else {
            assert false;
        }

        s = "11111111111111111111111111111111111";
        cast elem = s asShort {
            assert false;
        }
        else {
            assert true;
        }


    
    }



    
    func symbolTest {
    
        var String s;
        s = #at:put:;
        assert s == "at:put:" && s == """at:put:""";
        var String cs, cs0;
        cs = #at:put:;
        cs0 = #at:put:;
        assert cs == "at:put:";
        assert cs == """at:put:""";
        assert cs == s;
        assert s == cs;
        assert s eq: cs;
        assert cs eq: s;
        assert cs eq: #at:put:;
        assert #at:put: eq: cs;
        assert #at:put: eq: "at:put:";
        assert cs eq: cs0;
        assert cs0 == "at:put:";
        assert cs0 eq: #at:put:;
        assert #at:put: eq: cs0;
        
        cs = "Hello world";
        cs0 = #Hello ++ " world";
        s = "Hello " ++ #world;
        assert cs == "Hello world";
        assert cs == s;
        assert cs0 == cs;
        assert cs eq: cs0;
        
        cs  = #01:symbol_9:;
        cs0 = #01:symbol_9:;
        s =   "01:symbol_9:";
        assert cs == cs0 && cs eq: cs0 && cs0 eq: cs && cs == s &&
           s == cs0;

        var elem = #abc;
        assert elem[0] == 'a' && elem[elem size - 1] == 'c' &&
           #abc[0] == 'a' && #abc[2] == 'c' &&
           "abc"[0] == 'a' && "abc"[2] == 'c';
           
        s = "";
        for e in #abc {
           s = s ++ e
        }
        assert s == "abc";
        

    }
    
    
    func daysMonth: (String month, Int year) -> Int {
        if month in: [ "jan", "mar", "may", "jul", "aug", "oct", "dec" ] {
            return 31;
        }
        else if month in: [ "apr", "jun", "sep", "nov" ] {
            return 30
        }
        else if month == "fev" {
            // printexpr ((leapYear: year) t: 29 f: 28);
            if leapYear: year {
                return 29;
            }
            else {
                return 28
            }
            //return Int cast: ((leapYear: year) t: 29 f: 28);
        }
        else {
            return -1
        }
    }
    
    func leapYear: (Int year) -> Boolean = ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0));
    
        
    func intervalTest {
        var Char ch;
        ch = 'b';
        ( ch between: 'a'..'z' ) ifTrue: {
           }
           ifFalse: { 
               assert false;
           };
        var age = 0;
        
        if age in: 0..2 {  
            assert true;
        }
        else if age in: 3..12 {
            assert false;
        }
        else if age in: 13..19 {
            assert false;
        }
        else {
            assert false;
        }

        age = 5;
        if age in: 0..2 { 
            assert false;
        }
        else if age in: 3..12 {
            assert true;
        }
        else if age in: 13..19 {
            assert false;
        }
        else {
            assert false;
        };

        age = 15;
        if age in: 0..2 { 
            assert false;
        }
        else if age in: 3..12 {
            assert false;
        }
        else if age in: 13..19 {
            assert true;
        }
        else {
            assert false;
        };
    
        age = 25;

        if age in: 0..2 { 
            assert false;
        }
        else if age in: 3..12 {
            assert false;
        }
        else if age in: 13..19 {
            assert false;
        }
        else {
            assert true;
        };
        
    }
    
    
    private func returnNil { } 
    
    func bookName: String firstPart -> String = firstPart ++ " Naturalis Principia Mathematica";
    func authorList: String firstPart -> String = firstPart ++ " Newton";
    func publisher: String firstPart -> String = firstPart ++ " Society";
    func year -> Int = 1687;
    
    func tupleTest {
    
        var t66 = [. name = "Livia", age = 4, hairColor = "Blond" .];
        assert ("name: " ++ t66 name ++ " age: " ++ t66 age ++ " hair color: " ++ t66 hairColor)
           == "name: Livia age: 4 hair color: Blond";

    
        testTuple0;

        var book = [. name =  "Philosophiae Naturalis Principia Mathematica",
                      authorList = [ "Isaac Newton" ],
                      publisher = "Royal Society",
                      year = 1687
                   .];
        var book2 = [. (bookName: "Philosophiae"),
                      (authorList: "Isaac"),
                      (publisher: "Royal"),
                      year
                   .];
        assert (book name) == (book2 f1);
        assert (book authorList)[0] == (book2 f2);        
        assert (book publisher) == (book2 f3);
        assert (book year) == (book2 f4);
    


        var tupleArray = [ [. "string", 'C', 0, [ 5 ] .], 
                            [. "other",  'A', 1, [ 7, 9 ] .] ];

        assert (tupleArray[0] f1) == "string";
        assert (tupleArray[0] f2) == 'C';
        assert tupleArray[0] f3 == 0;
        assert tupleArray[0] f4 == [ 5 ];
        assert (tupleArray[0] f4)[0] == 5;
        assert tupleArray[1] f1 == "other";
        assert tupleArray[1] f2 == 'A';
        assert tupleArray[1] f3 == 1;
        assert tupleArray[1] f4 == [ 7, 9 ];
        assert (tupleArray[1] f4)[0] == 7;
        assert (tupleArray[1] f4)[1] == 9;
        assert tupleArray[1] == [. "other",  'A', 1, [ 7, 9 ] .];    


        var myTuple = [. one = [ 5, 6, 7 ], two = "an array", 
             three = 3, 
             four = [ "zero", "one", "two" ], 
             five = [. g1 = "zero", g2 = 0, g3 = 0.01 .]
             .];

        assert (myTuple one) == [ 5, 6, 7 ] &&
               (myTuple one)[0] == 5 &&
               (myTuple one)[1] == 6 &&
               (myTuple one)[2] == 7 &&
               (myTuple two) == "an array" &&
               (myTuple two)[0] == 'a' &&
               (myTuple two)[2] == ' ' &&
               (myTuple three) == 3 &&
               (myTuple four) == [ "zero", "one", "two" ] &&
               (myTuple four)[0] == "zero" &&
               (myTuple four)[1] == "one" &&
               (myTuple five) == [. g1 = "ze" ++ "ro", g2 = 1-1, g3 = 0.01 .] &&
               ((myTuple five) g1) == "zero" &&
               ((myTuple five) g1)[0] == 'z' &&
               ((myTuple five) g2) == 0 &&
               ((myTuple five) g3) == 0.01 
            ;
        
        var t1 = Tuple<Int> new: 0;
        var tf1 = Tuple<name, String> new: "Livia";
        var Tuple<String, Int> t2 = Tuple<String, Int> new: "Carolina", 4;
        var tf2 = Tuple<name, String, age, Int> new: "Carolina", 4;
        
        assert (t1 f1) == 0 && (tf1 name) == "Livia" && (t2 f1) == "Carolina" &&
           (t2 f2) == 4;
        assert (tf2 name) == "Carolina" && (tf2 age) == 4;

    
        
        
        var Int x = 0;
        var Int y = 1;
        var Char a = 'A';
        var Char b = 'B';
        var t10 = [. name = a, age = x, other = y .];
        var t11 = [. a, b, x, y .];
        var t12 = [. a = b, x = y .];
        var t13 = [. a = 2Double, x = 2F .];
        
        assert (t10 name) == 'A' &&
               (t10 age) == 0 &&
               (t10 age) == x &&
               (t10 other) == 1;
        t10 name: 'B';
        t10 age: 1;
        t10 other: 2;
        assert (t10 name) == 'B' &&
               (t10 age) == 1 &&
               (t10 other) == 2;

        assert (t11 f1) == 'A' && (t11 f2) == 'B' && (t11 f3) == 0 && (t11 f4) == 1;

        t11 f1: 'C';
        t11 f2: 'E';
        t11 f3: 1;
        t11 f4: 2;
        assert (t11 f1) == 'C' && (t11 f2) == 'E' && (t11 f3) == 1 && (t11 f4) == 2;

        assert (t12 a) == b && (t12 x) == 1;
        assert (t13 a) == 2D && (t13 x) == 2Float;
    }
    
    
    func testTuple0 {
        var Tuple<cyan.lang.Int, Char> t1;
        var Tuple<Int, cyan.lang.Char> t2;
        var Tuple<f1, cyan.lang.Int, f2, Char> t3;
        var Tuple<f1, Int, f2, cyan.lang.Char> t4;
        
        t2 = [. 0, 'a' .];
        t1 = t2;
        assert t1 eq: t2;
        assert (t1 f1) == 0;
        assert (t2 f2) == 'a';
        t2 = t1;
        t4 = [. f1 = -10, f2 = '\0' .];
        t3 = t4;
        assert (t3 f1) == -10;
        assert (t3 f2) == '\0';
        t4 = t3;
        t1 = [. 0, '1' .];
        t2 = [. 0, '1' .];
        assert (t1 f1) == (t2 f1);
        assert (t1 f2) == (t2 f2);
        assert (t1 f2) == '1' && (t2 f2) == '1';
        var t00 = [. "Livia", 4, "Blond" .];    
        let t111 = t00 clone;
        var ttt = Tuple<name, String, age, Int> name: "Carolina" age: 1;
        
        assert (ttt name) == "Carolina" && (ttt age) == 1;
        
        assert (t111 f1) == "Livia" && (t111 f2) == 4 && (t111 f3) == "Blond";
        assert (returnTuple0 name) == "Livia" &&
               (returnTuple0 age) == 9;
        assert (returnTuple1 f1) == "Carolina" &&
               (returnTuple1 f2) == 6;
        assert (returnTuple2: [. name = "Livia", age = 9 .]) name == "Livia NG" &&
               (returnTuple2: [. name = "Livia", age = 9 .]) age == 10 &&
               (returnTuple3: [. "Carolina", 6 .]) f1 == "Carolina NG" &&
               (returnTuple3: [. "Carolina", 6 .]) f2 == 7;
               
    }
    
    func returnTuple0 -> Tuple<name, String, age, Int> = [. name = "Livia", age = 9 .];
    
    func returnTuple1 -> Tuple<String, Int> = [. "Carolina", 6 .];
    
    func returnTuple2: Tuple<name, String, age, Int> elem -> Tuple<name, String, age, Int> {
        elem name: (elem name) ++ " NG";
        elem age: (elem age) + 1;
        return elem
    }
    
    func returnTuple3: Tuple<String, Int> elem -> Tuple<String, Int> {
        elem f1: (elem f1) ++ " NG";
        elem f2: (elem f2) + 1;
        return elem
    }


    func accessSharedVariableTest {
        generic01.AccessSharedVariable<Int> run;
        generic01.AccessSharedVariable<String> run;
    }
    
end
