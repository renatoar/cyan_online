package main


object ReachabilityAssignmentTesting

    func typeCaseTest {
        var Int|Nil inil = 9;
        var Int n;
        var Int|Char|String|Double mix;

        type inil
            case Int nn { n = nn; mix = 'a' }
            case Nil nil { n = 0; mix = 3.14 
            }
        n = n + 1;
        
        
        var Int t0;
        type mix
            case Double d { t0 = 0 }
            case Int ii { t0 = 1 }
            case String ss { t0 = 2 }
            case Char cc { t0 = 5 }
        t0 = t0 + 1;
    
    }

    func nonExhaustiveTest {
        assert nonExhaustive: 0 == 2;
        assert nonExhaustive: 1.0F == 0;
        assert nonExhaustive: "" == 1;
        assert nonExhaustive: 5 == 2;
        assert nonExhaustive: 0.0 == 3;
        assert nonExhaustive: Program == 3;
        assert unionNonExhaustive: 0 == 100;
        assert unionNonExhaustive: 'a' == 3;
        assert unionNonExhaustive: "0" == 2;

        assert unionNonExhaustive2: 0 == 100;
        assert unionNonExhaustive2: 'a' == 3;
        assert unionNonExhaustive2: "0" == 2;

        assert unionNonExhaustive3: 0 == 100;
        assert unionNonExhaustive3: 'a' == 3;
        assert unionNonExhaustive3: "0" == 2;

        var Union<f1, Int, f2, Char, f3, String> u =
            Union<f1, Int, f2, Char, f3, String> f1: 0;
        assert unionNonExhaustive4: u == 100;
        u = Union<f1, Int, f2, Char, f3, String> f2: 'a';
        assert unionNonExhaustive4: u == 3;
        u = Union<f1, Int, f2, Char, f3, String> f3: "a";
        assert unionNonExhaustive4: u == 2;

        assert unionNonExhaustiveNonError: 0 == 100;
        assert unionNonExhaustiveNonError: 'a' == 3;
        assert unionNonExhaustiveNonError: "0" == 2;

        assert unionNonExhaustiveNonError2: 0 == 100;
        assert unionNonExhaustiveNonError2: 'a' == 3;
        assert unionNonExhaustiveNonError2: "0" == 2;
        assert unionNonExhaustiveNonError2: 0.0 == 5;

        assert unionNonExhaustiveNonError3: 0 == 100;
        assert unionNonExhaustiveNonError3: 'a' == 3;
        assert unionNonExhaustiveNonError3: "0" == 2;
        assert unionNonExhaustiveNonError3: 0.0 == 5;

        assert ifReturn: 0 == 0;
        assert ifReturn: 1 == 1;
        assert ifReturn: 2 == 2;
        assert ifReturn: 9 == 5;

        assert ifReturn2: 0 == 0;
        assert ifReturn2: 1 == 1;
        assert ifReturn2: 2 == 2;
        assert ifReturn2: 9 == 5;

        assert ifReturn3: 0 == 0;
        assert ifReturn3: 1 == 1;
        assert ifReturn3: 2 == 2;
        assert ifReturn3: 9 == 5;

        assert ifReturn4: 0 == 0;
        assert ifReturn4: 1 == 1;
        assert ifReturn4: 2 == 2;
        assert ifReturn4: 9 == 5;

        assert castReturn: 1 == 1;
        assert castReturn: 2 == 2;
        assert castReturn: Nil == 0;
        
        assert castReturn2: 1 == 1;
        assert castReturn2: 2 == 2;
        assert castReturn2: Nil == 0;
        
        assert castReturn3: 1 == 1;
        assert castReturn3: 2 == 2;
        assert castReturn3: Nil == 0;
        
        assert castReturn4: 1 == 1;
        assert castReturn4: 2 == 2;
        assert castReturn4: Nil == 0;
        
    
        

        // "nonExhaustiveTest" println;

        
    }
    
    func nonExhaustive: Dyn d -> Int {
        var Int k;
        type d 
            case Float f { 
                k = 0;
                return 0
            }
            case String s {
                k = 1;
                return 1
            }
            case Int n {
                k = 2;
                return 2
            }
            else {
                k = 0;
            }
        return 3 + k
    }
    
    func unionNonExhaustive: Int|Char|String mix -> Int {
        var Int k;
        type mix
            case Int ii { k = 0; return ii + 100 }
            case String ss { k = 1; return 2 }
            case Char cc { k = 2; return 3 }
    }

    func unionNonExhaustive2: Int|Char|String mix -> Int {
        var Int k;
        type mix
            case Int ii { k = 0; return ii + 100 }
            case String ss { k = 1; return 2 }
            else { k = 2; return 3 }
    }


    func unionNonExhaustive3: Int|Char|String mix -> Int {
        var Int k;
        type mix
            case Int ii { k = 0; return ii + 100 }
            case String ss { return 2 }
            else {
                k = 0
            }
        return k + 3
    }



    func unionNonExhaustive4: Union<f1, Int, f2, Char, f3, String> mix -> Int {
        var Int k;
        type mix
            case Int f1 { k = 0; return f1 + 100 }
            case Char f2 { k = 1; return 3 }
            case String f3 { return 2 }
        //return 3 
    }

    func unionNonExhaustive5: Union<f1, Int, f2, Char, f3, String> mix  {
        var Int k;
        while false {
            type mix
                case Int f1 { break }
                case Char f2 { k = 1 }
                case String f3 { k = 2 }
            k = k + 1
        }
    }


    func unionNonExhaustive6: Union<f1, Int, f2, Char, f3, String> mix  {
        var Int k;
        for elem in [ 0, 1, 2 ] {
            type mix
                case Int f1 { break }
                case Char f2 { k = 1 }
                case String f3 { k = 2 }
            k = k + 1
        }
    }




    func unionNonExhaustiveNonError: Int|Char|String mix -> Int {
        var Int k;
        type mix
            case Int ii { return ii + 100 }
            case String ss { k = 1;  }
            case Char cc { return 3 }
        k = k + 1;
        return k;
    }

    func unionNonExhaustiveNonError2: Dyn mix -> Int {
        var Int k;
        type mix
            case Int ii { return ii + 100 }
            case String ss { return 2  }
            case Char cc { return 3 }
            else {
                k = 5
            }
        return k;
    }

    func unionNonExhaustiveNonError3: Dyn mix -> Int {
        var Int k;
        type mix
            case Int ii { return ii + 100 }
            case String ss { k = 2  }
            case Char cc { return 3 }
            else {
                return 5
            }
        return k;
    }

    func ifReturn: Int n -> Int {
        var Int k;
        if n == 0 {
            return 0; 
        }
        else if n == 1 {
            k = 1;
        }
        else if n == 2 {
            return 2
        }
        else {
            k = 5
        }
        return k
    }


    func ifReturn2: Int n -> Int {
        var Int k;
        if n == 0 {
            k = 0; 
        }
        else if n == 1 {
            k = 1;
        }
        else if n == 2 {
            return 2
        }
        else {
            return 5
        }
        return k
    }


    func ifReturn3: Int n -> Int {
        var Int k;
        if n == 0 {
            k = 0; 
        }
        else if n == 1 {
            k = 1;
        }
        else if n == 2 {
            k = 2
        }
        else {
            return 5
        }
        return k
    }

    func ifReturn4: Int n -> Int {
        var Int k;
        if n == 0 {
            return 0; 
        }
        else if n == 1 {
            k = 1;
        }
        else if n == 2 {
            return 2
        }
        else {
            k = 5
        }
        return k
    }


    func castReturn: Int|Nil intNil -> Int {
        var Int n;
        cast value = intNil {
            if value > 0 { n = value }
            repeat
                n = value
            until true
        }
        else {
            return 0
        }
        var k = n;
        return k
    }

    func castReturn2: Int|Nil intNil -> Int {
        var Int n;
        cast value = intNil {
            n = value
        }
        else {
            return 0;
        }
        var k = n;
        return k
    }


    func castReturn3: Int|Nil intNil -> Int {
        var Int n;
        cast value = intNil {
            return value
        }
        else {
            n = 0;
        }
        var k = n;
        return k
    }


    func castReturn4: Nil|Int intNil -> Int {
        var Int n;
        cast value = intNil {
            if 1 < 0 { n = value }
            else { 
                n = value
            }
        }
        else {
            n = 0;
        }
        return n
    }


    func castReturn5: Nil|Int intNil {
        var Int n;
        while false {
            cast value = intNil {
                if 1 < 0 { n = value }
                else { 
                    break
                }
            }
            else {
                n = 0;
            }
            n = n + 1
        }
    }


    func castReturn6: Nil|Int intNil {
        var Int n;
        while false {
            cast value = intNil {
                if 1 < 0 { n = value }
                else { 
                    n = 0
                }
            }
            else {
                break
            }
            n = n + 1
        }
    }

    func castReturn7: Nil|Int intNil {
        var Int n;
        for elem in [ 0, 1 ] {
            cast value = intNil {
                if 1 < 0 { n = value }
                else { 
                    n = 0
                }
            }
            else {
                break
            }
            n = n + 1
        }
    }

    func castReturn8: Nil|Int intNil {
        var Int n;
        for elem in [ 0, 1 ] {
            cast value = intNil {
                if 1 < 0 { break }
                else { 
                    n = 0
                }
            }
            else {
                n = 0
            }
            n = n + 1
        }
    }



    func castTest {
        var Int|Nil inil = 9;
        var Int n;
        
        cast value = inil {
            n = 0;
        }
        else {
            n = 1
        }
        var k = n;
    }




    func forTest {
        var Int n = 0;
        //var Int elem;
        for elem in [ 0, 1, 2 ] {
            n = elem;
            var s = elem prototypeName;
        }
        n = n + 1;
        //elem println;
    }


    func repeatTest {
        var Int n;
        repeat
            if 0 < 1 {
                n = 0;
            }
            else if 0 < 1 {
                if 0 < 1 { 
                    n = 1 
                } 
                else { 
                    n = 4 
                }
            }
            else {
                if 0 < 1 { 
                    n = 0 
                }
                else {
                    n = 1
                }
            }
        until 1 > 0;
        n = n + 1;
    }



    func whileTest {
        var Int n;
        n = 0;
        while 1 < 0 {
            if 0 < 1 {
                n = 0;
            }
            else if 0 < 1 {
                if 0 < 1 { 
                    n = 1 
                } 
                else { 
                    n = 4 
                }
            }
            else {
                if 0 < 1 { 
                    n = 0 
                }
                else {
                    n = 1
                }
            }
        }
        while 1 < 0 {
            n = 0;
        }
        n = n + 1
    }
    
    func run {
        var Int n;
        
        //n = 9;
        if 0 > 1 {
            let Int k = 0;
            if 0 < 1 {
                if 0 < 1 {
                    n = 0;
                }
                else {
                    n = k + 1;
                }
            }
            else if 0 < 1 {
                n = 0
            }
            else {
                if 0 < 1 {
                    n = 0;
                }
                else {
                    n = 1;
                }
            }
            //n = 7;
        }
        else {
            //n = 5;
            if 0 < 1 {
                n = 0;
            }
            else {
                n = 0
            }
        }
        
        n = n + 1;
        @callTestMethods;
        
    }
    
    /*

    func testBreakRepeat1 {
        var Int k;
        var Int n;
        /*  list list with break case: transfer to previous previous lexical level
            list list withOUT break case: transfer to previous lexical level
        */
        repeat
            if 1 < 0 {
                n = 0;
                break
            }
            else {
                n = 1;
                k = 0;
            }
            n = n + 1;
            k = k + 1
        until 0 == 0;
        n println;
        k = k + 1; // error
        k println;
            
    }
    
    
    func testBreakRepeat0 {
    
        var k = 0;
        var Int k2;
        repeat
            repeat
                repeat 
                    if 0 < 1 {
                        if 0 < 1 {
                            break;
                        }
                        else {
                            k2 = 1
                        }
                    }
                    else if 1 < 1 {
                    }
                    else {
                        k2 = 0;
                    }
                    k2 println;
                    ++k;
                until k >= 10;
                k2 println;
                ++k
            until k >= 10;
            k2 println;
        until k >= 10;
        k2 println;
    }
    

    func testBreakRepeat2 {
        var Int k;
        
        repeat
            if 1 < 0 {
                repeat
                    if 1 < 0 {
                        break
                    }
                    else {
                        k = 0
                    }
                until 0 == 0
            }
            else {
                k = 0;
            }
        until 0 == 0;
        k = k + 1; // error
        k println;
            
    }

    func testBreakRepeat3 {
        var Int k;
        
        repeat
            if 1 < 0 {
                k = 0;
                break;
            }
            else {
                k = 1;
            }
            k println;
        until 0 == 0;
        k = k + 1; // error
        k println;
            
    }

    func testBreakRepeat4 {
        var Int k;
        var Int n;
        
        if 1 < 0 {
            repeat
                if true {
                    k = 0;
                    break;
                }
                else {
                    k = 0
                }
                k println;
            until 1 < 0
        }
        else if 1 < 0 {
            if true {
                k = 2
            }
            else if true {
                repeat
                    if true {
                        break;
                    }
                    else {
                        k = 0
                    }
                    k println;
                until 1 < 0
            }
            else {
                repeat
                    if true {
                        k = 0;
                        break;
                    }
                    else {
                        repeat
                            if true {
                                k = 3;
                                break;
                            }
                            else {
                                k = 0
                            }
                            k println;
                        until 1 < 0
                    }
                until 1 < 0
            }
        }
        else {
            repeat
                k = 0;
                if true {
                    break;
                }
                else {
                    k = 0
                }
            until true
        }
        k println;
            
    }


    func testBreakRepeat5 {
        var Int k;
        var Int n;
        
        repeat
            if 1 < 0 {
                k = 0;
                break;
            }
            else {
                k = 1;
                n = 0
            }
            k println;
            n println;
        until 0 == 0;
        k = k + 1; 
        k println;
        n println; // error
            
    }

  */
    func testWhile {
        var k = 0;
        while k < 10 {
            var Int k2;
            if 0 < 1 {
                break;
            }
            else {
                k2 = 0;
            }
            k2 println;
            var Int jjj;
            if 0 < 1 {
                jjj = 0;
            }
            else if 0 < 1 {
                if 0 < 1 {
                    break;
                }
                else {
                    jjj = 1;
                }
            }
            else {
                jjj = 2;
            }
            jjj println;
            
            ++k;
        }

    }
    
end
