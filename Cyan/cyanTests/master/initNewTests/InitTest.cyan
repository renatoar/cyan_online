package initNewTests

import people

object InitTest

    let Int which
    func getWhich -> Int = which;

    func init {
        which = 0;
    }
    
    func init: InitTest1 one {
        which = 1
    }

    /*
    func init: InitTest2 one {
        which = 2
    }
    */

    func init: InitTest3 one {
        which = 3
    }

    func init: Int one {
        which = 4
    }

    func init: String one {
        which = 5
    }

    func init: ProtoA {
        which = 6
    }
    
    /*
    func init: ProtoB {
        which = 7
    }

    func init: ProtoC {
        which = 8
    }
    */
    
    func init: ProtoA, ProtoB {
        which = 11
    }
    
    /*
    func init: ProtoB, ProtoA {
        which = 12
    }
    
    
    
    func init: ProtoB, ProtoC {
        which = 13
    }
    
    
    func init: ProtoA, Int, ProtoC { which = 1111 } 
    func init: ProtoA, Int, ProtoB { which = 1111 } 
    */


    func run  {
    
        OtherInitTest() run;
        InitArrayMapTest() run;
        prototypesAsObjectsTest;
    
        let ProtoA pa = ProtoA();
        let ProtoA pb = ProtoB();
        let ProtoA pc = ProtoC();
        
        /*
        printexpr InitTest(ProtoA) getWhich;
        printexpr InitTest(ProtoB) getWhich;
        printexpr InitTest(ProtoC) getWhich;
        printexpr InitTest(ProtoD) getWhich;
        printexpr InitTest(pa) getWhich;
        printexpr InitTest(pb) getWhich;
        printexpr InitTest(pc) getWhich;

        //printexpr InitTest(ProtoA, ProtoA) getWhich;
        printexpr InitTest(ProtoC, ProtoB) getWhich;
        //printexpr InitTest(ProtoB, ProtoC) getWhich;
        printexpr InitTest(ProtoD, ProtoA) getWhich;
        printexpr InitTest(ProtoA, ProtoD) getWhich; 
        printexpr InitTest(ProtoB, ProtoD) getWhich;
        */

        
        assert InitTest(ProtoA, ProtoB) getWhich == 11;
        assert InitTest(ProtoB, ProtoB) getWhich == 11;
        assert InitTest(ProtoC, ProtoB) getWhich == 11;
        assert InitTest(ProtoC, ProtoC) getWhich == 11;
        assert InitTest(ProtoB, ProtoC) getWhich == 11;
        assert InitTest(ProtoD, ProtoC) getWhich == 11;
        assert InitTest(ProtoD, ProtoB) getWhich == 11;
        
        
        assert InitTest(ProtoA, ProtoD) getWhich == 11; 
        assert InitTest(ProtoB, ProtoD) getWhich == 11;


        assert InitTest(ProtoA) getWhich == 6;
        assert InitTest(ProtoB) getWhich == 6;
        assert InitTest(ProtoC) getWhich == 6;
        assert InitTest(ProtoD) getWhich == 6;
        assert InitTest(pa) getWhich == 6;
        assert InitTest(pb) getWhich == 6;
        assert InitTest(pc) getWhich == 6;


    
        assert InitTest(InitTest1) getWhich == 1;
        assert (InitTest new: InitTest1) getWhich == 1;
        assert InitTest(InitTest2) getWhich == 1;
        assert (InitTest new: InitTest2) getWhich == 1;
        assert InitTest(InitTest3) getWhich == 3;
        assert (InitTest new: InitTest3) getWhich == 3;
        assert InitTest(0) getWhich == 4;
        assert (InitTest new: 0) getWhich == 4;
        assert InitTest("") getWhich == 5;
        assert (InitTest new: "") getWhich == 5;
        assert InitTest(InitTest4) getWhich == 1;
        assert (InitTest new: InitTest4) getWhich == 1;




        /*
        printexpr InitTest(InitTest4) getWhich;
        printexpr (InitTest new: InitTest4) getWhich;
        (InitTest new: InitTest1) getWhich println;
        InitTest(InitTest1) getWhich println;
        (InitTest new: InitTest2) getWhich println;
        InitTest(InitTest2) getWhich println;
        (InitTest new: InitTest3) getWhich println;
        InitTest(InitTest3) getWhich println;
        (InitTest new: 0) getWhich println;
        InitTest(0) getWhich println;
        (InitTest new: "") getWhich println;
        InitTest("") getWhich println;
        */
        
        assert InitTest0 new run0;
        
        assert InitTest1 new all == "0bc";
        assert (InitTest1 new: 9, "z") all == "9zc";
        assert (InitTest1 new: "z") all == "0zc";
        assert (InitTest1 new: 9) all == "9bc";
        

        assert InitTest2 new all == "0bc12f";
        assert (InitTest2 new: 0, "1", 2S, 3L) all == "01c23f";
        assert (InitTest2 new: 0) all == "0bc12f";
        assert (InitTest2 new: 0, 3L) all == "0bc13f";
        assert (InitTest2 new: 5S, 7L) all == "0bc57f";
        assert (InitTest2 new: 0, "1", 2S, 3L, "g") all == "01c23g";

        assert InitTest3 new all == "0001";
        assert (InitTest3 new: 5 ) all == "0005";

        /*
        printexpr InitTest1 new all;
        printexpr (InitTest1 new: 9, "z") all;
        printexpr (InitTest1 new: "z") all;
        printexpr (InitTest1 new: 9) all;
        

        printexpr InitTest2 new all;
        printexpr (InitTest2 new: 0, "1", 2S, 3L) all;
        printexpr (InitTest2 new: 0) all;
        printexpr (InitTest2 new: 0, 3L) all;
        printexpr (InitTest2 new: 5S, 7L) all;
        printexpr (InitTest2 new: 0, "1", 2S, 3L, "g") all;

        printexpr InitTest3 new all;
        printexpr (InitTest3 new: 5 ) all;
        */
    
    }


    func prototypesAsObjectsTest {
    
            // ok!
        var protoName = Person prototypeName;
        assert protoName == "Person";
        var Any any = 0;
        if any isA: Person {
            assert false; // "0 is a Person";
        }
        assert Person prototypeParent prototypeName == "Any";
        assert Person prototypePackageName == "people";
        assert Person isInterface == false;
        assert Person featureList size >= 0;
        assert (Person featureList: "name") size >= 0;
        assert Person slotFeatureList size >= 0;
        assert Person annotList size >= 0;
        {
            Person throw: ExceptionStr("this is ok")
        }
        catch: CatchAll;        
        
        assert IName prototypeName == "IName";
        var iname = IName;
        assert iname prototypeName == "IName";
        
        
        var interName = IName prototypeName;
        var Any iany = 0;
        if iany isA: IName {
            assert false; // "0 is a IName";
        }
        assert IName prototypeParent == Any;
        assert IName prototypePackageName == "people";
        assert IName isInterface;
        assert IName featureList size >= 0;
        assert (IName featureList: "name") size >= 0;
        assert IName slotFeatureList size >= 0;
        assert IName annotList size >= 0;
        assert (IName annotList: "name") size >= 0;
        {
            IName throw: ExceptionStr("this is ok")
        }
        catch: CatchAll;
                
        /*        
        
        // should issue errors for each line below
        var Any anyPerson = Person;
        ("person is " ++ Person) println;

        var Any otherPerson = Person("", 0);
        assert Person == otherPerson;
        assert otherPerson == Person;
        assert otherPerson == Program;
        assert Program == otherPerson;
        assert (Any toAny: Person) == Person;
        (Person functionForMethod: "getName") eval println;
        //printexpr person;
        
        */
        
    }


    
end

