package grammar


object GrammarTest

    /*
    @grammarMethod{*
        (add: Int)
    *}
    func m00: Int t -> Int { return t }
    */

    /*
    @grammarMethod{*
        (add: Int, String)
    *}
    func m0: Tuple<Int, String> t -> String { 
        return t f1 ++ t f2;
    }
    */
    
    /* @grammarMethod{*
        (add: (Int)*)
    *}
    func m1: Array<Int> t -> Int { 
        var s = 0;
        t foreach: Sum<Int>(s);
        return s;
    } */

    @grammarMethod{*
        (addInt: (Int)+)
    *}
    func m2: Array<Int> t -> Int { 
        var s = 0;
        t foreach: Sum<Int>(s);
        return s;
    }

    @grammarMethod{*
        ((add: Int)+)
    *}
    func m3: Array<Int> t -> Int { 
        var s = 0;
        t foreach: Sum<Int>(s);
        return s;
    }

    /*@grammarMethod{*
        (add: Int | String )
    *}
    func m4: Int | String t -> String { 
        type t
            case Int n {
                return n asString
            }
            case String s {
                return s
            }
    }*/

    @grammarMethod{*
        (add: (Int | String)+ toStr:)
    *}
    func m5:  Tuple<Array<Int|String>, Any> t -> String { 
        var s = "";
        for elem in t f1 {
            type elem
                case Int n {
                    s = s ++ n asString
                }
                case String str {
                    s = s ++ str
                }
        }
        return s
    
    }  

    @grammarMethod{*
        (addu: Int | addu: String)
    *}
    func m6: Union<f1, Int, f2, String> t -> String { 
        type t
            case Int f1 {
                return f1 asString
            }
            case String f2 {
                return f2
            }
    }

    @grammarMethod{*
        (key: Int value: Long)
    *}
    func m7: Tuple<Int, Long> t -> Long { 
        return t f1 asLong + t f2;
    }

    @grammarMethod{*
        (nameList: (String)* (size: Int)?)
    *}
    func m8: Tuple<Array<String>, Union<some, Int, none, Any>> t 
         -> String { 
        var s = "";
        for elem in t f1 { s = s ++ elem }
        type t f2
            case Int some { s = s ++ some }
            case Any none { s = s ++ "none" }
        return s
    }

    @grammarMethod{*
        (coke:)
    *}
    func m9: Any t -> Int { return 0 }

    @grammarMethod{*
        (fanta: | guarana:)
    *}
    func m10: Union<f1, Any, f2, Any> t -> Int { 
        type t 
            case Any f1 { return 0 }
            case Any f2 { return 1 }
    }

    @grammarMethod{*
        ( add: (fanta: | guarana:)* )
    *}
    func m11: Tuple<Any, Array<Union<f1, Any, f2, Any>>> t -> Int { 
        var s = 0;
        for elem in t f2 {
            type elem
                case Any f1 { s = s + 1 }
                case Any f2 { s = s + 10 }
        }
        return s
    }

    @grammarMethod{*
        (add: (cocaCola: | tubaina:)+ )
    *}
    func m12: Tuple<Any, Array<Union<f1, Any, f2, Any>>> t -> Int { 
        var s = 0;
        for elem in t f2 {
            type elem
                case Any f1 { s = s + 1 }
                case Any f2 { s = s + 10 }
        }
        return s
    }

    @grammarMethod{*
        (add5: ( (coke2: | guarana2:)+ )? )
    *}
    func m13: Tuple<Any, Union<some, Array<Union<f1, Any, f2, Any>>, 
                               none, Any>> t -> Int { 
        var s = 0;
        type t f2 
            case Array<Union<f1, Any, f2, Any>> some {
                for elem in some  {
                    type elem 
                        case Any f1 { s = s + 1 }
                        case Any f2 { s = s + 10 }
                }
            }
            case Any none {
                s = s + 100;
            }
        return s
    }

    @grammarMethod{*
        ( add7: ((coke: | guarana:)? )* )
    *}
    func m14: Tuple<Any, Array<Union<some, Union<f1, Any, f2, Any>, none, Any>>> t 
         -> Int { 
        var s = 0;
        for aa in t f2 {
            type aa
                case Union<f1, Any, f2, Any> some {
                    type some
                        case Any f1 { s = s + 1 }
                        case Any f2 { s = s + 10 }
                }
                case Any none {
                    s = s + 100;
                }
        }
        return s
    }
    
    @grammarMethod{*
        (amount: (gas: Int | alcohol: Int) )
    *}
    func m15: Tuple<Any, Union<f1, Int, f2, Int>> t -> Int { 
        var s = 0;
        type t f2 
            case Int f1 { s = s + f1 }
            case Int f2 { s = s + f2 + 10 }
        return s
    }

    // Union(some, Union(f1, Any, f2, Any), none, Nil).
    func test: Any any { }
    func testInterA: InterA ia { }
    func retAny: Any any -> Any {
        type any
            case InterB ib { return ib }
            case InterA ia { return ia }
            case Any aa { return aa }
            
    }

    func retAny7: Any any -> Int {
        var Int|Char|String ics = 0;
        type ics
            case Char ch { return 1 }
            case Int n { return n }
            case String s { return 2 }
    }

    
    var InterA intA = A();
    shared var Iterable<Int> iter = Array<Int>();
    var Int justInt = Int;
    let Int ljustInt = Int;
    shared var Int sjustInt = Int;
    shared let Int sljustInt = Int;
    
    func retAny2 -> Any = intA;

    func run {
        var GrammarTest .# writeCode gtest;
        var Int|String isun;
        

        assert self add: 0 == 0;
        assert self add: 0, "1" toStr: == "01";
        assert self addInt: 1, 2, 3 == 6;
        assert self add: 1 add: 2 add: 3 == 6;
        assert self add: "0" toStr: == "0";
        assert self add: 0, 1, "2", "3" toStr: == "0123";
        assert self addu: 0 == "0";
        assert self addu: "0" == "0";
        assert self key: 5 value: 10L == 15L;
        assert self nameList: "0", "1", "2" == "012none";
        assert self nameList: "0", "1", "2" size: 345 == "012345";
        assert self coke: == 0;
        assert self fanta: == 0;
        assert self guarana: == 1;
        assert add: fanta: fanta: == 2;
        assert add: fanta: guarana: fanta: == 12;
        assert add: fanta: guarana: fanta: guarana: guarana: fanta: == 33;

        assert add: cocaCola: cocaCola: == 2;
        assert add: cocaCola: tubaina: cocaCola: == 12;
        assert add: cocaCola: tubaina: cocaCola: tubaina: tubaina: cocaCola: == 33;

        assert self add5: == 100;
        assert self add5: coke2: coke2: guarana2: coke2: guarana2: == 23;

        assert self add7: == 0;
        assert self add7: coke: coke: == 2;
        assert self add7: coke: guarana: coke: guarana: coke: == 23;

//     func m14: Tuple<Any, Array<Union<some, Union<f1, Any, f2, Any>, none, Any>>> t 
        assert amount: gas: 11 == 11;
        assert amount: alcohol: 123 == 133;     
        
        /*
        0.prototypeName println;
        let v = [ 0, 1, 2 ];
        v.add: 3;
        printexpr v.size;
        */
        
    
        let ArrayIS isArray = ArrayIS();
        
        // only Int and String values are inserted in the array
        isArray addElem: 0  
                addElem: "zero" 
                addElem: Any
                addElem: 0.0
                addElem: 'a'
                addElem: 1;
        assert isArray getArray size == 3;
        var s = "";
        for elem in isArray getArray {
            s = s ++ elem
        }
        assert s == "0zero1";
        
        
        isArray add:  "one", 2, "two";
        s = "";
        for elem in isArray getArray {
            s = s ++ elem
        }
        assert s == "0zero1one2two";        
        
        let otherArray = Array<Int|String>();
        otherArray add: 0;
        otherArray add: "zero";
        otherArray add: 1;
        otherArray add: "one";
        otherArray add: 2;
        otherArray add: "two";
        assert isArray getArray == otherArray;
        
        let Int|String is99 = 0;
        assert otherArray == [ is99, "zero", 1, "one", 2, "two" ];

    
        let Person p = Person("Carolina", 7);
        assert p getName == "Carolina";
        p name: "Carol";
        assert p getName == "Carol";
        
        p name: "Carolina" age: 7;
        assert p getName == "Carolina";
        
    
        var MyFile myfile = MyFile();
        assert myfile open: "AAAA" read: == 0;
        assert myfile open: "BBBB" write: == 1;
    
    
        var EnergyStore store = EnergyStore new;
        store add: wattHour: 5.0;
        store add: joule: 10.0;
        store add: calorie: 3.0;
        store add: calorie: 3.0 joule: 10.0 wattHour: 4.0 wattHour: 5.0;

        EnergyStore add:
            wattHour: 100.0
            calorie: 12000.0
            wattHour: 355.0
            joule: 3200.67
            calorie: 8777.0;

        assert store getAmount equal: 50445.1208;


    
        MyOddArray add: 0 add: 1 add: 2;
        assert (MyOddArray getAll)[0] == 0;
        assert (MyOddArray getAll)[2] == 2;
        
        
        var MyOddArray array = SubMyOddArray();
        array add: 0 add: 1;
        assert array getAll at: 0 == 1;
        assert array getAll at: 1 == 2;
        assert array asString == "[ 1, 2 ]";
        
        
        var Any any = 0;
        
    
        var ma = MyArray();
        var InterA aa = A();
        var InterB bb = B();
        ma[aa] = bb;
        assert ma[aa] get == 0;

        ma[any] = any;
        assert ma[any] == InterA;
        
        
        assert self retAny2 isA: A;
        
        assert self retAny: aa == aa;
        
        
        let IMap<String, String> am2 = [ "one" -> "um" ];
        any = am2;
        //self test: am2;
        var InterB ib = InterB;
        self testInterA: ib;
        //("" ++ am) println;
        
    
        let car = Car();
        var ok = car do:      on:        move: 100
            left:    move: 50   right:
            right:   move: 200  off:  == 
            "car on car move(100) car left car move(50) car right car right car move(200) car off ";
            
        assert ok;
        
        car do: on:;
        car do: on: off:;
        car do: on: move: 50 left: move: 20 right: off:;
        
    
        // var Car .# writeCode gt;
        
        let GMTest<Int> ti = GMTest<Int>();
        
        ti add:;
        assert ti getAll == Array<Int>();
        ti add: 0, 1, 2, 3;
        assert ti getAll == [ 0, 1, 2, 3 ];
        // ti println;
        ti each: 4 each: 5 each: 6;
        assert ti getAll == [ 0, 1, 2, 3, 4, 5, 6 ];
        //printexpr ti getAll;
        
        let StringHashTable sht = StringHashTable();
        sht key: "one" value: "um"
            key: "two" value: "dois"
            key: "three" value: "tres";
            
        //assert sht getMap == [ "one" -> "um", "two" -> "dois", "three" -> "tres" ];
        //printexpr sht getMap;
        
    }
    
    
    
   
end
