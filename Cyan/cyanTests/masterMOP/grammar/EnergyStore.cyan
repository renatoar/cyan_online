package grammar

object EnergyStore
    /* @grammarMethod{*
        (add: (wattHour: Double | calorie: Double | joule: Double))
    *}
    func addEnergy: Tuple<Any, Union<f1, Double, f2, Double, f3, Double>> t {
        addAmount: t f2
    } */
    
    func addAmount: Union<f1, Double, f2, Double, f3, Double> value {
        type value
            case Double f1 {
                amount = amount + f1*3600.0
            }
            case Double f2 {
                amount = amount + f2*4.1868
            }
            case Double f3 {
                amount = amount + f3;
            }
    }
    
    @grammarMethod{*
        (add: (wattHour: Double | calorie: Double | joule: Double)+)
    *}
    func addEnergyList: Tuple<Any, Array<Union<f1, Double, f2, Double, f3, Double>>> t {
        for elem in t f2 {
            addAmount: elem
        }
    }
    
        // keeps the amount of energy in joules
    @property var Double amount = 0.0;
end
