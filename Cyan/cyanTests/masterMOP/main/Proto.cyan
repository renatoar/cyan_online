package main


@addMethodTo("func at: Int n put: Char ch;",
    "func at: Int n put: Char ch { text = text ++ n ++ ch; } ")
@annot("protoProto")
@feature("method", [ 0, 1, 2 ])
@annot("proto of main")
@feature("another", [ [. "method", "proto", 0, 1 .] ] )
object Proto

    func init {
        var tex = "";
        text = tex;
    }
    
    @annot("runnn")
    @feature("methodRun", "run - method")
    @annot(runAnnot)
    @feature("runMethod", methodRun)
    @annot(Nil)
    @annot("Nil")
    @feature("myNil", Nil)
    @feature("myNil", "Nil")
    func run {
    
        var Int count = 0;
          // Array<Tuple<key, String, value, Any>>
        //"feature list of Proto" println;
        //featureList println;
        for t in featureList {
            if t key == "annot" && t value == "protoProto" {
                ++count;
            }
            else if t key == "method" && t value == [ 0, 1, 2 ] {
                ++count;
            }
            else if t key == "another" && 
                    t value == [ [. "method", "proto", 0, 1 .] ]  {
                ++count;
            }
            else if t key == "annot" && t value == "proto of main" {
                ++count;
            }
        }
        //"count should be 4, count = $count" println;
        assert count == 4;
        count = 0;
        //"feature list of run" println;
        //(featureList: #run) println;
        for t in featureList: #run {
            if  t key == "annot" && (t value ?removeQuotes == "runnn" ||
                t value ?removeQuotes == "runAnnot" ||
                t value ?removeQuotes == "Nil" ) {
                ++count;
            }
            else if t key removeQuotes == "methodRun" 
                        && t value ?removeQuotes == "run - method" 
                    ||
                    t key removeQuotes == "myNil" && 
                    t value ?removeQuotes == "Nil" ||
                    t key removeQuotes == "runMethod" && 
                    t value ?removeQuotes == "methodRun"  {
                ++count;
            }
        }
        //"count should be 6, count = $count" println;
        
        /*
        "feature list of getText" println;
        (featureList: "getText") println;
        "feature list of text" println;
        (featureList: "text") println;
        "feature list of textIv" println;
        (featureList: "textIv") println;
        */
        
        assert count == 8;
        assert (featureList: "getText") contains: 
           [. key = "getTextArray", 
              value = (Cast<Any> asReceiver: [ "aaa", "bbb", "ccc" ])
           .];
        assert (featureList: "text") contains: 
           [. key = "ivText", 
              value = (Cast<Any> asReceiver: "String-text")
           .];
    }
    
    @feature("getTextArray", [ "aaa", "bbb", "ccc" ])
    func getText -> String = text;
    
    @feature("ivText", "String-text")
    @feature("textIv", "text-String")
    var String text
end

