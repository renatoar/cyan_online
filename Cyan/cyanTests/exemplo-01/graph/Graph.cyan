package graph

@init(numVertices, edgeArray)
object Graph
    func init { }
    
    @annot( #f1 ) @property 
    var Int numVertices = 0;
    @annot( #f2 ) @property 
    var Array<Edge> edgeArray = Array<Edge>();
    
    @grammarMethod{*
        (add: (edge: Int, Int)* )    
    *}
    func  addEdges: Tuple<Any, Array<Tuple<Int, Int>>> t  {
        for elem in t f2 {
            let v1 = elem f1;
            let v2 = elem f2;
            if v1 > numVertices { numVertices = v1 }
            if v2 > numVertices { numVertices = v2 }
            edgeArray add: Edge(v1, v2);
        }
    }
    
    func add: Edge edge {
        let v1 = edge getFrom;
        let v2 = edge getTo;
        if v1 > numVertices { numVertices = v1 }
        if v2 > numVertices { numVertices = v2 }
        edgeArray add: edge;
    }
    
    func out: Int vertex -> Array<Edge> {
        let Array<Edge> r = Array<Edge>();
        for e in edgeArray {
            if e getFrom == vertex {
                r add: e
            }
        }
        return r
    }
    
    func in: Int vertex -> Array<Edge> {
        let Array<Edge> r = Array<Edge>();
        for e in edgeArray {
            if e getTo == vertex {
                r add: e
            }
        }
        return r
    }
    
    override
    func asString -> String {
        var s = "{ ";
        var count = edgeArray size;
        for elem in edgeArray {
            s = s ++ "(" ++ elem getFrom ++ ", " ++ elem getTo ++ ")";
            --count;
            if count > 0 {
                s = s ++ ", ";
            }
        }
        s = s ++ " }";
        return s
    }
end


