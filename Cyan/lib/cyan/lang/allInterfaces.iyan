package cyan.lang


open object Any 

    func init 
    func new -> Any 
    @restrictOverrideTo(Byte, Short, Int, Long, Float, Double, Char, Boolean, String) 
    func eq: (Dyn other)  -> Boolean 
    @restrictOverrideTo(Byte, Short, Int, Long, Float, Double, Char, Boolean, String) 
    func neq: (Dyn other)  -> Boolean 
    func prototype -> Any 
    @annot(canBeCalledOnPrototypes) 
    final func prototypeName -> String 
    @annot(canBeCalledOnPrototypes) 
    final func prototypeParent -> Any 
    @annot(canBeCalledOnPrototypes) 
    final func prototypePackageName -> String 
    @annot(canBeCalledOnPrototypes) 
    final func isInterface -> Boolean 
    @checkIsA 
    @annot(canBeCalledOnPrototypes) 
    final func isA: (Any proto)  -> Boolean 
    @checkIsA 
    @annot(canBeCalledOnPrototypes) 
    final func notIsA: (Any proto)  -> Boolean 
    @annot(canBeCalledOnPrototypes) 
    @accessOnlySharedFields 
    final func throw: (CyException e)  -> Dyn 
    func clone -> Any 
    final func ++ Any other -> String 
    func asString -> String 
    func asString: (Int ident)  -> String 
    func asStringThisOnly: (Int ident)  -> String 
    func asStringQuoteIfString -> String 
    @checkMethodEqualEqual 
    @overrideToo("hashCode") 
    @overrideTest{* 
        func equalityTest: SUBPROTOTYPE a, SUBPROTOTYPE b, SUBPROTOTYPE c -> String|Nil {
            if a == a && a != a && ! (a == a) || 
               !(b == b) || !(c == c) || (a == b && a != b) ||
               !(a == b && b == c && a != c) ||
               (a == b && b != a) {
                return "method '==' or '!=' of SUBPROTOTYPE do not satisfy the axioms for equality and non-equality";
            }
            if ( a == b && (a != b) ) || (a != a) || (b != b) || (a == b && b != a) ||
                (b != a && b == a) {
                return " SUBPROTOTYPE do not obey the rules for equality"
            }
            return Nil
        }

    
    *}
 
    func == Dyn other -> Boolean 
    func === Dyn other -> Boolean 
    func !== Dyn other -> Boolean 
    @checkMethodEqualEqual 
    final func != Dyn other -> Boolean 
    func isCase: (Any other)  -> Boolean 
    func assertxx: (Boolean expr)  
    func assertxx: (Boolean expr, String message)  
    func print 
    func println 
    func printspc 
    func printc 
    @prototypeCallOnly 
    @annot(canBeCalledOnPrototypes) 
    final func toAny: (Dyn elem)  -> Any 
    @annot(canBeCalledOnPrototypes) 
    final func featureList -> Array<Tuple<key,String,value,Any>> 
    @annot(canBeCalledOnPrototypes) 
    final func featureList: (String slotName)  -> Array<Tuple<key,String,value,Any>> 
    @annot(canBeCalledOnPrototypes) 
    final func slotFeatureList -> Array<Tuple<slotName,String,key,String,value,Any>> 
    @annot(canBeCalledOnPrototypes) 
    final func annotList -> Array<Any> 
    @annot(canBeCalledOnPrototypes) 
    final func annotList: (String slotName)  -> Array<Any> 
    func doesNotUnderstand: (String methodName, Array<Array<Dyn>> args)  -> Dyn 
    @changeFunctionForMethod 
    final func functionForMethod: (String signature)  -> Any 
    @changeFunctionForMethod 
    final func functionForMethodWithSelf: (String signature)  -> Any 
    @overrideTest{* 
        func hashTest: SUBPROTOTYPE a, SUBPROTOTYPE b -> String|Nil {
            if a hashCode != a hashCode ||
               b hashCode != b hashCode {
               return "method 'hashCode' should always return the same value";
            }
            if a == b && a hashCode != b hashCode {
               return "method 'hashCode' should always return true for methods equal according to '=='";
            }
            return Nil
        }

    
    *}
 
    func hashCode -> Int 
    @annot(canBeCalledOnPrototypes) 
    final func getMethodNameList -> Array<String> 
    @annot(canBeCalledOnPrototypes) 
    final func getFieldNameList -> Array<String> 
    func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object AssurePrototypesAreCreated 

    func init 
    func new -> AssurePrototypesAreCreated 
    func assure: (Array<Any> anyArray, Array<Dyn> dynArray, Array<Boolean> boolArray, Array<Char> charArray, Array<Byte> byteArray, Array<Int> intArray, Array<Short> shortArray, Array<Long> longArray, Array<Float> floatArray, Array<Double> doubleArray, Array<Tuple<Dyn,Array<Dyn>>> arrayTupleDynArrayDyn, Array<Tuple<String,Array<String>>> arrayTupleStringArrayString, Array<Tuple<String,String>> arrayTupleStringString, Array<Tuple<String,String,Boolean>> arrayTupleStringStringBoolean, Array<String> stringArray, Function<Dyn> dynFunc, Function<Dyn,Dyn> dynDynFunc, Function<Dyn,Dyn,Dyn> dyn3Func, Function<Dyn,Dyn,Dyn,Dyn> dyn4Func, Function<Dyn,Dyn,Dyn,Dyn,Dyn> dyn5Func, Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> dyn6Func, Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> dyn7Func, Tuple<Dyn,Dyn> dyn2Tuple, Tuple<Dyn,Dyn,Dyn> dyn3Tuple, Tuple<Dyn,Dyn,Dyn,Dyn> dyn4Tuple, Tuple<Dyn,Dyn,Dyn,Dyn,Dyn> dyn5Tuple, Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> dyn6Tuple, Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> dyn7Tuple, Tuple<String,String,String> sssTuple, Interval<Byte> byteInterval, Interval<Int> intInterval, Interval<Short> shortInterval, Interval<Long> longInterval, Interval<Char> charInterval, Set<Tuple<Dyn,Dyn,Dyn,Dyn>> stdddd, Set<Tuple<String,Int,Int,Dyn>> stsiid, HashMap<String,String> hashMap)  
    override func prototype -> AssurePrototypesAreCreated 
    override func clone -> AssurePrototypesAreCreated 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Boolean 

    func init 
    func init: (Int n)  
    func new -> Boolean 
    func new: (Int p0)  -> Boolean 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func !  -> Boolean 
    func < Boolean other -> Boolean 
    func <= Boolean other -> Boolean 
    func > Boolean other -> Boolean 
    func >= Boolean other -> Boolean 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func => Function<Nil> ifTrueFun 
    func |> Function<Boolean,Boolean> f -> Boolean 
    func asInt -> Int 
    override func asString -> String 
    func to: (Boolean max) 
        do: (Function<Nil> b)  
    func to: (Boolean max) 
        do: (Function<Boolean,Nil> b)  
    func ifTrue: (Function<Nil> trueBlock)  
    func ifFalse: (Function<Nil> falseBlock)  
    func ifTrue: (Function<Nil> trueBlock) 
        ifFalse: (Function<Nil> falseBlock)  
    func ifFalse: (Function<Nil> falseBlock) 
        ifTrue: (Function<Nil> trueBlock)  
    func t: (Any trueValue) 
        f: (Any falseValue)  -> Any 
    func f: (Any falseValue) 
        t: (Any trueValue)  -> Any 
    override func hashCode -> Int 
    func defaultValue -> Boolean 
    override func prototype -> Boolean 
    override func clone -> Boolean 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Byte 

    func init 
    func new -> Byte 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func + Byte other -> Byte 
    func - Byte other -> Byte 
    func * Byte other -> Byte 
    func / Byte other -> Byte 
    func % Byte other -> Byte 
    func < Byte other -> Boolean 
    func <= Byte other -> Boolean 
    func > Byte other -> Boolean 
    func >= Byte other -> Boolean 
    func pred -> Byte 
    func succ -> Byte 
    func odd -> Boolean 
    func even -> Boolean 
    func prime -> Boolean 
    func isMultiple: (Byte n)  -> Boolean 
    func maxValue -> Byte 
    func minValue -> Byte 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Byte other -> Int 
    func .. Byte theEnd -> Interval<Byte> 
    func ..< Byte theEnd -> Interval<Byte> 
    func -  -> Byte 
    func +  -> Byte 
    func & Byte other -> Byte 
    func ||| Byte other -> Byte 
    func ~| Byte other -> Byte 
    func ~  -> Byte 
    func |> Function<Byte,Byte> f -> Byte 
    func asInt -> Int 
    func asShort -> Short 
    func asLong -> Long 
    func asFloat -> Float 
    func asDouble -> Double 
    func asChar -> Char 
    func asBoolean -> Boolean 
    override func asString -> String 
    func to: (Byte max) 
        do: (Function<Byte,Nil> b)  
    func to: (Byte max) 
        into: (InjectObject<Byte> injectTo)  
    func times: (Function<Nil> b)  
    func repeat: (Function<Byte,Nil> b)  
    func to: (Byte max) 
        inject: (Byte initialValue) 
        into: (Function<Byte,Byte,Byte> b)  -> Byte 
    func in: (Iterable<Byte> container)  -> Boolean 
    func notin: (Iterable<Byte> container)  -> Boolean 
    func between: (Interval<Byte> inter)  -> Boolean 
    override func hashCode -> Int 
    func defaultValue -> Byte 
    override func prototype -> Byte 
    override func clone -> Byte 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object CatchAll 

    func init 
    func new -> CatchAll 
    func eval: (CyException e)  
    override func prototype -> CatchAll 
    override func clone -> CatchAll 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object CatchStr 

    func init 
    func new -> CatchStr 
    func eval: (ExceptionStr e)  
    override func prototype -> CatchStr 
    override func clone -> CatchStr 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Char 

    func init 
    func new -> Char 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func * Int number -> String 
    func < Char other -> Boolean 
    func <= Char other -> Boolean 
    func > Char other -> Boolean 
    func >= Char other -> Boolean 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Char other -> Int 
    func .. Char theEnd -> Interval<Char> 
    func ..< Char theEnd -> Interval<Char> 
    func pred -> Char 
    func succ -> Char 
    func - Char other -> Int 
    func |> Function<Char,Char> f -> Char 
    func asByte -> Byte 
    func asInt -> Int 
    func asShort -> Short 
    func asLong -> Long 
    func asBoolean -> Boolean 
    override func asString -> String 
    override func asStringQuoteIfString -> String 
    func to: (Char max) 
        do: (Function<Char,Nil> b)  
    func in: (Iterable<Char> container)  -> Boolean 
    func notin: (Iterable<Char> container)  -> Boolean 
    func between: (Interval<Char> inter)  -> Boolean 
    override func hashCode -> Int 
    func isLetter -> Boolean 
    func isLowerCase -> Boolean 
    func isUpperCase -> Boolean 
    func isDigit -> Boolean 
    func isLetterOrDigit -> Boolean 
    func isWhitespace -> Boolean 
    func toUpperCase -> Char 
    func toLowerCase -> Char 
    func defaultValue -> Char 
    override func prototype -> Char 
    override func clone -> Char 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object CharIterator 
          implements Iterator<Char>

    func init: (String s)  
    func new: (String p0)  -> CharIterator 
    override func hasNext -> Boolean 
    override func next -> Char 
    override func prototype -> CharIterator 
    override func clone -> CharIterator 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object CyException 

    func init 
    func new -> CyException 
    override func prototype -> CyException 
    override func clone -> CyException 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Double 

    func init 
    func new -> Double 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func + Double other -> Double 
    func - Double other -> Double 
    func * Double other -> Double 
    func / Double other -> Double 
    func < Double other -> Boolean 
    func <= Double other -> Boolean 
    func > Double other -> Boolean 
    func >= Double other -> Boolean 
    func standardDoublePrecision -> Double 
    func equal: (Double other)  -> Boolean 
    func equal: (Double other, Double precision)  -> Boolean 
    func maxValue -> Double 
    func minValue -> Double 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Double other -> Int 
    func -  -> Double 
    func +  -> Double 
    func |> Function<Double,Double> f -> Double 
    func asByte -> Byte 
    func asInt -> Int 
    func asShort -> Short 
    func asLong -> Long 
    func asFloat -> Float 
    func asChar -> Char 
    override func asString -> String 
    override func hashCode -> Int 
    func sqrt -> Double 
    func defaultValue -> Double 
    override func prototype -> Double 
    override func clone -> Double 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object DTuple 

    func init 
    func new -> DTuple 
    override func doesNotUnderstand: (String methodName, Array<Array<Dyn>> args)  -> Dyn 
    func contains: (String fieldName)  -> Boolean 
    func size -> Int 
    func getFieldList -> Array<String> 
    override func prototype -> DTuple 
    override func clone -> DTuple 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionAssert extends CyException

    func init 
    func new -> ExceptionAssert 
    override func prototype -> ExceptionAssert 
    override func clone -> ExceptionAssert 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionCannotCallAbstractMethod(String _message) extends CyException

    func init: (String _message)  
    func new: (String _message)  -> ExceptionCannotCallAbstractMethod 
    func message -> String 
    override func prototype -> ExceptionCannotCallAbstractMethod 
    override func clone -> ExceptionCannotCallAbstractMethod 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionCannotCallInterfaceMethod(String _message) extends CyException

    func init: (String _message)  
    func new: (String _message)  -> ExceptionCannotCallInterfaceMethod 
    func message -> String 
    override func prototype -> ExceptionCannotCallInterfaceMethod 
    override func clone -> ExceptionCannotCallInterfaceMethod 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionCast(String _message) extends CyException

    func init: (String _message)  
    func new: (String _message)  -> ExceptionCast 
    func message -> String 
    override func prototype -> ExceptionCast 
    override func clone -> ExceptionCast 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionContainer extends CyException

    func init: (CyException _exception)  
    func new: (CyException p0)  -> ExceptionContainer 
    func getException -> CyException 
    override func prototype -> ExceptionContainer 
    override func clone -> ExceptionContainer 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionCopyFailure(String _message) extends CyException

    func init: (String _message)  
    func new: (String _message)  -> ExceptionCopyFailure 
    override func prototype -> ExceptionCopyFailure 
    override func clone -> ExceptionCopyFailure 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionDoesNotUnderstand(String _methodName) extends CyException

    func init: (String _methodName)  
    func new: (String _methodName)  -> ExceptionDoesNotUnderstand 
    func methodName -> String 
    override func prototype -> ExceptionDoesNotUnderstand 
    override func clone -> ExceptionDoesNotUnderstand 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionExit extends CyException

    func init 
    func new -> ExceptionExit 
    func eval: (ExceptionExit e)  
    override func prototype -> ExceptionExit 
    override func clone -> ExceptionExit 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionIndexOutOfBounds(Int _index) extends CyException

    func init: (Int _index)  
    func new: (Int _index)  -> ExceptionIndexOutOfBounds 
    func index -> Int 
    override func prototype -> ExceptionIndexOutOfBounds 
    override func clone -> ExceptionIndexOutOfBounds 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionIterator extends CyException

    func init 
    func new -> ExceptionIterator 
    override func prototype -> ExceptionIterator 
    override func clone -> ExceptionIterator 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionJavaException extends CyException

    func init 
    func new -> ExceptionJavaException 
    func getExceptionName -> String 
    override func prototype -> ExceptionJavaException 
    override func clone -> ExceptionJavaException 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionMethodNotFound extends CyException

    func init 
    func init: (String _message)  
    func new -> ExceptionMethodNotFound 
    func new: (String p0)  -> ExceptionMethodNotFound 
    func message -> String 
    override func prototype -> ExceptionMethodNotFound 
    override func clone -> ExceptionMethodNotFound 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionNumberFormat extends CyException

    func init 
    func new -> ExceptionNumberFormat 
    override func prototype -> ExceptionNumberFormat 
    override func clone -> ExceptionNumberFormat 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionReadFormat extends CyException

    func init 
    func new -> ExceptionReadFormat 
    override func prototype -> ExceptionReadFormat 
    override func clone -> ExceptionReadFormat 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionStackEmpty extends CyException

    func init 
    func new -> ExceptionStackEmpty 
    func eval: (ExceptionStackEmpty e)  
    func message -> String 
    override func prototype -> ExceptionStackEmpty 
    override func clone -> ExceptionStackEmpty 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object ExceptionStr(String _message) extends CyException

    func init: (String _message)  
    func new: (String _message)  -> ExceptionStr 
    func eval: (ExceptionStr e)  
    func message -> String 
    override func prototype -> ExceptionStr 
    override func clone -> ExceptionStr 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object FilterRegExpr extends Filter<String>

    func init: (String regExprStr)  
    func new: (String p0)  -> FilterRegExpr 
    override func eval: (String elem)  -> Boolean 
    override func prototype -> FilterRegExpr 
    override func clone -> FilterRegExpr 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Float 

    func init 
    func new -> Float 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func standardFloatPrecision -> Float 
    func equal: (Float other)  -> Boolean 
    func equal: (Float other, Float precision)  -> Boolean 
    func + Float other -> Float 
    func - Float other -> Float 
    func * Float other -> Float 
    func / Float other -> Float 
    func < Float other -> Boolean 
    func <= Float other -> Boolean 
    func > Float other -> Boolean 
    func >= Float other -> Boolean 
    func maxValue -> Float 
    func minValue -> Float 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Float other -> Int 
    func -  -> Float 
    func +  -> Float 
    func |> Function<Float,Float> f -> Float 
    func asByte -> Byte 
    func asInt -> Int 
    func asShort -> Short 
    func asLong -> Long 
    func asDouble -> Double 
    func asChar -> Char 
    override func asString -> String 
    override func hashCode -> Int 
    func sqrt -> Float 
    func defaultValue -> Float 
    override func prototype -> Float 
    override func clone -> Float 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Boolean> 

    func init 
    abstract func eval -> Boolean 
    func whileTrue: (Function<Nil> aFunction)  
    func whileFalse: (Function<Nil> aFunction)  
    override func prototype -> Function<Boolean> 
    override func clone -> Function<Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Nil> 

    func init 
    abstract func eval 
    func loop 
    func repeatUntil: (Function<Boolean> test)  
    func hideException 
    func finally: (Function<Nil> f)  
    override func prototype -> Function<Nil> 
    @checkCatchParameter 
    final func catch: (Any f1)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        finally: (Function<Nil> fin)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        retry: (Function<Nil> r)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        tryWhileTrue: (Function<Boolean> tryIfTrue)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        finally: (Function<Nil> fin)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        retry: (Function<Nil> r)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        tryWhileTrue: (Function<Boolean> tryIfTrue)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        finally: (Function<Nil> fin)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        retry: (Function<Nil> r)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        tryWhileTrue: (Function<Boolean> tryIfTrue)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        finally: (Function<Nil> fin)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        retry: (Function<Nil> r)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        tryWhileTrue: (Function<Boolean> tryIfTrue)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        catch: (Any f5)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        catch: (Any f5) 
        finally: (Function<Nil> fin)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        catch: (Any f5) 
        retry: (Function<Nil> r)  
    @checkCatchParameter 
    final func catch: (Any f1) 
        catch: (Any f2) 
        catch: (Any f3) 
        catch: (Any f4) 
        catch: (Any f5) 
        tryWhileTrue: (Function<Boolean> tryIfTrue)  
    override func clone -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object In 

    func init 
    func new -> In 
    func readInt -> Int 
    func readFloat -> Float 
    func readDouble -> Double 
    func readChar -> Char 
    func readLine -> String 
    override func prototype -> In 
    override func clone -> In 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeToGenericPrototype(Array, "func sum -> Int"){*

    func sum -> Int {
        var Int s = 0;
        for elem in self {
            s = s + elem
        }
        return s
    }

*}
 @addCodeToGenericPrototype("Array Array", """    func sumDiagonal -> Int;    func flat -> Array<Int>;"""){*

    func sumDiagonal -> Int {
        var Int s = 0;
        var Int i = 0;
        for elem in self {
            s = s + elem[i];
            ++i;
        }
        return s
    }
    
    func flat -> Array<Int> {
        let newArray = Array<Int>();
        for line in self {
            for elem in line {
                newArray add: elem;
            }
        }
        return newArray;
    }

*}
 @addCodeToGenericPrototype("Array Function", "func sum -> Int;"){*

    func sum -> Int {
        var Int s = 0;
        for f in self {
            s = s + f eval;
        }
        return s
    }
    

*}
 
object Int 

    func init 
    func new -> Int 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func + Int other -> Int 
    func - Int other -> Int 
    func * Int other -> Int 
    func / Int other -> Int 
    func % Int other -> Int 
    func < Int other -> Boolean 
    func <= Int other -> Boolean 
    func > Int other -> Boolean 
    func >= Int other -> Boolean 
    func pred -> Int 
    func succ -> Int 
    func odd -> Boolean 
    func even -> Boolean 
    func prime -> Boolean 
    func isMultiple: (Int n)  -> Boolean 
    func maxValue -> Int 
    func minValue -> Int 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Int other -> Int 
    func .. Int theEnd -> Interval<Int> 
    func ..< Int theEnd -> Interval<Int> 
    func -  -> Int 
    func +  -> Int 
    func & Int other -> Int 
    func ||| Int other -> Int 
    func ~| Int other -> Int 
    func ~  -> Int 
    func <.< Int other -> Int 
    func >.> Int other -> Int 
    func >.>> Int other -> Int 
    func |> Function<Int,Int> f -> Int 
    func asByte -> Byte 
    func asShort -> Short 
    func asLong -> Long 
    func asFloat -> Float 
    func asDouble -> Double 
    func asChar -> Char 
    func asBoolean -> Boolean 
    func asInt -> Int 
    override func asString -> String 
    func to: (Int max) 
        do: (Function<Int,Nil> b)  
    func to: (Int max) 
        into: (InjectObject<Int> injectTo)  
    func times: (Function<Nil> b)  
    func repeat: (Function<Int,Nil> b)  
    func to: (Int max) 
        inject: (Int initialValue) 
        into: (Function<Int,Int,Int> b)  -> Int 
    func in: (Iterable<Int> container)  -> Boolean 
    func notin: (Iterable<Int> container)  -> Boolean 
    func between: (Interval<Int> inter)  -> Boolean 
    override func hashCode -> Int 
    func defaultValue -> Int 
    override func prototype -> Int 
    override func clone -> Int 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IPattern
    func ~= String toMatch -> Boolean 
end



object Long 

    func init 
    func new -> Long 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func + Long other -> Long 
    func - Long other -> Long 
    func * Long other -> Long 
    func / Long other -> Long 
    func % Long other -> Long 
    func < Long other -> Boolean 
    func <= Long other -> Boolean 
    func > Long other -> Boolean 
    func >= Long other -> Boolean 
    func <=> Long other -> Int 
    func .. Long theEnd -> Interval<Long> 
    func ..< Long theEnd -> Interval<Long> 
    func pred -> Long 
    func succ -> Long 
    func odd -> Boolean 
    func even -> Boolean 
    func prime -> Boolean 
    func isMultiple: (Long n)  -> Boolean 
    func maxValue -> Long 
    func minValue -> Long 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func -  -> Long 
    func +  -> Long 
    func & Long other -> Long 
    func ||| Long other -> Long 
    func ~| Long other -> Long 
    func ~  -> Long 
    func <.< Long other -> Long 
    func >.> Long other -> Long 
    func >.>> Long other -> Long 
    func |> Function<Long,Long> f -> Long 
    func asByte -> Byte 
    func asInt -> Int 
    func asShort -> Short 
    func asFloat -> Float 
    func asDouble -> Double 
    func asChar -> Char 
    func asBoolean -> Boolean 
    override func asString -> String 
    func to: (Long max) 
        do: (Function<Long,Nil> b)  
    func to: (Long max) 
        into: (InjectObject<Long> injectTo)  
    func times: (Function<Nil> b)  
    func repeat: (Function<Long,Nil> b)  
    func to: (Long max) 
        inject: (Long initialValue) 
        into: (Function<Long,Long,Long> b)  -> Long 
    func in: (Iterable<Long> container)  -> Boolean 
    func notin: (Iterable<Long> container)  -> Boolean 
    func between: (Interval<Long> inter)  -> Boolean 
    override func hashCode -> Int 
    func defaultValue -> Long 
    override func prototype -> Long 
    override func clone -> Long 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Nil 

    func prototypeName -> String 
    func asString -> String 
    func asString: (Int ident)  -> String 
    func print 
    func println 
    func == Dyn other -> Boolean 
    func === Dyn other -> Boolean 
    func != Dyn other -> Boolean 
    func !== Dyn other -> Boolean 
    func ++ Dyn other -> String 
end



object Null 

    func init 
    func new -> Null 
    func equalNull: (Dyn obj)  -> Boolean 
    func getNull -> Dyn 
    func instanceof: (Dyn obj, String packageName)  -> Boolean 
    func nop 
    override func prototype -> Null 
    override func clone -> Null 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Out 

    func init 
    func new -> Out 
    func println: (Any any)  
    func print: (Any any)  
    func println: (Any p1, Any p2)  
    func print: (Any p1, Any p2)  
    func println: (Any p1, Any p2, Any p3)  
    func print: (Any p1, Any p2, Any p3)  
    func println: (Any p1, Any p2, Any p3, Any p4)  
    func print: (Any p1, Any p2, Any p3, Any p4)  
    func println: (Any p1, Any p2, Any p3, Any p4, Any p5)  
    func print: (Any p1, Any p2, Any p3, Any p4, Any p5)  
    @grammarMethod{*
        ( printlnf: (Any)+ )
        checkPrintf
    
    *}
 
    func printlnfAll: (Array<Any> array)  
    @grammarMethod{*
        ( printf: (Any)+ )
        checkPrintf
    
    *}
 
    func printfAll: (Array<Any> array)  
    override func prototype -> Out 
    override func clone -> Out 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Prime extends Function<Int, Boolean>

    func init 
    func new -> Prime 
    override func eval: (Int t)  -> Boolean 
    override func prototype -> Prime 
    override func clone -> Prime 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object RegExpr extends Function<String, Boolean>
          implements IPattern

    func init: (String regExpr)  
    func new: (String p0)  -> RegExpr 
    override func ~= String str -> Boolean 
    override func eval: (String str)  -> Boolean 
    func |> Function<String,Boolean> next -> Function<String,Boolean> 
    override func prototype -> RegExpr 
    override func clone -> RegExpr 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Short 

    func init 
    func new -> Short 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func + Short other -> Short 
    func - Short other -> Short 
    func * Short other -> Short 
    func / Short other -> Short 
    func % Short other -> Short 
    func < Short other -> Boolean 
    func <= Short other -> Boolean 
    func > Short other -> Boolean 
    func >= Short other -> Boolean 
    func pred -> Short 
    func succ -> Short 
    func maxValue -> Short 
    func minValue -> Short 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> Short other -> Int 
    func .. Short theEnd -> Interval<Short> 
    func ..< Short theEnd -> Interval<Short> 
    func -  -> Short 
    func +  -> Short 
    func & Short other -> Short 
    func ||| Short other -> Short 
    func ~| Short other -> Short 
    func ~  -> Short 
    func |> Function<Short,Short> f -> Short 
    func asByte -> Byte 
    func asInt -> Int 
    func asLong -> Long 
    func asFloat -> Float 
    func asDouble -> Double 
    func asChar -> Char 
    func asBoolean -> Boolean 
    override func asString -> String 
    func to: (Short max) 
        do: (Function<Short,Nil> b)  
    func to: (Short max) 
        into: (InjectObject<Short> injectTo)  
    func times: (Function<Nil> b)  
    func repeat: (Function<Short,Nil> b)  
    func to: (Short max) 
        inject: (Short initialValue) 
        into: (Function<Short,Short,Short> b)  -> Short 
    func in: (Iterable<Short> container)  -> Boolean 
    func notin: (Iterable<Short> container)  -> Boolean 
    func between: (Interval<Short> inter)  -> Boolean 
    override func hashCode -> Int 
    func defaultValue -> Short 
    override func prototype -> Short 
    override func clone -> Short 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeToGenericPrototype(Array, """
    func join -> String;
    func join: String between -> String;
    """){*

    func join -> String {
        var s = "";
        for elem in self {
            s = s ++ elem
        }
        return s;
    }

    func join: String between -> String {
        var s = "";
        var aSize = self size;
        for elem in self {
            s = s ++ elem;
            --aSize;
            if aSize > 0 { s = s ++ between }
        }
        return s;
    }


*}
 
object String 
          implements Iterable<Char>

    func init 
    func new -> String 
    func  [] at: (Int index)  -> Char 
    override func eq: (Dyn other)  -> Boolean 
    override func neq: (Dyn other)  -> Boolean 
    func < String other -> Boolean 
    func <= String other -> Boolean 
    func > String other -> Boolean 
    func >= String other -> Boolean 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func <=> String other -> Int 
    func ~= IPattern pattern -> Boolean 
    func size -> Int 
    override func asString -> String 
    override func asStringQuoteIfString -> String 
    func in: (Iterable<String> container)  -> Boolean 
    func notin: (Iterable<String> container)  -> Boolean 
    func asByte -> cyan.lang.Byte|cyan.lang.Nil 
    func asShort -> cyan.lang.Short|cyan.lang.Nil 
    func asInt -> cyan.lang.Int|cyan.lang.Nil 
    func asLong -> cyan.lang.Long|cyan.lang.Nil 
    func asFloat -> cyan.lang.Float|cyan.lang.Nil 
    func asDouble -> cyan.lang.Double|cyan.lang.Nil 
    func asChar -> cyan.lang.Char|cyan.lang.Nil 
    func asBoolean -> cyan.lang.Boolean|cyan.lang.Nil 
    override func foreach: (Function<Char,Nil> b)  
    func substring: (Int start, Int lastBut)  -> String 
    func substring: (Int last)  -> String 
    func head -> Char 
    func last -> Char 
    func tail -> String 
    func * Int number -> String 
    func - String atEnd -> String 
    func countChar: (Char ch)  -> Int 
    func |> Function<String,String> f -> String 
    override func iterator -> Iterator<Char> 
    override func hashCode -> Int 
    func asCharArray -> Array<Char> 
    func trim -> String 
    func trim: (Array<Char> charArray)  -> String 
    func endsWith: (String theEnd)  -> Boolean 
    func startsWith: (String theStart)  -> Boolean 
    func indexOf: (Char ch)  -> Int 
    func lastIndexOf: (Char ch)  -> Int 
    func lastIndexOfString: (String str)  -> Int 
    func lastIndexOf: (Char ch) 
        fromIndex: (Int n)  -> Int 
    func lastIndexOfString: (String str) 
        fromIndex: (Int n)  -> Int 
    func toUpperCase -> String 
    func toLowerCase -> String 
    func defaultValue -> String 
    func replaceChar: (Char oldChar) 
        by: (Char newChar)  -> String 
    func replaceString: (String oldStr) 
        by: (String newStr)  -> String 
    func split: (String regExpr)  -> Array<String> 
    func split: (String regExpr, Int limit)  -> Array<String> 
    func equalsIgnoreCase: (String other)  -> Boolean 
    func isEmpty -> Boolean 
    func removeQuotes -> String 
    override func prototype -> String 
    override func clone -> String 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object System 

    func init 
    func new -> System 
    func exit 
    func exit: (Int errorCode)  
    func gc 
    func currentTime -> Long 
    func printMethodStack 
    func exec: (String command)  
    func exec: (Array<String> commandList)  
    func exec: (Array<String> commandList, Array<String> envpList, String dir)  
    func globalTable -> IMap<String,Dyn> 
    func pushCheckStack: (String s)  
    func popCheckStack -> String 
    func peekCheckStack -> String 
    func topCheckStackEquals: (String s)  -> Boolean 
    override func prototype -> System 
    override func clone -> System 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Throw 

    func init: (CyException e)  
    func new: (CyException p0)  -> Throw 
    override func prototype -> Throw 
    override func clone -> Throw 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< key,  String,  value,  Any> 

    func init: (String g1, Any g2)  
    func new: (String p0, Any p1)  -> Tuple<key,String,value,Any> 
    override func prototype -> Tuple<key,String,value,Any> 
    func key: (String g1) 
        value: (Any g2)  -> Tuple<key,String,value,Any> 
    func key -> String 
    func key: (String other)  
    func value -> Any 
    func value: (Any other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<key,String,value,Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<key, String, value, Any>> 
          implements Iterable<Tuple<key, String, value, Any>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<key,String,value,Any>> 
    func new: (Int p0)  -> Array<Tuple<key,String,value,Any>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<key,String,value,Any> elem)  
    func replace: (Int i, Tuple<key,String,value,Any> elem)  
    func addAll: (Iterable<Tuple<key,String,value,Any>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<key,String,value,Any> 
    func  [] at: (Int index) 
        put: (Tuple<key,String,value,Any> elem)  
    func last -> Tuple<key,String,value,Any> 
    func head -> Tuple<key,String,value,Any> 
    func tail -> Array<Tuple<key,String,value,Any>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<key,String,value,Any>> 
    func concat: (Array<Tuple<key,String,value,Any>> other)  -> Array<Tuple<key,String,value,Any>> 
    func size -> Int 
    override func foreach: (Function<Tuple<key,String,value,Any>,Nil> b)  
    func filter: (Function<Tuple<key,String,value,Any>,Boolean> f)  -> Array<Tuple<key,String,value,Any>> 
    func filter: (Function<Tuple<key,String,value,Any>,Boolean> f) 
        foreach: (Function<Tuple<key,String,value,Any>,Nil> b)  
    func map: (Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> f)  -> Array<Tuple<key,String,value,Any>> 
    func |> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> f -> Array<Tuple<key,String,value,Any>> 
    override func iterator -> Iterator<Tuple<key,String,value,Any>> 
    func contains: (Tuple<key,String,value,Any> elem)  -> Boolean 
    func notContains: (Tuple<key,String,value,Any> elem)  -> Boolean 
    func containsArray: (Array<Tuple<key,String,value,Any>> other)  -> Boolean 
    func indexOf: (Tuple<key,String,value,Any> elem)  -> Int 
    override func prototype -> Array<Tuple<key,String,value,Any>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<key, String, value, Any>>
    func iterator -> Iterator<Tuple<key,String,value,Any>> 
    func foreach: Function<Tuple<key,String,value,Any>,Nil>  
end



public interface Iterator< Tuple<key, String, value, Any>>
    func hasNext -> Boolean 
    func next -> Tuple<key,String,value,Any> 
end



abstract open object Function< Tuple<key, String, value, Any>,  Nil> 

    func init 
    func new -> Function<Tuple<key,String,value,Any>,Nil> 
    override func prototype -> Function<Tuple<key,String,value,Any>,Nil> 
    abstract func eval: Tuple<key,String,value,Any>  -> Nil 
    func curry: (Tuple<key,String,value,Any> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<key,String,value,Any>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Interval< Int> 
          implements Iterable<Int>

    func init: (Int start, Int theend)  
    func new: (Int p0, Int p1)  -> Interval<Int> 
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    func asArray -> Array<Int> 
    func times: (Function<Nil> b)  
    func repeat: (Function<Int,Nil> b)  
    override func foreach: (Function<Int,Nil> b)  
    func filter: (Function<Int,Boolean> f)  -> Array<Int> 
    func filter: (Function<Int,Boolean> f) 
        foreach: (Function<Int,Nil> b)  
    func map: (Function<Int,Int> f)  -> Array<Int> 
    func |> Function<Interval<Int>,Interval<Int>> f -> Interval<Int> 
    func + Iterable<Int> other -> Iterable<Int> 
    func inject: (Int initialValue) 
        into: (Function<Int,Int,Int> b)  -> Int 
    func to: (Int max) 
        do: (InjectObject<Int> injectTo)  -> Int 
    func size -> Int 
    func first -> Int 
    func last -> Int 
    func asTuple -> Tuple<first,Int,last,Int> 
    func apply: (String message)  -> Dyn 
    func .* String message 
    func .+ String message -> Any 
    override func iterator -> Iterator<Int> 
    override func prototype -> Interval<Int> 
    override func clone -> Interval<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Int>
    func iterator -> Iterator<Int> 
    func foreach: Function<Int,Nil>  
end



public interface Iterator< Int>
    func hasNext -> Boolean 
    func next -> Int 
end



abstract open object Function< Int,  Nil> 

    func init 
    func new -> Function<Int,Nil> 
    override func prototype -> Function<Int,Nil> 
    abstract func eval: Int  -> Nil 
    func curry: (Int t1)  -> Function<Nil> 
    override func clone -> Function<Int,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject#afterResTypes 
object Array< Int> 
          implements Iterable<Int>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Int> 
    func new: (Int p0)  -> Array<Int> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Int elem)  
    func replace: (Int i, Int elem)  
    func addAll: (Iterable<Int> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Int 
    func  [] at: (Int index) 
        put: (Int elem)  
    func last -> Int 
    func head -> Int 
    func tail -> Array<Int> 
    func slice: (Interval<Int> interval)  -> Array<Int> 
    func concat: (Array<Int> other)  -> Array<Int> 
    func size -> Int 
    override func foreach: (Function<Int,Nil> b)  
    func filter: (Function<Int,Boolean> f)  -> Array<Int> 
    func filter: (Function<Int,Boolean> f) 
        foreach: (Function<Int,Nil> b)  
    func map: (Function<Int,Int> f)  -> Array<Int> 
    func |> Function<Array<Int>,Array<Int>> f -> Array<Int> 
    override func iterator -> Iterator<Int> 
    func contains: (Int elem)  -> Boolean 
    func notContains: (Int elem)  -> Boolean 
    func containsArray: (Array<Int> other)  -> Boolean 
    func indexOf: (Int elem)  -> Int 
    override func prototype -> Array<Int> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Int> 
    func sortDescending -> Array<Int> 
    func sum -> Int 
    override func clone -> Array<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Int,  Boolean> 

    func init 
    func new -> Function<Int,Boolean> 
    override func prototype -> Function<Int,Boolean> 
    abstract func eval: Int  -> Boolean 
    func curry: (Int t1)  -> Function<Boolean> 
    override func clone -> Function<Int,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Int,  Int> 

    func init 
    func new -> Function<Int,Int> 
    override func prototype -> Function<Int,Int> 
    abstract func eval: Int  -> Int 
    func curry: (Int t1)  -> Function<Int> 
    func |> Function<Int,Int> f -> Function<Int,Int> 
    func nilReturn -> Function<Int,Nil> 
    override func clone -> Function<Int,Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Int>,  Array<Int>> 

    func init 
    func new -> Function<Array<Int>,Array<Int>> 
    override func prototype -> Function<Array<Int>,Array<Int>> 
    abstract func eval: Array<Int>  -> Array<Int> 
    func curry: (Array<Int> t1)  -> Function<Array<Int>> 
    func |> Function<Array<Int>,Array<Int>> f -> Function<Array<Int>,Array<Int>> 
    func nilReturn -> Function<Array<Int>,Nil> 
    override func clone -> Function<Array<Int>,Array<Int>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Int>,  Interval<Int>> 

    func init 
    func new -> Function<Interval<Int>,Interval<Int>> 
    override func prototype -> Function<Interval<Int>,Interval<Int>> 
    abstract func eval: Interval<Int>  -> Interval<Int> 
    func curry: (Interval<Int> t1)  -> Function<Interval<Int>> 
    func |> Function<Interval<Int>,Interval<Int>> f -> Function<Interval<Int>,Interval<Int>> 
    func nilReturn -> Function<Interval<Int>,Nil> 
    override func clone -> Function<Interval<Int>,Interval<Int>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Int,  Int,  Int> 

    func init 
    func new -> Function<Int,Int,Int> 
    override func prototype -> Function<Int,Int,Int> 
    abstract func eval: (Int, Int)  -> Int 
    func curry: (Int t1)  -> Function<Int,Int> 
    func curry: (Int t1, Int t2)  -> Function<Int> 
    override func clone -> Function<Int,Int,Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object InjectObject< Int> extends Function<Int, Nil>

    func init 
    override abstract func eval: Int  
    abstract func result -> Int 
    override func prototype -> InjectObject<Int> 
    override func clone -> InjectObject<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< first,  Int,  last,  Int> 

    func init: (Int g1, Int g2)  
    func new: (Int p0, Int p1)  -> Tuple<first,Int,last,Int> 
    override func prototype -> Tuple<first,Int,last,Int> 
    func first: (Int g1) 
        last: (Int g2)  -> Tuple<first,Int,last,Int> 
    func first -> Int 
    func first: (Int other)  
    func last -> Int 
    func last: (Int other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<first,Int,last,Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, Any>,  Boolean> 

    func init 
    func new -> Function<Tuple<key,String,value,Any>,Boolean> 
    override func prototype -> Function<Tuple<key,String,value,Any>,Boolean> 
    abstract func eval: Tuple<key,String,value,Any>  -> Boolean 
    func curry: (Tuple<key,String,value,Any> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<key,String,value,Any>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, Any>,  Tuple<key, String, value, Any>> 

    func init 
    func new -> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> 
    override func prototype -> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> 
    abstract func eval: Tuple<key,String,value,Any>  -> Tuple<key,String,value,Any> 
    func curry: (Tuple<key,String,value,Any> t1)  -> Function<Tuple<key,String,value,Any>> 
    func |> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> f -> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> 
    func nilReturn -> Function<Tuple<key,String,value,Any>,Nil> 
    override func clone -> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Any>>,  Array<Tuple<key, String, value, Any>>> 

    func init 
    func new -> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> 
    override func prototype -> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> 
    abstract func eval: Array<Tuple<key,String,value,Any>>  -> Array<Tuple<key,String,value,Any>> 
    func curry: (Array<Tuple<key,String,value,Any>> t1)  -> Function<Array<Tuple<key,String,value,Any>>> 
    func |> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> f -> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> 
    func nilReturn -> Function<Array<Tuple<key,String,value,Any>>,Nil> 
    override func clone -> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< slotName,  String,  key,  String,  value,  Any> 

    func init: (String g1, String g2, Any g3)  
    func new: (String p0, String p1, Any p2)  -> Tuple<slotName,String,key,String,value,Any> 
    override func prototype -> Tuple<slotName,String,key,String,value,Any> 
    func slotName: (String g1) 
        key: (String g2) 
        value: (Any g3)  -> Tuple<slotName,String,key,String,value,Any> 
    func slotName -> String 
    func slotName: (String other)  
    func key -> String 
    func key: (String other)  
    func value -> Any 
    func value: (Any other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<slotName,String,key,String,value,Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<slotName, String, key, String, value, Any>> 
          implements Iterable<Tuple<slotName, String, key, String, value, Any>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func new: (Int p0)  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<slotName,String,key,String,value,Any> elem)  
    func replace: (Int i, Tuple<slotName,String,key,String,value,Any> elem)  
    func addAll: (Iterable<Tuple<slotName,String,key,String,value,Any>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<slotName,String,key,String,value,Any> 
    func  [] at: (Int index) 
        put: (Tuple<slotName,String,key,String,value,Any> elem)  
    func last -> Tuple<slotName,String,key,String,value,Any> 
    func head -> Tuple<slotName,String,key,String,value,Any> 
    func tail -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func concat: (Array<Tuple<slotName,String,key,String,value,Any>> other)  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func size -> Int 
    override func foreach: (Function<Tuple<slotName,String,key,String,value,Any>,Nil> b)  
    func filter: (Function<Tuple<slotName,String,key,String,value,Any>,Boolean> f)  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func filter: (Function<Tuple<slotName,String,key,String,value,Any>,Boolean> f) 
        foreach: (Function<Tuple<slotName,String,key,String,value,Any>,Nil> b)  
    func map: (Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> f)  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func |> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> f -> Array<Tuple<slotName,String,key,String,value,Any>> 
    override func iterator -> Iterator<Tuple<slotName,String,key,String,value,Any>> 
    func contains: (Tuple<slotName,String,key,String,value,Any> elem)  -> Boolean 
    func notContains: (Tuple<slotName,String,key,String,value,Any> elem)  -> Boolean 
    func containsArray: (Array<Tuple<slotName,String,key,String,value,Any>> other)  -> Boolean 
    func indexOf: (Tuple<slotName,String,key,String,value,Any> elem)  -> Int 
    override func prototype -> Array<Tuple<slotName,String,key,String,value,Any>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<slotName,String,key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<slotName, String, key, String, value, Any>>
    func iterator -> Iterator<Tuple<slotName,String,key,String,value,Any>> 
    func foreach: Function<Tuple<slotName,String,key,String,value,Any>,Nil>  
end



public interface Iterator< Tuple<slotName, String, key, String, value, Any>>
    func hasNext -> Boolean 
    func next -> Tuple<slotName,String,key,String,value,Any> 
end



abstract open object Function< Tuple<slotName, String, key, String, value, Any>,  Nil> 

    func init 
    func new -> Function<Tuple<slotName,String,key,String,value,Any>,Nil> 
    override func prototype -> Function<Tuple<slotName,String,key,String,value,Any>,Nil> 
    abstract func eval: Tuple<slotName,String,key,String,value,Any>  -> Nil 
    func curry: (Tuple<slotName,String,key,String,value,Any> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<slotName,String,key,String,value,Any>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<slotName, String, key, String, value, Any>,  Boolean> 

    func init 
    func new -> Function<Tuple<slotName,String,key,String,value,Any>,Boolean> 
    override func prototype -> Function<Tuple<slotName,String,key,String,value,Any>,Boolean> 
    abstract func eval: Tuple<slotName,String,key,String,value,Any>  -> Boolean 
    func curry: (Tuple<slotName,String,key,String,value,Any> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<slotName,String,key,String,value,Any>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<slotName, String, key, String, value, Any>,  Tuple<slotName, String, key, String, value, Any>> 

    func init 
    func new -> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> 
    override func prototype -> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> 
    abstract func eval: Tuple<slotName,String,key,String,value,Any>  -> Tuple<slotName,String,key,String,value,Any> 
    func curry: (Tuple<slotName,String,key,String,value,Any> t1)  -> Function<Tuple<slotName,String,key,String,value,Any>> 
    func |> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> f -> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> 
    func nilReturn -> Function<Tuple<slotName,String,key,String,value,Any>,Nil> 
    override func clone -> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<slotName, String, key, String, value, Any>>,  Array<Tuple<slotName, String, key, String, value, Any>>> 

    func init 
    func new -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> 
    override func prototype -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> 
    abstract func eval: Array<Tuple<slotName,String,key,String,value,Any>>  -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func curry: (Array<Tuple<slotName,String,key,String,value,Any>> t1)  -> Function<Array<Tuple<slotName,String,key,String,value,Any>>> 
    func |> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> f -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> 
    func nilReturn -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Nil> 
    override func clone -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Any> 
          implements Iterable<Any>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Any> 
    func new: (Int p0)  -> Array<Any> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Any elem)  
    func replace: (Int i, Any elem)  
    func addAll: (Iterable<Any> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Any 
    func  [] at: (Int index) 
        put: (Any elem)  
    func last -> Any 
    func head -> Any 
    func tail -> Array<Any> 
    func slice: (Interval<Int> interval)  -> Array<Any> 
    func concat: (Array<Any> other)  -> Array<Any> 
    func size -> Int 
    override func foreach: (Function<Any,Nil> b)  
    func filter: (Function<Any,Boolean> f)  -> Array<Any> 
    func filter: (Function<Any,Boolean> f) 
        foreach: (Function<Any,Nil> b)  
    func map: (Function<Any,Any> f)  -> Array<Any> 
    func |> Function<Array<Any>,Array<Any>> f -> Array<Any> 
    override func iterator -> Iterator<Any> 
    func contains: (Any elem)  -> Boolean 
    func notContains: (Any elem)  -> Boolean 
    func containsArray: (Array<Any> other)  -> Boolean 
    func indexOf: (Any elem)  -> Int 
    override func prototype -> Array<Any> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Any>
    func iterator -> Iterator<Any> 
    func foreach: Function<Any,Nil>  
end



public interface Iterator< Any>
    func hasNext -> Boolean 
    func next -> Any 
end



abstract open object Function< Any,  Nil> 

    func init 
    func new -> Function<Any,Nil> 
    override func prototype -> Function<Any,Nil> 
    abstract func eval: Any  -> Nil 
    func curry: (Any t1)  -> Function<Nil> 
    override func clone -> Function<Any,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Any,  Boolean> 

    func init 
    func new -> Function<Any,Boolean> 
    override func prototype -> Function<Any,Boolean> 
    abstract func eval: Any  -> Boolean 
    func curry: (Any t1)  -> Function<Boolean> 
    override func clone -> Function<Any,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Any,  Any> 

    func init 
    func new -> Function<Any,Any> 
    override func prototype -> Function<Any,Any> 
    abstract func eval: Any  -> Any 
    func curry: (Any t1)  -> Function<Any> 
    func |> Function<Any,Any> f -> Function<Any,Any> 
    func nilReturn -> Function<Any,Nil> 
    override func clone -> Function<Any,Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Any>,  Array<Any>> 

    func init 
    func new -> Function<Array<Any>,Array<Any>> 
    override func prototype -> Function<Array<Any>,Array<Any>> 
    abstract func eval: Array<Any>  -> Array<Any> 
    func curry: (Array<Any> t1)  -> Function<Array<Any>> 
    func |> Function<Array<Any>,Array<Any>> f -> Function<Array<Any>,Array<Any>> 
    func nilReturn -> Function<Array<Any>,Nil> 
    override func clone -> Function<Array<Any>,Array<Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Dyn> 
          implements Iterable<Dyn>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Dyn> 
    func new: (Int p0)  -> Array<Dyn> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Dyn elem)  
    func replace: (Int i, Dyn elem)  
    func addAll: (Iterable<Dyn> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Dyn 
    func  [] at: (Int index) 
        put: (Dyn elem)  
    func last -> Dyn 
    func head -> Dyn 
    func tail -> Array<Dyn> 
    func slice: (Interval<Int> interval)  -> Array<Dyn> 
    func concat: (Array<Dyn> other)  -> Array<Dyn> 
    func size -> Int 
    override func foreach: (Function<Dyn,Nil> b)  
    func filter: (Function<Dyn,Boolean> f)  -> Array<Dyn> 
    func filter: (Function<Dyn,Boolean> f) 
        foreach: (Function<Dyn,Nil> b)  
    func map: (Function<Dyn,Dyn> f)  -> Array<Dyn> 
    func |> Function<Array<Dyn>,Array<Dyn>> f -> Array<Dyn> 
    override func iterator -> Iterator<Dyn> 
    func contains: (Dyn elem)  -> Boolean 
    func notContains: (Dyn elem)  -> Boolean 
    func containsArray: (Array<Dyn> other)  -> Boolean 
    func indexOf: (Dyn elem)  -> Int 
    override func prototype -> Array<Dyn> 
    override func hashCode -> Int 
    override func clone -> Array<Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Dyn>
    func iterator -> Iterator<Dyn> 
    func foreach: Function<Dyn,Nil>  
end



public interface Iterator< Dyn>
    func hasNext -> Boolean 
    func next -> Dyn 
end



abstract open object Function< Dyn,  Nil> 

    func init 
    func new -> Function<Dyn,Nil> 
    override func prototype -> Function<Dyn,Nil> 
    abstract func eval: Dyn  -> Nil 
    func curry: (Dyn t1)  -> Function<Nil> 
    override func clone -> Function<Dyn,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Boolean> 

    func init 
    func new -> Function<Dyn,Boolean> 
    override func prototype -> Function<Dyn,Boolean> 
    abstract func eval: Dyn  -> Boolean 
    func curry: (Dyn t1)  -> Function<Boolean> 
    override func clone -> Function<Dyn,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn> 
    abstract func eval: Dyn  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn> 
    func |> Function<Dyn,Dyn> f -> Function<Dyn,Dyn> 
    func nilReturn -> Function<Dyn,Nil> 
    override func clone -> Function<Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Dyn>,  Array<Dyn>> 

    func init 
    func new -> Function<Array<Dyn>,Array<Dyn>> 
    override func prototype -> Function<Array<Dyn>,Array<Dyn>> 
    abstract func eval: Array<Dyn>  -> Array<Dyn> 
    func curry: (Array<Dyn> t1)  -> Function<Array<Dyn>> 
    func |> Function<Array<Dyn>,Array<Dyn>> f -> Function<Array<Dyn>,Array<Dyn>> 
    func nilReturn -> Function<Array<Dyn>,Nil> 
    override func clone -> Function<Array<Dyn>,Array<Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Array<Dyn>> 
          implements Iterable<Array<Dyn>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Array<Dyn>> 
    func new: (Int p0)  -> Array<Array<Dyn>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Array<Dyn> elem)  
    func replace: (Int i, Array<Dyn> elem)  
    func addAll: (Iterable<Array<Dyn>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Array<Dyn> 
    func  [] at: (Int index) 
        put: (Array<Dyn> elem)  
    func last -> Array<Dyn> 
    func head -> Array<Dyn> 
    func tail -> Array<Array<Dyn>> 
    func slice: (Interval<Int> interval)  -> Array<Array<Dyn>> 
    func concat: (Array<Array<Dyn>> other)  -> Array<Array<Dyn>> 
    func size -> Int 
    override func foreach: (Function<Array<Dyn>,Nil> b)  
    func filter: (Function<Array<Dyn>,Boolean> f)  -> Array<Array<Dyn>> 
    func filter: (Function<Array<Dyn>,Boolean> f) 
        foreach: (Function<Array<Dyn>,Nil> b)  
    func map: (Function<Array<Dyn>,Array<Dyn>> f)  -> Array<Array<Dyn>> 
    func |> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> f -> Array<Array<Dyn>> 
    override func iterator -> Iterator<Array<Dyn>> 
    func contains: (Array<Dyn> elem)  -> Boolean 
    func notContains: (Array<Dyn> elem)  -> Boolean 
    func containsArray: (Array<Array<Dyn>> other)  -> Boolean 
    func indexOf: (Array<Dyn> elem)  -> Int 
    override func prototype -> Array<Array<Dyn>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Array<Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Array<Dyn>>
    func iterator -> Iterator<Array<Dyn>> 
    func foreach: Function<Array<Dyn>,Nil>  
end



public interface Iterator< Array<Dyn>>
    func hasNext -> Boolean 
    func next -> Array<Dyn> 
end



abstract open object Function< Array<Dyn>,  Nil> 

    func init 
    func new -> Function<Array<Dyn>,Nil> 
    override func prototype -> Function<Array<Dyn>,Nil> 
    abstract func eval: Array<Dyn>  -> Nil 
    func curry: (Array<Dyn> t1)  -> Function<Nil> 
    override func clone -> Function<Array<Dyn>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Dyn>,  Boolean> 

    func init 
    func new -> Function<Array<Dyn>,Boolean> 
    override func prototype -> Function<Array<Dyn>,Boolean> 
    abstract func eval: Array<Dyn>  -> Boolean 
    func curry: (Array<Dyn> t1)  -> Function<Boolean> 
    override func clone -> Function<Array<Dyn>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Array<Dyn>>,  Array<Array<Dyn>>> 

    func init 
    func new -> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> 
    override func prototype -> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> 
    abstract func eval: Array<Array<Dyn>>  -> Array<Array<Dyn>> 
    func curry: (Array<Array<Dyn>> t1)  -> Function<Array<Array<Dyn>>> 
    func |> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> f -> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> 
    func nilReturn -> Function<Array<Array<Dyn>>,Nil> 
    override func clone -> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject#afterResTypes 
object Array< String> 
          implements Iterable<String>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<String> 
    func new: (Int p0)  -> Array<String> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (String elem)  
    func replace: (Int i, String elem)  
    func addAll: (Iterable<String> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> String 
    func  [] at: (Int index) 
        put: (String elem)  
    func last -> String 
    func head -> String 
    func tail -> Array<String> 
    func slice: (Interval<Int> interval)  -> Array<String> 
    func concat: (Array<String> other)  -> Array<String> 
    func size -> Int 
    override func foreach: (Function<String,Nil> b)  
    func filter: (Function<String,Boolean> f)  -> Array<String> 
    func filter: (Function<String,Boolean> f) 
        foreach: (Function<String,Nil> b)  
    func map: (Function<String,String> f)  -> Array<String> 
    func |> Function<Array<String>,Array<String>> f -> Array<String> 
    override func iterator -> Iterator<String> 
    func contains: (String elem)  -> Boolean 
    func notContains: (String elem)  -> Boolean 
    func containsArray: (Array<String> other)  -> Boolean 
    func indexOf: (String elem)  -> Int 
    override func prototype -> Array<String> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<String> 
    func sortDescending -> Array<String> 
    func join -> String 
    func join: (String between)  -> String 
    override func clone -> Array<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< String>
    func iterator -> Iterator<String> 
    func foreach: Function<String,Nil>  
end



public interface Iterator< String>
    func hasNext -> Boolean 
    func next -> String 
end



abstract open object Function< String,  Nil> 

    func init 
    func new -> Function<String,Nil> 
    override func prototype -> Function<String,Nil> 
    abstract func eval: String  -> Nil 
    func curry: (String t1)  -> Function<Nil> 
    override func clone -> Function<String,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< String,  Boolean> 

    func init 
    func new -> Function<String,Boolean> 
    override func prototype -> Function<String,Boolean> 
    abstract func eval: String  -> Boolean 
    func curry: (String t1)  -> Function<Boolean> 
    override func clone -> Function<String,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< String,  String> 

    func init 
    func new -> Function<String,String> 
    override func prototype -> Function<String,String> 
    abstract func eval: String  -> String 
    func curry: (String t1)  -> Function<String> 
    func |> Function<String,String> f -> Function<String,String> 
    func nilReturn -> Function<String,Nil> 
    override func clone -> Function<String,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<String>,  Array<String>> 

    func init 
    func new -> Function<Array<String>,Array<String>> 
    override func prototype -> Function<Array<String>,Array<String>> 
    abstract func eval: Array<String>  -> Array<String> 
    func curry: (Array<String> t1)  -> Function<Array<String>> 
    func |> Function<Array<String>,Array<String>> f -> Function<Array<String>,Array<String>> 
    func nilReturn -> Function<Array<String>,Nil> 
    override func clone -> Function<Array<String>,Array<String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Boolean> 
          implements Iterable<Boolean>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Boolean> 
    func new: (Int p0)  -> Array<Boolean> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Boolean elem)  
    func replace: (Int i, Boolean elem)  
    func addAll: (Iterable<Boolean> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Boolean 
    func  [] at: (Int index) 
        put: (Boolean elem)  
    func last -> Boolean 
    func head -> Boolean 
    func tail -> Array<Boolean> 
    func slice: (Interval<Int> interval)  -> Array<Boolean> 
    func concat: (Array<Boolean> other)  -> Array<Boolean> 
    func size -> Int 
    override func foreach: (Function<Boolean,Nil> b)  
    func filter: (Function<Boolean,Boolean> f)  -> Array<Boolean> 
    func filter: (Function<Boolean,Boolean> f) 
        foreach: (Function<Boolean,Nil> b)  
    func map: (Function<Boolean,Boolean> f)  -> Array<Boolean> 
    func |> Function<Array<Boolean>,Array<Boolean>> f -> Array<Boolean> 
    override func iterator -> Iterator<Boolean> 
    func contains: (Boolean elem)  -> Boolean 
    func notContains: (Boolean elem)  -> Boolean 
    func containsArray: (Array<Boolean> other)  -> Boolean 
    func indexOf: (Boolean elem)  -> Int 
    override func prototype -> Array<Boolean> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Boolean>
    func iterator -> Iterator<Boolean> 
    func foreach: Function<Boolean,Nil>  
end



public interface Iterator< Boolean>
    func hasNext -> Boolean 
    func next -> Boolean 
end



abstract open object Function< Boolean,  Nil> 

    func init 
    func new -> Function<Boolean,Nil> 
    override func prototype -> Function<Boolean,Nil> 
    abstract func eval: Boolean  -> Nil 
    func curry: (Boolean t1)  -> Function<Nil> 
    override func clone -> Function<Boolean,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Boolean,  Boolean> 

    func init 
    func new -> Function<Boolean,Boolean> 
    override func prototype -> Function<Boolean,Boolean> 
    abstract func eval: Boolean  -> Boolean 
    func curry: (Boolean t1)  -> Function<Boolean> 
    func |> Function<Boolean,Boolean> f -> Function<Boolean,Boolean> 
    func nilReturn -> Function<Boolean,Nil> 
    override func clone -> Function<Boolean,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Boolean>,  Array<Boolean>> 

    func init 
    func new -> Function<Array<Boolean>,Array<Boolean>> 
    override func prototype -> Function<Array<Boolean>,Array<Boolean>> 
    abstract func eval: Array<Boolean>  -> Array<Boolean> 
    func curry: (Array<Boolean> t1)  -> Function<Array<Boolean>> 
    func |> Function<Array<Boolean>,Array<Boolean>> f -> Function<Array<Boolean>,Array<Boolean>> 
    func nilReturn -> Function<Array<Boolean>,Nil> 
    override func clone -> Function<Array<Boolean>,Array<Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Char> 
          implements Iterable<Char>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Char> 
    func new: (Int p0)  -> Array<Char> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Char elem)  
    func replace: (Int i, Char elem)  
    func addAll: (Iterable<Char> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Char 
    func  [] at: (Int index) 
        put: (Char elem)  
    func last -> Char 
    func head -> Char 
    func tail -> Array<Char> 
    func slice: (Interval<Int> interval)  -> Array<Char> 
    func concat: (Array<Char> other)  -> Array<Char> 
    func size -> Int 
    override func foreach: (Function<Char,Nil> b)  
    func filter: (Function<Char,Boolean> f)  -> Array<Char> 
    func filter: (Function<Char,Boolean> f) 
        foreach: (Function<Char,Nil> b)  
    func map: (Function<Char,Char> f)  -> Array<Char> 
    func |> Function<Array<Char>,Array<Char>> f -> Array<Char> 
    override func iterator -> Iterator<Char> 
    func contains: (Char elem)  -> Boolean 
    func notContains: (Char elem)  -> Boolean 
    func containsArray: (Array<Char> other)  -> Boolean 
    func indexOf: (Char elem)  -> Int 
    override func prototype -> Array<Char> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Char> 
    func sortDescending -> Array<Char> 
    override func clone -> Array<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Char>
    func iterator -> Iterator<Char> 
    func foreach: Function<Char,Nil>  
end



public interface Iterator< Char>
    func hasNext -> Boolean 
    func next -> Char 
end



abstract open object Function< Char,  Nil> 

    func init 
    func new -> Function<Char,Nil> 
    override func prototype -> Function<Char,Nil> 
    abstract func eval: Char  -> Nil 
    func curry: (Char t1)  -> Function<Nil> 
    override func clone -> Function<Char,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Char,  Boolean> 

    func init 
    func new -> Function<Char,Boolean> 
    override func prototype -> Function<Char,Boolean> 
    abstract func eval: Char  -> Boolean 
    func curry: (Char t1)  -> Function<Boolean> 
    override func clone -> Function<Char,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Char,  Char> 

    func init 
    func new -> Function<Char,Char> 
    override func prototype -> Function<Char,Char> 
    abstract func eval: Char  -> Char 
    func curry: (Char t1)  -> Function<Char> 
    func |> Function<Char,Char> f -> Function<Char,Char> 
    func nilReturn -> Function<Char,Nil> 
    override func clone -> Function<Char,Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Char>,  Array<Char>> 

    func init 
    func new -> Function<Array<Char>,Array<Char>> 
    override func prototype -> Function<Array<Char>,Array<Char>> 
    abstract func eval: Array<Char>  -> Array<Char> 
    func curry: (Array<Char> t1)  -> Function<Array<Char>> 
    func |> Function<Array<Char>,Array<Char>> f -> Function<Array<Char>,Array<Char>> 
    func nilReturn -> Function<Array<Char>,Nil> 
    override func clone -> Function<Array<Char>,Array<Char>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Byte> 
          implements Iterable<Byte>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Byte> 
    func new: (Int p0)  -> Array<Byte> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Byte elem)  
    func replace: (Int i, Byte elem)  
    func addAll: (Iterable<Byte> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Byte 
    func  [] at: (Int index) 
        put: (Byte elem)  
    func last -> Byte 
    func head -> Byte 
    func tail -> Array<Byte> 
    func slice: (Interval<Int> interval)  -> Array<Byte> 
    func concat: (Array<Byte> other)  -> Array<Byte> 
    func size -> Int 
    override func foreach: (Function<Byte,Nil> b)  
    func filter: (Function<Byte,Boolean> f)  -> Array<Byte> 
    func filter: (Function<Byte,Boolean> f) 
        foreach: (Function<Byte,Nil> b)  
    func map: (Function<Byte,Byte> f)  -> Array<Byte> 
    func |> Function<Array<Byte>,Array<Byte>> f -> Array<Byte> 
    override func iterator -> Iterator<Byte> 
    func contains: (Byte elem)  -> Boolean 
    func notContains: (Byte elem)  -> Boolean 
    func containsArray: (Array<Byte> other)  -> Boolean 
    func indexOf: (Byte elem)  -> Int 
    override func prototype -> Array<Byte> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Byte> 
    func sortDescending -> Array<Byte> 
    override func clone -> Array<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Byte>
    func iterator -> Iterator<Byte> 
    func foreach: Function<Byte,Nil>  
end



public interface Iterator< Byte>
    func hasNext -> Boolean 
    func next -> Byte 
end



abstract open object Function< Byte,  Nil> 

    func init 
    func new -> Function<Byte,Nil> 
    override func prototype -> Function<Byte,Nil> 
    abstract func eval: Byte  -> Nil 
    func curry: (Byte t1)  -> Function<Nil> 
    override func clone -> Function<Byte,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Byte,  Boolean> 

    func init 
    func new -> Function<Byte,Boolean> 
    override func prototype -> Function<Byte,Boolean> 
    abstract func eval: Byte  -> Boolean 
    func curry: (Byte t1)  -> Function<Boolean> 
    override func clone -> Function<Byte,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Byte,  Byte> 

    func init 
    func new -> Function<Byte,Byte> 
    override func prototype -> Function<Byte,Byte> 
    abstract func eval: Byte  -> Byte 
    func curry: (Byte t1)  -> Function<Byte> 
    func |> Function<Byte,Byte> f -> Function<Byte,Byte> 
    func nilReturn -> Function<Byte,Nil> 
    override func clone -> Function<Byte,Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Byte>,  Array<Byte>> 

    func init 
    func new -> Function<Array<Byte>,Array<Byte>> 
    override func prototype -> Function<Array<Byte>,Array<Byte>> 
    abstract func eval: Array<Byte>  -> Array<Byte> 
    func curry: (Array<Byte> t1)  -> Function<Array<Byte>> 
    func |> Function<Array<Byte>,Array<Byte>> f -> Function<Array<Byte>,Array<Byte>> 
    func nilReturn -> Function<Array<Byte>,Nil> 
    override func clone -> Function<Array<Byte>,Array<Byte>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Short> 
          implements Iterable<Short>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Short> 
    func new: (Int p0)  -> Array<Short> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Short elem)  
    func replace: (Int i, Short elem)  
    func addAll: (Iterable<Short> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Short 
    func  [] at: (Int index) 
        put: (Short elem)  
    func last -> Short 
    func head -> Short 
    func tail -> Array<Short> 
    func slice: (Interval<Int> interval)  -> Array<Short> 
    func concat: (Array<Short> other)  -> Array<Short> 
    func size -> Int 
    override func foreach: (Function<Short,Nil> b)  
    func filter: (Function<Short,Boolean> f)  -> Array<Short> 
    func filter: (Function<Short,Boolean> f) 
        foreach: (Function<Short,Nil> b)  
    func map: (Function<Short,Short> f)  -> Array<Short> 
    func |> Function<Array<Short>,Array<Short>> f -> Array<Short> 
    override func iterator -> Iterator<Short> 
    func contains: (Short elem)  -> Boolean 
    func notContains: (Short elem)  -> Boolean 
    func containsArray: (Array<Short> other)  -> Boolean 
    func indexOf: (Short elem)  -> Int 
    override func prototype -> Array<Short> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Short> 
    func sortDescending -> Array<Short> 
    override func clone -> Array<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Short>
    func iterator -> Iterator<Short> 
    func foreach: Function<Short,Nil>  
end



public interface Iterator< Short>
    func hasNext -> Boolean 
    func next -> Short 
end



abstract open object Function< Short,  Nil> 

    func init 
    func new -> Function<Short,Nil> 
    override func prototype -> Function<Short,Nil> 
    abstract func eval: Short  -> Nil 
    func curry: (Short t1)  -> Function<Nil> 
    override func clone -> Function<Short,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Short,  Boolean> 

    func init 
    func new -> Function<Short,Boolean> 
    override func prototype -> Function<Short,Boolean> 
    abstract func eval: Short  -> Boolean 
    func curry: (Short t1)  -> Function<Boolean> 
    override func clone -> Function<Short,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Short,  Short> 

    func init 
    func new -> Function<Short,Short> 
    override func prototype -> Function<Short,Short> 
    abstract func eval: Short  -> Short 
    func curry: (Short t1)  -> Function<Short> 
    func |> Function<Short,Short> f -> Function<Short,Short> 
    func nilReturn -> Function<Short,Nil> 
    override func clone -> Function<Short,Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Short>,  Array<Short>> 

    func init 
    func new -> Function<Array<Short>,Array<Short>> 
    override func prototype -> Function<Array<Short>,Array<Short>> 
    abstract func eval: Array<Short>  -> Array<Short> 
    func curry: (Array<Short> t1)  -> Function<Array<Short>> 
    func |> Function<Array<Short>,Array<Short>> f -> Function<Array<Short>,Array<Short>> 
    func nilReturn -> Function<Array<Short>,Nil> 
    override func clone -> Function<Array<Short>,Array<Short>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Long> 
          implements Iterable<Long>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Long> 
    func new: (Int p0)  -> Array<Long> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Long elem)  
    func replace: (Int i, Long elem)  
    func addAll: (Iterable<Long> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Long 
    func  [] at: (Int index) 
        put: (Long elem)  
    func last -> Long 
    func head -> Long 
    func tail -> Array<Long> 
    func slice: (Interval<Int> interval)  -> Array<Long> 
    func concat: (Array<Long> other)  -> Array<Long> 
    func size -> Int 
    override func foreach: (Function<Long,Nil> b)  
    func filter: (Function<Long,Boolean> f)  -> Array<Long> 
    func filter: (Function<Long,Boolean> f) 
        foreach: (Function<Long,Nil> b)  
    func map: (Function<Long,Long> f)  -> Array<Long> 
    func |> Function<Array<Long>,Array<Long>> f -> Array<Long> 
    override func iterator -> Iterator<Long> 
    func contains: (Long elem)  -> Boolean 
    func notContains: (Long elem)  -> Boolean 
    func containsArray: (Array<Long> other)  -> Boolean 
    func indexOf: (Long elem)  -> Int 
    override func prototype -> Array<Long> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Long> 
    func sortDescending -> Array<Long> 
    override func clone -> Array<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Long>
    func iterator -> Iterator<Long> 
    func foreach: Function<Long,Nil>  
end



public interface Iterator< Long>
    func hasNext -> Boolean 
    func next -> Long 
end



abstract open object Function< Long,  Nil> 

    func init 
    func new -> Function<Long,Nil> 
    override func prototype -> Function<Long,Nil> 
    abstract func eval: Long  -> Nil 
    func curry: (Long t1)  -> Function<Nil> 
    override func clone -> Function<Long,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Long,  Boolean> 

    func init 
    func new -> Function<Long,Boolean> 
    override func prototype -> Function<Long,Boolean> 
    abstract func eval: Long  -> Boolean 
    func curry: (Long t1)  -> Function<Boolean> 
    override func clone -> Function<Long,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Long,  Long> 

    func init 
    func new -> Function<Long,Long> 
    override func prototype -> Function<Long,Long> 
    abstract func eval: Long  -> Long 
    func curry: (Long t1)  -> Function<Long> 
    func |> Function<Long,Long> f -> Function<Long,Long> 
    func nilReturn -> Function<Long,Nil> 
    override func clone -> Function<Long,Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Long>,  Array<Long>> 

    func init 
    func new -> Function<Array<Long>,Array<Long>> 
    override func prototype -> Function<Array<Long>,Array<Long>> 
    abstract func eval: Array<Long>  -> Array<Long> 
    func curry: (Array<Long> t1)  -> Function<Array<Long>> 
    func |> Function<Array<Long>,Array<Long>> f -> Function<Array<Long>,Array<Long>> 
    func nilReturn -> Function<Array<Long>,Nil> 
    override func clone -> Function<Array<Long>,Array<Long>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Float> 
          implements Iterable<Float>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Float> 
    func new: (Int p0)  -> Array<Float> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Float elem)  
    func replace: (Int i, Float elem)  
    func addAll: (Iterable<Float> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Float 
    func  [] at: (Int index) 
        put: (Float elem)  
    func last -> Float 
    func head -> Float 
    func tail -> Array<Float> 
    func slice: (Interval<Int> interval)  -> Array<Float> 
    func concat: (Array<Float> other)  -> Array<Float> 
    func size -> Int 
    override func foreach: (Function<Float,Nil> b)  
    func filter: (Function<Float,Boolean> f)  -> Array<Float> 
    func filter: (Function<Float,Boolean> f) 
        foreach: (Function<Float,Nil> b)  
    func map: (Function<Float,Float> f)  -> Array<Float> 
    func |> Function<Array<Float>,Array<Float>> f -> Array<Float> 
    override func iterator -> Iterator<Float> 
    func contains: (Float elem)  -> Boolean 
    func notContains: (Float elem)  -> Boolean 
    func containsArray: (Array<Float> other)  -> Boolean 
    func indexOf: (Float elem)  -> Int 
    override func prototype -> Array<Float> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Float> 
    func sortDescending -> Array<Float> 
    override func clone -> Array<Float> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Float>
    func iterator -> Iterator<Float> 
    func foreach: Function<Float,Nil>  
end



public interface Iterator< Float>
    func hasNext -> Boolean 
    func next -> Float 
end



abstract open object Function< Float,  Nil> 

    func init 
    func new -> Function<Float,Nil> 
    override func prototype -> Function<Float,Nil> 
    abstract func eval: Float  -> Nil 
    func curry: (Float t1)  -> Function<Nil> 
    override func clone -> Function<Float,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Float,  Boolean> 

    func init 
    func new -> Function<Float,Boolean> 
    override func prototype -> Function<Float,Boolean> 
    abstract func eval: Float  -> Boolean 
    func curry: (Float t1)  -> Function<Boolean> 
    override func clone -> Function<Float,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Float,  Float> 

    func init 
    func new -> Function<Float,Float> 
    override func prototype -> Function<Float,Float> 
    abstract func eval: Float  -> Float 
    func curry: (Float t1)  -> Function<Float> 
    func |> Function<Float,Float> f -> Function<Float,Float> 
    func nilReturn -> Function<Float,Nil> 
    override func clone -> Function<Float,Float> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Float>,  Array<Float>> 

    func init 
    func new -> Function<Array<Float>,Array<Float>> 
    override func prototype -> Function<Array<Float>,Array<Float>> 
    abstract func eval: Array<Float>  -> Array<Float> 
    func curry: (Array<Float> t1)  -> Function<Array<Float>> 
    func |> Function<Array<Float>,Array<Float>> f -> Function<Array<Float>,Array<Float>> 
    func nilReturn -> Function<Array<Float>,Nil> 
    override func clone -> Function<Array<Float>,Array<Float>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Double> 
          implements Iterable<Double>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Double> 
    func new: (Int p0)  -> Array<Double> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Double elem)  
    func replace: (Int i, Double elem)  
    func addAll: (Iterable<Double> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Double 
    func  [] at: (Int index) 
        put: (Double elem)  
    func last -> Double 
    func head -> Double 
    func tail -> Array<Double> 
    func slice: (Interval<Int> interval)  -> Array<Double> 
    func concat: (Array<Double> other)  -> Array<Double> 
    func size -> Int 
    override func foreach: (Function<Double,Nil> b)  
    func filter: (Function<Double,Boolean> f)  -> Array<Double> 
    func filter: (Function<Double,Boolean> f) 
        foreach: (Function<Double,Nil> b)  
    func map: (Function<Double,Double> f)  -> Array<Double> 
    func |> Function<Array<Double>,Array<Double>> f -> Array<Double> 
    override func iterator -> Iterator<Double> 
    func contains: (Double elem)  -> Boolean 
    func notContains: (Double elem)  -> Boolean 
    func containsArray: (Array<Double> other)  -> Boolean 
    func indexOf: (Double elem)  -> Int 
    override func prototype -> Array<Double> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    func sort -> Array<Double> 
    func sortDescending -> Array<Double> 
    override func clone -> Array<Double> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Double>
    func iterator -> Iterator<Double> 
    func foreach: Function<Double,Nil>  
end



public interface Iterator< Double>
    func hasNext -> Boolean 
    func next -> Double 
end



abstract open object Function< Double,  Nil> 

    func init 
    func new -> Function<Double,Nil> 
    override func prototype -> Function<Double,Nil> 
    abstract func eval: Double  -> Nil 
    func curry: (Double t1)  -> Function<Nil> 
    override func clone -> Function<Double,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Double,  Boolean> 

    func init 
    func new -> Function<Double,Boolean> 
    override func prototype -> Function<Double,Boolean> 
    abstract func eval: Double  -> Boolean 
    func curry: (Double t1)  -> Function<Boolean> 
    override func clone -> Function<Double,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Double,  Double> 

    func init 
    func new -> Function<Double,Double> 
    override func prototype -> Function<Double,Double> 
    abstract func eval: Double  -> Double 
    func curry: (Double t1)  -> Function<Double> 
    func |> Function<Double,Double> f -> Function<Double,Double> 
    func nilReturn -> Function<Double,Nil> 
    override func clone -> Function<Double,Double> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Double>,  Array<Double>> 

    func init 
    func new -> Function<Array<Double>,Array<Double>> 
    override func prototype -> Function<Array<Double>,Array<Double>> 
    abstract func eval: Array<Double>  -> Array<Double> 
    func curry: (Array<Double> t1)  -> Function<Array<Double>> 
    func |> Function<Array<Double>,Array<Double>> f -> Function<Array<Double>,Array<Double>> 
    func nilReturn -> Function<Array<Double>,Nil> 
    override func clone -> Function<Array<Double>,Array<Double>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Array<Dyn>> 

    func init: (Dyn g1, Array<Dyn> g2)  
    func new: (Dyn p0, Array<Dyn> p1)  -> Tuple<Dyn,Array<Dyn>> 
    override func prototype -> Tuple<Dyn,Array<Dyn>> 
    func f1: (Dyn g1) 
        f2: (Array<Dyn> g2)  -> Tuple<Dyn,Array<Dyn>> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Array<Dyn> 
    func f2: (Array<Dyn> other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Array<Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<Dyn, Array<Dyn>>> 
          implements Iterable<Tuple<Dyn, Array<Dyn>>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<Dyn,Array<Dyn>>> 
    func new: (Int p0)  -> Array<Tuple<Dyn,Array<Dyn>>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<Dyn,Array<Dyn>> elem)  
    func replace: (Int i, Tuple<Dyn,Array<Dyn>> elem)  
    func addAll: (Iterable<Tuple<Dyn,Array<Dyn>>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<Dyn,Array<Dyn>> 
    func  [] at: (Int index) 
        put: (Tuple<Dyn,Array<Dyn>> elem)  
    func last -> Tuple<Dyn,Array<Dyn>> 
    func head -> Tuple<Dyn,Array<Dyn>> 
    func tail -> Array<Tuple<Dyn,Array<Dyn>>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<Dyn,Array<Dyn>>> 
    func concat: (Array<Tuple<Dyn,Array<Dyn>>> other)  -> Array<Tuple<Dyn,Array<Dyn>>> 
    func size -> Int 
    override func foreach: (Function<Tuple<Dyn,Array<Dyn>>,Nil> b)  
    func filter: (Function<Tuple<Dyn,Array<Dyn>>,Boolean> f)  -> Array<Tuple<Dyn,Array<Dyn>>> 
    func filter: (Function<Tuple<Dyn,Array<Dyn>>,Boolean> f) 
        foreach: (Function<Tuple<Dyn,Array<Dyn>>,Nil> b)  
    func map: (Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> f)  -> Array<Tuple<Dyn,Array<Dyn>>> 
    func |> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> f -> Array<Tuple<Dyn,Array<Dyn>>> 
    override func iterator -> Iterator<Tuple<Dyn,Array<Dyn>>> 
    func contains: (Tuple<Dyn,Array<Dyn>> elem)  -> Boolean 
    func notContains: (Tuple<Dyn,Array<Dyn>> elem)  -> Boolean 
    func containsArray: (Array<Tuple<Dyn,Array<Dyn>>> other)  -> Boolean 
    func indexOf: (Tuple<Dyn,Array<Dyn>> elem)  -> Int 
    override func prototype -> Array<Tuple<Dyn,Array<Dyn>>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<Dyn,Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<Dyn, Array<Dyn>>>
    func iterator -> Iterator<Tuple<Dyn,Array<Dyn>>> 
    func foreach: Function<Tuple<Dyn,Array<Dyn>>,Nil>  
end



public interface Iterator< Tuple<Dyn, Array<Dyn>>>
    func hasNext -> Boolean 
    func next -> Tuple<Dyn,Array<Dyn>> 
end



abstract open object Function< Tuple<Dyn, Array<Dyn>>,  Nil> 

    func init 
    func new -> Function<Tuple<Dyn,Array<Dyn>>,Nil> 
    override func prototype -> Function<Tuple<Dyn,Array<Dyn>>,Nil> 
    abstract func eval: Tuple<Dyn,Array<Dyn>>  -> Nil 
    func curry: (Tuple<Dyn,Array<Dyn>> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<Dyn,Array<Dyn>>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Array<Dyn>>,  Boolean> 

    func init 
    func new -> Function<Tuple<Dyn,Array<Dyn>>,Boolean> 
    override func prototype -> Function<Tuple<Dyn,Array<Dyn>>,Boolean> 
    abstract func eval: Tuple<Dyn,Array<Dyn>>  -> Boolean 
    func curry: (Tuple<Dyn,Array<Dyn>> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<Dyn,Array<Dyn>>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Array<Dyn>>,  Tuple<Dyn, Array<Dyn>>> 

    func init 
    func new -> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> 
    override func prototype -> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> 
    abstract func eval: Tuple<Dyn,Array<Dyn>>  -> Tuple<Dyn,Array<Dyn>> 
    func curry: (Tuple<Dyn,Array<Dyn>> t1)  -> Function<Tuple<Dyn,Array<Dyn>>> 
    func |> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> f -> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> 
    func nilReturn -> Function<Tuple<Dyn,Array<Dyn>>,Nil> 
    override func clone -> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Array<Dyn>>>,  Array<Tuple<Dyn, Array<Dyn>>>> 

    func init 
    func new -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> 
    override func prototype -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> 
    abstract func eval: Array<Tuple<Dyn,Array<Dyn>>>  -> Array<Tuple<Dyn,Array<Dyn>>> 
    func curry: (Array<Tuple<Dyn,Array<Dyn>>> t1)  -> Function<Array<Tuple<Dyn,Array<Dyn>>>> 
    func |> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> f -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> 
    func nilReturn -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Nil> 
    override func clone -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< String,  Array<String>> 

    func init: (String g1, Array<String> g2)  
    func new: (String p0, Array<String> p1)  -> Tuple<String,Array<String>> 
    override func prototype -> Tuple<String,Array<String>> 
    func f1: (String g1) 
        f2: (Array<String> g2)  -> Tuple<String,Array<String>> 
    func f1 -> String 
    func f1: (String other)  
    func f2 -> Array<String> 
    func f2: (Array<String> other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<String,Array<String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<String, Array<String>>> 
          implements Iterable<Tuple<String, Array<String>>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<String,Array<String>>> 
    func new: (Int p0)  -> Array<Tuple<String,Array<String>>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<String,Array<String>> elem)  
    func replace: (Int i, Tuple<String,Array<String>> elem)  
    func addAll: (Iterable<Tuple<String,Array<String>>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<String,Array<String>> 
    func  [] at: (Int index) 
        put: (Tuple<String,Array<String>> elem)  
    func last -> Tuple<String,Array<String>> 
    func head -> Tuple<String,Array<String>> 
    func tail -> Array<Tuple<String,Array<String>>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<String,Array<String>>> 
    func concat: (Array<Tuple<String,Array<String>>> other)  -> Array<Tuple<String,Array<String>>> 
    func size -> Int 
    override func foreach: (Function<Tuple<String,Array<String>>,Nil> b)  
    func filter: (Function<Tuple<String,Array<String>>,Boolean> f)  -> Array<Tuple<String,Array<String>>> 
    func filter: (Function<Tuple<String,Array<String>>,Boolean> f) 
        foreach: (Function<Tuple<String,Array<String>>,Nil> b)  
    func map: (Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> f)  -> Array<Tuple<String,Array<String>>> 
    func |> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> f -> Array<Tuple<String,Array<String>>> 
    override func iterator -> Iterator<Tuple<String,Array<String>>> 
    func contains: (Tuple<String,Array<String>> elem)  -> Boolean 
    func notContains: (Tuple<String,Array<String>> elem)  -> Boolean 
    func containsArray: (Array<Tuple<String,Array<String>>> other)  -> Boolean 
    func indexOf: (Tuple<String,Array<String>> elem)  -> Int 
    override func prototype -> Array<Tuple<String,Array<String>>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<String,Array<String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<String, Array<String>>>
    func iterator -> Iterator<Tuple<String,Array<String>>> 
    func foreach: Function<Tuple<String,Array<String>>,Nil>  
end



public interface Iterator< Tuple<String, Array<String>>>
    func hasNext -> Boolean 
    func next -> Tuple<String,Array<String>> 
end



abstract open object Function< Tuple<String, Array<String>>,  Nil> 

    func init 
    func new -> Function<Tuple<String,Array<String>>,Nil> 
    override func prototype -> Function<Tuple<String,Array<String>>,Nil> 
    abstract func eval: Tuple<String,Array<String>>  -> Nil 
    func curry: (Tuple<String,Array<String>> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<String,Array<String>>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Array<String>>,  Boolean> 

    func init 
    func new -> Function<Tuple<String,Array<String>>,Boolean> 
    override func prototype -> Function<Tuple<String,Array<String>>,Boolean> 
    abstract func eval: Tuple<String,Array<String>>  -> Boolean 
    func curry: (Tuple<String,Array<String>> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<String,Array<String>>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Array<String>>,  Tuple<String, Array<String>>> 

    func init 
    func new -> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> 
    override func prototype -> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> 
    abstract func eval: Tuple<String,Array<String>>  -> Tuple<String,Array<String>> 
    func curry: (Tuple<String,Array<String>> t1)  -> Function<Tuple<String,Array<String>>> 
    func |> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> f -> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> 
    func nilReturn -> Function<Tuple<String,Array<String>>,Nil> 
    override func clone -> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Array<String>>>,  Array<Tuple<String, Array<String>>>> 

    func init 
    func new -> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> 
    override func prototype -> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> 
    abstract func eval: Array<Tuple<String,Array<String>>>  -> Array<Tuple<String,Array<String>>> 
    func curry: (Array<Tuple<String,Array<String>>> t1)  -> Function<Array<Tuple<String,Array<String>>>> 
    func |> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> f -> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> 
    func nilReturn -> Function<Array<Tuple<String,Array<String>>>,Nil> 
    override func clone -> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< String,  String> 

    func init: (String g1, String g2)  
    func new: (String p0, String p1)  -> Tuple<String,String> 
    override func prototype -> Tuple<String,String> 
    func f1: (String g1) 
        f2: (String g2)  -> Tuple<String,String> 
    func f1 -> String 
    func f1: (String other)  
    func f2 -> String 
    func f2: (String other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<String,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<String, String>> 
          implements Iterable<Tuple<String, String>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<String,String>> 
    func new: (Int p0)  -> Array<Tuple<String,String>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<String,String> elem)  
    func replace: (Int i, Tuple<String,String> elem)  
    func addAll: (Iterable<Tuple<String,String>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<String,String> 
    func  [] at: (Int index) 
        put: (Tuple<String,String> elem)  
    func last -> Tuple<String,String> 
    func head -> Tuple<String,String> 
    func tail -> Array<Tuple<String,String>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<String,String>> 
    func concat: (Array<Tuple<String,String>> other)  -> Array<Tuple<String,String>> 
    func size -> Int 
    override func foreach: (Function<Tuple<String,String>,Nil> b)  
    func filter: (Function<Tuple<String,String>,Boolean> f)  -> Array<Tuple<String,String>> 
    func filter: (Function<Tuple<String,String>,Boolean> f) 
        foreach: (Function<Tuple<String,String>,Nil> b)  
    func map: (Function<Tuple<String,String>,Tuple<String,String>> f)  -> Array<Tuple<String,String>> 
    func |> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> f -> Array<Tuple<String,String>> 
    override func iterator -> Iterator<Tuple<String,String>> 
    func contains: (Tuple<String,String> elem)  -> Boolean 
    func notContains: (Tuple<String,String> elem)  -> Boolean 
    func containsArray: (Array<Tuple<String,String>> other)  -> Boolean 
    func indexOf: (Tuple<String,String> elem)  -> Int 
    override func prototype -> Array<Tuple<String,String>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<String,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<String, String>>
    func iterator -> Iterator<Tuple<String,String>> 
    func foreach: Function<Tuple<String,String>,Nil>  
end



public interface Iterator< Tuple<String, String>>
    func hasNext -> Boolean 
    func next -> Tuple<String,String> 
end



abstract open object Function< Tuple<String, String>,  Nil> 

    func init 
    func new -> Function<Tuple<String,String>,Nil> 
    override func prototype -> Function<Tuple<String,String>,Nil> 
    abstract func eval: Tuple<String,String>  -> Nil 
    func curry: (Tuple<String,String> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<String,String>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String>,  Boolean> 

    func init 
    func new -> Function<Tuple<String,String>,Boolean> 
    override func prototype -> Function<Tuple<String,String>,Boolean> 
    abstract func eval: Tuple<String,String>  -> Boolean 
    func curry: (Tuple<String,String> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<String,String>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String>,  Tuple<String, String>> 

    func init 
    func new -> Function<Tuple<String,String>,Tuple<String,String>> 
    override func prototype -> Function<Tuple<String,String>,Tuple<String,String>> 
    abstract func eval: Tuple<String,String>  -> Tuple<String,String> 
    func curry: (Tuple<String,String> t1)  -> Function<Tuple<String,String>> 
    func |> Function<Tuple<String,String>,Tuple<String,String>> f -> Function<Tuple<String,String>,Tuple<String,String>> 
    func nilReturn -> Function<Tuple<String,String>,Nil> 
    override func clone -> Function<Tuple<String,String>,Tuple<String,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String>>,  Array<Tuple<String, String>>> 

    func init 
    func new -> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> 
    override func prototype -> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> 
    abstract func eval: Array<Tuple<String,String>>  -> Array<Tuple<String,String>> 
    func curry: (Array<Tuple<String,String>> t1)  -> Function<Array<Tuple<String,String>>> 
    func |> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> f -> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> 
    func nilReturn -> Function<Array<Tuple<String,String>>,Nil> 
    override func clone -> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< String,  String,  Boolean> 

    func init: (String g1, String g2, Boolean g3)  
    func new: (String p0, String p1, Boolean p2)  -> Tuple<String,String,Boolean> 
    override func prototype -> Tuple<String,String,Boolean> 
    func f1: (String g1) 
        f2: (String g2) 
        f3: (Boolean g3)  -> Tuple<String,String,Boolean> 
    func f1 -> String 
    func f1: (String other)  
    func f2 -> String 
    func f2: (String other)  
    func f3 -> Boolean 
    func f3: (Boolean other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<String,String,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<String, String, Boolean>> 
          implements Iterable<Tuple<String, String, Boolean>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<String,String,Boolean>> 
    func new: (Int p0)  -> Array<Tuple<String,String,Boolean>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<String,String,Boolean> elem)  
    func replace: (Int i, Tuple<String,String,Boolean> elem)  
    func addAll: (Iterable<Tuple<String,String,Boolean>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<String,String,Boolean> 
    func  [] at: (Int index) 
        put: (Tuple<String,String,Boolean> elem)  
    func last -> Tuple<String,String,Boolean> 
    func head -> Tuple<String,String,Boolean> 
    func tail -> Array<Tuple<String,String,Boolean>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<String,String,Boolean>> 
    func concat: (Array<Tuple<String,String,Boolean>> other)  -> Array<Tuple<String,String,Boolean>> 
    func size -> Int 
    override func foreach: (Function<Tuple<String,String,Boolean>,Nil> b)  
    func filter: (Function<Tuple<String,String,Boolean>,Boolean> f)  -> Array<Tuple<String,String,Boolean>> 
    func filter: (Function<Tuple<String,String,Boolean>,Boolean> f) 
        foreach: (Function<Tuple<String,String,Boolean>,Nil> b)  
    func map: (Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> f)  -> Array<Tuple<String,String,Boolean>> 
    func |> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> f -> Array<Tuple<String,String,Boolean>> 
    override func iterator -> Iterator<Tuple<String,String,Boolean>> 
    func contains: (Tuple<String,String,Boolean> elem)  -> Boolean 
    func notContains: (Tuple<String,String,Boolean> elem)  -> Boolean 
    func containsArray: (Array<Tuple<String,String,Boolean>> other)  -> Boolean 
    func indexOf: (Tuple<String,String,Boolean> elem)  -> Int 
    override func prototype -> Array<Tuple<String,String,Boolean>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<String,String,Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<String, String, Boolean>>
    func iterator -> Iterator<Tuple<String,String,Boolean>> 
    func foreach: Function<Tuple<String,String,Boolean>,Nil>  
end



public interface Iterator< Tuple<String, String, Boolean>>
    func hasNext -> Boolean 
    func next -> Tuple<String,String,Boolean> 
end



abstract open object Function< Tuple<String, String, Boolean>,  Nil> 

    func init 
    func new -> Function<Tuple<String,String,Boolean>,Nil> 
    override func prototype -> Function<Tuple<String,String,Boolean>,Nil> 
    abstract func eval: Tuple<String,String,Boolean>  -> Nil 
    func curry: (Tuple<String,String,Boolean> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<String,String,Boolean>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String, Boolean>,  Boolean> 

    func init 
    func new -> Function<Tuple<String,String,Boolean>,Boolean> 
    override func prototype -> Function<Tuple<String,String,Boolean>,Boolean> 
    abstract func eval: Tuple<String,String,Boolean>  -> Boolean 
    func curry: (Tuple<String,String,Boolean> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<String,String,Boolean>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String, Boolean>,  Tuple<String, String, Boolean>> 

    func init 
    func new -> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> 
    override func prototype -> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> 
    abstract func eval: Tuple<String,String,Boolean>  -> Tuple<String,String,Boolean> 
    func curry: (Tuple<String,String,Boolean> t1)  -> Function<Tuple<String,String,Boolean>> 
    func |> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> f -> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> 
    func nilReturn -> Function<Tuple<String,String,Boolean>,Nil> 
    override func clone -> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String, Boolean>>,  Array<Tuple<String, String, Boolean>>> 

    func init 
    func new -> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> 
    override func prototype -> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> 
    abstract func eval: Array<Tuple<String,String,Boolean>>  -> Array<Tuple<String,String,Boolean>> 
    func curry: (Array<Tuple<String,String,Boolean>> t1)  -> Function<Array<Tuple<String,String,Boolean>>> 
    func |> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> f -> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> 
    func nilReturn -> Function<Array<Tuple<String,String,Boolean>>,Nil> 
    override func clone -> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn> 

    func init 
    func new -> Function<Dyn> 
    override func prototype -> Function<Dyn> 
    abstract func eval -> Dyn 
    func |> Function<Dyn,Dyn> f -> Function<Dyn> 
    override func clone -> Function<Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn,Dyn> 
    abstract func eval: (Dyn, Dyn)  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2)  -> Function<Dyn> 
    override func clone -> Function<Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn,  Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn,Dyn,Dyn> 
    abstract func eval: (Dyn, Dyn, Dyn)  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2)  -> Function<Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3)  -> Function<Dyn> 
    override func clone -> Function<Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn,Dyn,Dyn,Dyn> 
    abstract func eval: (Dyn, Dyn, Dyn, Dyn)  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2)  -> Function<Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3)  -> Function<Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4)  -> Function<Dyn> 
    override func clone -> Function<Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    abstract func eval: (Dyn, Dyn, Dyn, Dyn, Dyn)  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn,Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2)  -> Function<Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3)  -> Function<Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4)  -> Function<Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4, Dyn t5)  -> Function<Dyn> 
    override func clone -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init 
    func new -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    abstract func eval: (Dyn, Dyn, Dyn, Dyn, Dyn, Dyn)  -> Dyn 
    func curry: (Dyn t1)  -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2)  -> Function<Dyn,Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3)  -> Function<Dyn,Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4)  -> Function<Dyn,Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4, Dyn t5)  -> Function<Dyn,Dyn> 
    func curry: (Dyn t1, Dyn t2, Dyn t3, Dyn t4, Dyn t5, Dyn t6)  -> Function<Dyn> 
    override func clone -> Function<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2)  
    func new: (Dyn p0, Dyn p1)  -> Tuple<Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2)  -> Tuple<Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2, Dyn g3)  
    func new: (Dyn p0, Dyn p1, Dyn p2)  -> Tuple<Dyn,Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2) 
        f3: (Dyn g3)  -> Tuple<Dyn,Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    func f3 -> Dyn 
    func f3: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn,  Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2, Dyn g3, Dyn g4)  
    func new: (Dyn p0, Dyn p1, Dyn p2, Dyn p3)  -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2) 
        f3: (Dyn g3) 
        f4: (Dyn g4)  -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    func f3 -> Dyn 
    func f3: (Dyn other)  
    func f4 -> Dyn 
    func f4: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2, Dyn g3, Dyn g4, Dyn g5)  
    func new: (Dyn p0, Dyn p1, Dyn p2, Dyn p3, Dyn p4)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2) 
        f3: (Dyn g3) 
        f4: (Dyn g4) 
        f5: (Dyn g5)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    func f3 -> Dyn 
    func f3: (Dyn other)  
    func f4 -> Dyn 
    func f4: (Dyn other)  
    func f5 -> Dyn 
    func f5: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2, Dyn g3, Dyn g4, Dyn g5, Dyn g6)  
    func new: (Dyn p0, Dyn p1, Dyn p2, Dyn p3, Dyn p4, Dyn p5)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2) 
        f3: (Dyn g3) 
        f4: (Dyn g4) 
        f5: (Dyn g5) 
        f6: (Dyn g6)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    func f3 -> Dyn 
    func f3: (Dyn other)  
    func f4 -> Dyn 
    func f4: (Dyn other)  
    func f5 -> Dyn 
    func f5: (Dyn other)  
    func f6 -> Dyn 
    func f6: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn,  Dyn> 

    func init: (Dyn g1, Dyn g2, Dyn g3, Dyn g4, Dyn g5, Dyn g6, Dyn g7)  
    func new: (Dyn p0, Dyn p1, Dyn p2, Dyn p3, Dyn p4, Dyn p5, Dyn p6)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1: (Dyn g1) 
        f2: (Dyn g2) 
        f3: (Dyn g3) 
        f4: (Dyn g4) 
        f5: (Dyn g5) 
        f6: (Dyn g6) 
        f7: (Dyn g7)  -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    func f1 -> Dyn 
    func f1: (Dyn other)  
    func f2 -> Dyn 
    func f2: (Dyn other)  
    func f3 -> Dyn 
    func f3: (Dyn other)  
    func f4 -> Dyn 
    func f4: (Dyn other)  
    func f5 -> Dyn 
    func f5: (Dyn other)  
    func f6 -> Dyn 
    func f6: (Dyn other)  
    func f7 -> Dyn 
    func f7: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<Dyn,Dyn,Dyn,Dyn,Dyn,Dyn,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< String,  String,  String> 

    func init: (String g1, String g2, String g3)  
    func new: (String p0, String p1, String p2)  -> Tuple<String,String,String> 
    override func prototype -> Tuple<String,String,String> 
    func f1: (String g1) 
        f2: (String g2) 
        f3: (String g3)  -> Tuple<String,String,String> 
    func f1 -> String 
    func f1: (String other)  
    func f2 -> String 
    func f2: (String other)  
    func f3 -> String 
    func f3: (String other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<String,String,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Interval< Byte> 
          implements Iterable<Byte>

    func init: (Byte start, Byte theend)  
    func new: (Byte p0, Byte p1)  -> Interval<Byte> 
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    func asArray -> Array<Byte> 
    func times: (Function<Nil> b)  
    func repeat: (Function<Byte,Nil> b)  
    override func foreach: (Function<Byte,Nil> b)  
    func filter: (Function<Byte,Boolean> f)  -> Array<Byte> 
    func filter: (Function<Byte,Boolean> f) 
        foreach: (Function<Byte,Nil> b)  
    func map: (Function<Byte,Byte> f)  -> Array<Byte> 
    func |> Function<Interval<Byte>,Interval<Byte>> f -> Interval<Byte> 
    func + Iterable<Byte> other -> Iterable<Byte> 
    func inject: (Byte initialValue) 
        into: (Function<Byte,Byte,Byte> b)  -> Byte 
    func to: (Byte max) 
        do: (InjectObject<Byte> injectTo)  -> Byte 
    func size -> Int 
    func first -> Byte 
    func last -> Byte 
    func asTuple -> Tuple<first,Byte,last,Byte> 
    func apply: (String message)  -> Dyn 
    func .* String message 
    func .+ String message -> Any 
    override func iterator -> Iterator<Byte> 
    override func prototype -> Interval<Byte> 
    override func clone -> Interval<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Byte>,  Interval<Byte>> 

    func init 
    func new -> Function<Interval<Byte>,Interval<Byte>> 
    override func prototype -> Function<Interval<Byte>,Interval<Byte>> 
    abstract func eval: Interval<Byte>  -> Interval<Byte> 
    func curry: (Interval<Byte> t1)  -> Function<Interval<Byte>> 
    func |> Function<Interval<Byte>,Interval<Byte>> f -> Function<Interval<Byte>,Interval<Byte>> 
    func nilReturn -> Function<Interval<Byte>,Nil> 
    override func clone -> Function<Interval<Byte>,Interval<Byte>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Byte,  Byte,  Byte> 

    func init 
    func new -> Function<Byte,Byte,Byte> 
    override func prototype -> Function<Byte,Byte,Byte> 
    abstract func eval: (Byte, Byte)  -> Byte 
    func curry: (Byte t1)  -> Function<Byte,Byte> 
    func curry: (Byte t1, Byte t2)  -> Function<Byte> 
    override func clone -> Function<Byte,Byte,Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object InjectObject< Byte> extends Function<Byte, Nil>

    func init 
    override abstract func eval: Byte  
    abstract func result -> Byte 
    override func prototype -> InjectObject<Byte> 
    override func clone -> InjectObject<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< first,  Byte,  last,  Byte> 

    func init: (Byte g1, Byte g2)  
    func new: (Byte p0, Byte p1)  -> Tuple<first,Byte,last,Byte> 
    override func prototype -> Tuple<first,Byte,last,Byte> 
    func first: (Byte g1) 
        last: (Byte g2)  -> Tuple<first,Byte,last,Byte> 
    func first -> Byte 
    func first: (Byte other)  
    func last -> Byte 
    func last: (Byte other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<first,Byte,last,Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Interval< Short> 
          implements Iterable<Short>

    func init: (Short start, Short theend)  
    func new: (Short p0, Short p1)  -> Interval<Short> 
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    func asArray -> Array<Short> 
    func times: (Function<Nil> b)  
    func repeat: (Function<Short,Nil> b)  
    override func foreach: (Function<Short,Nil> b)  
    func filter: (Function<Short,Boolean> f)  -> Array<Short> 
    func filter: (Function<Short,Boolean> f) 
        foreach: (Function<Short,Nil> b)  
    func map: (Function<Short,Short> f)  -> Array<Short> 
    func |> Function<Interval<Short>,Interval<Short>> f -> Interval<Short> 
    func + Iterable<Short> other -> Iterable<Short> 
    func inject: (Short initialValue) 
        into: (Function<Short,Short,Short> b)  -> Short 
    func to: (Short max) 
        do: (InjectObject<Short> injectTo)  -> Short 
    func size -> Int 
    func first -> Short 
    func last -> Short 
    func asTuple -> Tuple<first,Short,last,Short> 
    func apply: (String message)  -> Dyn 
    func .* String message 
    func .+ String message -> Any 
    override func iterator -> Iterator<Short> 
    override func prototype -> Interval<Short> 
    override func clone -> Interval<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Short>,  Interval<Short>> 

    func init 
    func new -> Function<Interval<Short>,Interval<Short>> 
    override func prototype -> Function<Interval<Short>,Interval<Short>> 
    abstract func eval: Interval<Short>  -> Interval<Short> 
    func curry: (Interval<Short> t1)  -> Function<Interval<Short>> 
    func |> Function<Interval<Short>,Interval<Short>> f -> Function<Interval<Short>,Interval<Short>> 
    func nilReturn -> Function<Interval<Short>,Nil> 
    override func clone -> Function<Interval<Short>,Interval<Short>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Short,  Short,  Short> 

    func init 
    func new -> Function<Short,Short,Short> 
    override func prototype -> Function<Short,Short,Short> 
    abstract func eval: (Short, Short)  -> Short 
    func curry: (Short t1)  -> Function<Short,Short> 
    func curry: (Short t1, Short t2)  -> Function<Short> 
    override func clone -> Function<Short,Short,Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object InjectObject< Short> extends Function<Short, Nil>

    func init 
    override abstract func eval: Short  
    abstract func result -> Short 
    override func prototype -> InjectObject<Short> 
    override func clone -> InjectObject<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< first,  Short,  last,  Short> 

    func init: (Short g1, Short g2)  
    func new: (Short p0, Short p1)  -> Tuple<first,Short,last,Short> 
    override func prototype -> Tuple<first,Short,last,Short> 
    func first: (Short g1) 
        last: (Short g2)  -> Tuple<first,Short,last,Short> 
    func first -> Short 
    func first: (Short other)  
    func last -> Short 
    func last: (Short other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<first,Short,last,Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Interval< Long> 
          implements Iterable<Long>

    func init: (Long start, Long theend)  
    func new: (Long p0, Long p1)  -> Interval<Long> 
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    func asArray -> Array<Long> 
    func times: (Function<Nil> b)  
    func repeat: (Function<Long,Nil> b)  
    override func foreach: (Function<Long,Nil> b)  
    func filter: (Function<Long,Boolean> f)  -> Array<Long> 
    func filter: (Function<Long,Boolean> f) 
        foreach: (Function<Long,Nil> b)  
    func map: (Function<Long,Long> f)  -> Array<Long> 
    func |> Function<Interval<Long>,Interval<Long>> f -> Interval<Long> 
    func + Iterable<Long> other -> Iterable<Long> 
    func inject: (Long initialValue) 
        into: (Function<Long,Long,Long> b)  -> Long 
    func to: (Long max) 
        do: (InjectObject<Long> injectTo)  -> Long 
    func size -> Int 
    func first -> Long 
    func last -> Long 
    func asTuple -> Tuple<first,Long,last,Long> 
    func apply: (String message)  -> Dyn 
    func .* String message 
    func .+ String message -> Any 
    override func iterator -> Iterator<Long> 
    override func prototype -> Interval<Long> 
    override func clone -> Interval<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Long>,  Interval<Long>> 

    func init 
    func new -> Function<Interval<Long>,Interval<Long>> 
    override func prototype -> Function<Interval<Long>,Interval<Long>> 
    abstract func eval: Interval<Long>  -> Interval<Long> 
    func curry: (Interval<Long> t1)  -> Function<Interval<Long>> 
    func |> Function<Interval<Long>,Interval<Long>> f -> Function<Interval<Long>,Interval<Long>> 
    func nilReturn -> Function<Interval<Long>,Nil> 
    override func clone -> Function<Interval<Long>,Interval<Long>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Long,  Long,  Long> 

    func init 
    func new -> Function<Long,Long,Long> 
    override func prototype -> Function<Long,Long,Long> 
    abstract func eval: (Long, Long)  -> Long 
    func curry: (Long t1)  -> Function<Long,Long> 
    func curry: (Long t1, Long t2)  -> Function<Long> 
    override func clone -> Function<Long,Long,Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object InjectObject< Long> extends Function<Long, Nil>

    func init 
    override abstract func eval: Long  
    abstract func result -> Long 
    override func prototype -> InjectObject<Long> 
    override func clone -> InjectObject<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< first,  Long,  last,  Long> 

    func init: (Long g1, Long g2)  
    func new: (Long p0, Long p1)  -> Tuple<first,Long,last,Long> 
    override func prototype -> Tuple<first,Long,last,Long> 
    func first: (Long g1) 
        last: (Long g2)  -> Tuple<first,Long,last,Long> 
    func first -> Long 
    func first: (Long other)  
    func last -> Long 
    func last: (Long other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<first,Long,last,Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Interval< Char> 
          implements Iterable<Char>

    func init: (Char start, Char theend)  
    func new: (Char p0, Char p1)  -> Interval<Char> 
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    func asArray -> Array<Char> 
    func times: (Function<Nil> b)  
    func repeat: (Function<Char,Nil> b)  
    override func foreach: (Function<Char,Nil> b)  
    func filter: (Function<Char,Boolean> f)  -> Array<Char> 
    func filter: (Function<Char,Boolean> f) 
        foreach: (Function<Char,Nil> b)  
    func map: (Function<Char,Char> f)  -> Array<Char> 
    func |> Function<Interval<Char>,Interval<Char>> f -> Interval<Char> 
    func + Iterable<Char> other -> Iterable<Char> 
    func inject: (Char initialValue) 
        into: (Function<Char,Char,Char> b)  -> Char 
    func to: (Char max) 
        do: (InjectObject<Char> injectTo)  -> Char 
    func size -> Int 
    func first -> Char 
    func last -> Char 
    func asTuple -> Tuple<first,Char,last,Char> 
    func apply: (String message)  -> Dyn 
    func .* String message 
    func .+ String message -> Any 
    override func iterator -> Iterator<Char> 
    override func prototype -> Interval<Char> 
    override func clone -> Interval<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Char>,  Interval<Char>> 

    func init 
    func new -> Function<Interval<Char>,Interval<Char>> 
    override func prototype -> Function<Interval<Char>,Interval<Char>> 
    abstract func eval: Interval<Char>  -> Interval<Char> 
    func curry: (Interval<Char> t1)  -> Function<Interval<Char>> 
    func |> Function<Interval<Char>,Interval<Char>> f -> Function<Interval<Char>,Interval<Char>> 
    func nilReturn -> Function<Interval<Char>,Nil> 
    override func clone -> Function<Interval<Char>,Interval<Char>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Char,  Char,  Char> 

    func init 
    func new -> Function<Char,Char,Char> 
    override func prototype -> Function<Char,Char,Char> 
    abstract func eval: (Char, Char)  -> Char 
    func curry: (Char t1)  -> Function<Char,Char> 
    func curry: (Char t1, Char t2)  -> Function<Char> 
    override func clone -> Function<Char,Char,Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object InjectObject< Char> extends Function<Char, Nil>

    func init 
    override abstract func eval: Char  
    abstract func result -> Char 
    override func prototype -> InjectObject<Char> 
    override func clone -> InjectObject<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< first,  Char,  last,  Char> 

    func init: (Char g1, Char g2)  
    func new: (Char p0, Char p1)  -> Tuple<first,Char,last,Char> 
    override func prototype -> Tuple<first,Char,last,Char> 
    func first: (Char g1) 
        last: (Char g2)  -> Tuple<first,Char,last,Char> 
    func first -> Char 
    func first: (Char other)  
    func last -> Char 
    func last: (Char other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<first,Char,last,Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Tuple<Dyn, Dyn, Dyn, Dyn>> 
          implements IHas<Tuple<Dyn, Dyn, Dyn, Dyn>>, Iterable<Tuple<Dyn, Dyn, Dyn, Dyn>>

    func init 
    func new -> Set<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func add: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  
    func size -> Int 
    override func has: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  -> Boolean 
    func remove: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  -> Boolean 
    override func foreach: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> b)  
    func filter: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> f)  -> Set<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func filter: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> b)  
    func map: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> f)  -> Set<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func iterator -> Iterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func + Iterable<Tuple<Dyn,Dyn,Dyn,Dyn>> other -> Iterable<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func asArray -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func prototype -> Set<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func clone -> Set<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Tuple<Dyn, Dyn, Dyn, Dyn>>
    func has: Tuple<Dyn,Dyn,Dyn,Dyn>  -> Boolean 
end



public interface Iterable< Tuple<Dyn, Dyn, Dyn, Dyn>>
    func iterator -> Iterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func foreach: Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil>  
end



public interface Iterator< Tuple<Dyn, Dyn, Dyn, Dyn>>
    func hasNext -> Boolean 
    func next -> Tuple<Dyn,Dyn,Dyn,Dyn> 
end



abstract open object Function< Tuple<Dyn, Dyn, Dyn, Dyn>,  Nil> 

    func init 
    func new -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> 
    override func prototype -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> 
    abstract func eval: Tuple<Dyn,Dyn,Dyn,Dyn>  -> Nil 
    func curry: (Tuple<Dyn,Dyn,Dyn,Dyn> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Dyn, Dyn, Dyn>,  Boolean> 

    func init 
    func new -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> 
    override func prototype -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> 
    abstract func eval: Tuple<Dyn,Dyn,Dyn,Dyn>  -> Boolean 
    func curry: (Tuple<Dyn,Dyn,Dyn,Dyn> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Dyn, Dyn, Dyn>,  Tuple<Dyn, Dyn, Dyn, Dyn>> 

    func init 
    func new -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func prototype -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> 
    abstract func eval: Tuple<Dyn,Dyn,Dyn,Dyn>  -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func curry: (Tuple<Dyn,Dyn,Dyn,Dyn> t1)  -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func |> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> f -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func nilReturn -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> 
    override func clone -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<Dyn, Dyn, Dyn, Dyn>> 
          implements Iterable<Tuple<Dyn, Dyn, Dyn, Dyn>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func new: (Int p0)  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  
    func replace: (Int i, Tuple<Dyn,Dyn,Dyn,Dyn> elem)  
    func addAll: (Iterable<Tuple<Dyn,Dyn,Dyn,Dyn>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func  [] at: (Int index) 
        put: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  
    func last -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func head -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func tail -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func concat: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> other)  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func size -> Int 
    override func foreach: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> b)  
    func filter: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> f)  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func filter: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Nil> b)  
    func map: (Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> f)  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func |> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> f -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func iterator -> Iterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func contains: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  -> Boolean 
    func notContains: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  -> Boolean 
    func containsArray: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> other)  -> Boolean 
    func indexOf: (Tuple<Dyn,Dyn,Dyn,Dyn> elem)  -> Int 
    override func prototype -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Dyn, Dyn, Dyn>>,  Array<Tuple<Dyn, Dyn, Dyn, Dyn>>> 

    func init 
    func new -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    override func prototype -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    abstract func eval: Array<Tuple<Dyn,Dyn,Dyn,Dyn>>  -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func curry: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> t1)  -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    func |> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> f -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    func nilReturn -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Nil> 
    override func clone -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Tuple< String,  Int,  Int,  Dyn> 

    func init: (String g1, Int g2, Int g3, Dyn g4)  
    func new: (String p0, Int p1, Int p2, Dyn p3)  -> Tuple<String,Int,Int,Dyn> 
    override func prototype -> Tuple<String,Int,Int,Dyn> 
    func f1: (String g1) 
        f2: (Int g2) 
        f3: (Int g3) 
        f4: (Dyn g4)  -> Tuple<String,Int,Int,Dyn> 
    func f1 -> String 
    func f1: (String other)  
    func f2 -> Int 
    func f2: (Int other)  
    func f3 -> Int 
    func f3: (Int other)  
    func f4 -> Dyn 
    func f4: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<String,Int,Int,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Tuple<String, Int, Int, Dyn>> 
          implements IHas<Tuple<String, Int, Int, Dyn>>, Iterable<Tuple<String, Int, Int, Dyn>>

    func init 
    func new -> Set<Tuple<String,Int,Int,Dyn>> 
    func add: (Tuple<String,Int,Int,Dyn> elem)  
    func size -> Int 
    override func has: (Tuple<String,Int,Int,Dyn> elem)  -> Boolean 
    func remove: (Tuple<String,Int,Int,Dyn> elem)  -> Boolean 
    override func foreach: (Function<Tuple<String,Int,Int,Dyn>,Nil> b)  
    func filter: (Function<Tuple<String,Int,Int,Dyn>,Boolean> f)  -> Set<Tuple<String,Int,Int,Dyn>> 
    func filter: (Function<Tuple<String,Int,Int,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<String,Int,Int,Dyn>,Nil> b)  
    func map: (Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> f)  -> Set<Tuple<String,Int,Int,Dyn>> 
    override func iterator -> Iterator<Tuple<String,Int,Int,Dyn>> 
    func + Iterable<Tuple<String,Int,Int,Dyn>> other -> Iterable<Tuple<String,Int,Int,Dyn>> 
    func asArray -> Array<Tuple<String,Int,Int,Dyn>> 
    override func prototype -> Set<Tuple<String,Int,Int,Dyn>> 
    override func clone -> Set<Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Tuple<String, Int, Int, Dyn>>
    func has: Tuple<String,Int,Int,Dyn>  -> Boolean 
end



public interface Iterable< Tuple<String, Int, Int, Dyn>>
    func iterator -> Iterator<Tuple<String,Int,Int,Dyn>> 
    func foreach: Function<Tuple<String,Int,Int,Dyn>,Nil>  
end



public interface Iterator< Tuple<String, Int, Int, Dyn>>
    func hasNext -> Boolean 
    func next -> Tuple<String,Int,Int,Dyn> 
end



abstract open object Function< Tuple<String, Int, Int, Dyn>,  Nil> 

    func init 
    func new -> Function<Tuple<String,Int,Int,Dyn>,Nil> 
    override func prototype -> Function<Tuple<String,Int,Int,Dyn>,Nil> 
    abstract func eval: Tuple<String,Int,Int,Dyn>  -> Nil 
    func curry: (Tuple<String,Int,Int,Dyn> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<String,Int,Int,Dyn>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Int, Int, Dyn>,  Boolean> 

    func init 
    func new -> Function<Tuple<String,Int,Int,Dyn>,Boolean> 
    override func prototype -> Function<Tuple<String,Int,Int,Dyn>,Boolean> 
    abstract func eval: Tuple<String,Int,Int,Dyn>  -> Boolean 
    func curry: (Tuple<String,Int,Int,Dyn> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<String,Int,Int,Dyn>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Int, Int, Dyn>,  Tuple<String, Int, Int, Dyn>> 

    func init 
    func new -> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> 
    override func prototype -> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> 
    abstract func eval: Tuple<String,Int,Int,Dyn>  -> Tuple<String,Int,Int,Dyn> 
    func curry: (Tuple<String,Int,Int,Dyn> t1)  -> Function<Tuple<String,Int,Int,Dyn>> 
    func |> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> f -> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> 
    func nilReturn -> Function<Tuple<String,Int,Int,Dyn>,Nil> 
    override func clone -> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<String, Int, Int, Dyn>> 
          implements Iterable<Tuple<String, Int, Int, Dyn>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<String,Int,Int,Dyn>> 
    func new: (Int p0)  -> Array<Tuple<String,Int,Int,Dyn>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<String,Int,Int,Dyn> elem)  
    func replace: (Int i, Tuple<String,Int,Int,Dyn> elem)  
    func addAll: (Iterable<Tuple<String,Int,Int,Dyn>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<String,Int,Int,Dyn> 
    func  [] at: (Int index) 
        put: (Tuple<String,Int,Int,Dyn> elem)  
    func last -> Tuple<String,Int,Int,Dyn> 
    func head -> Tuple<String,Int,Int,Dyn> 
    func tail -> Array<Tuple<String,Int,Int,Dyn>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<String,Int,Int,Dyn>> 
    func concat: (Array<Tuple<String,Int,Int,Dyn>> other)  -> Array<Tuple<String,Int,Int,Dyn>> 
    func size -> Int 
    override func foreach: (Function<Tuple<String,Int,Int,Dyn>,Nil> b)  
    func filter: (Function<Tuple<String,Int,Int,Dyn>,Boolean> f)  -> Array<Tuple<String,Int,Int,Dyn>> 
    func filter: (Function<Tuple<String,Int,Int,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<String,Int,Int,Dyn>,Nil> b)  
    func map: (Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> f)  -> Array<Tuple<String,Int,Int,Dyn>> 
    func |> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> f -> Array<Tuple<String,Int,Int,Dyn>> 
    override func iterator -> Iterator<Tuple<String,Int,Int,Dyn>> 
    func contains: (Tuple<String,Int,Int,Dyn> elem)  -> Boolean 
    func notContains: (Tuple<String,Int,Int,Dyn> elem)  -> Boolean 
    func containsArray: (Array<Tuple<String,Int,Int,Dyn>> other)  -> Boolean 
    func indexOf: (Tuple<String,Int,Int,Dyn> elem)  -> Int 
    override func prototype -> Array<Tuple<String,Int,Int,Dyn>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Int, Int, Dyn>>,  Array<Tuple<String, Int, Int, Dyn>>> 

    func init 
    func new -> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> 
    override func prototype -> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> 
    abstract func eval: Array<Tuple<String,Int,Int,Dyn>>  -> Array<Tuple<String,Int,Int,Dyn>> 
    func curry: (Array<Tuple<String,Int,Int,Dyn>> t1)  -> Function<Array<Tuple<String,Int,Int,Dyn>>> 
    func |> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> f -> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> 
    func nilReturn -> Function<Array<Tuple<String,Int,Int,Dyn>>,Nil> 
    override func clone -> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object HashMap< String,  String> 
          implements IMap<String, String>

    func init 
    func new -> HashMap<String,String> 
    override func iterator -> Iterator<Tuple<key,String,value,String>> 
    override func foreach: (Function<Tuple<key,String,value,String>,Nil> f)  
    override func  [] at: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    override func  [] at: (String key) 
        put: (String value)  -> cyan.lang.Nil|cyan.lang.String 
    override func get: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    override func add: (String key, String value)  -> cyan.lang.Nil|cyan.lang.String 
    override func containsKey: (String key)  -> Boolean 
    override func containsValue: (String value)  -> Boolean 
    override func isEmpty -> Boolean 
    override func remove: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    override func size -> Int 
    override func clear 
    override func asSet -> Set<Tuple<key,String,value,String>> 
    override func asArray -> Array<Tuple<key,String,value,String>> 
    override func keySet -> Set<String> 
    override func valueSet -> Set<String> 
    override func asString: (Int ident)  -> String 
    override func prototype -> HashMap<String,String> 
    override func clone -> HashMap<String,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IMap< String,  String>          extends Iterable<Tuple<key, String, value, String>>
    func  [] at: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    func  [] at: (String key) 
        put: (String value)  -> cyan.lang.Nil|cyan.lang.String 
    func get: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    func add: (String key, String value)  -> cyan.lang.Nil|cyan.lang.String 
    func containsKey: (String key)  -> Boolean 
    func containsValue: (String value)  -> Boolean 
    func isEmpty -> Boolean 
    func remove: (String key)  -> cyan.lang.Nil|cyan.lang.String 
    func size -> Int 
    func asSet -> Set<Tuple<key,String,value,String>> 
    func asArray -> Array<Tuple<key,String,value,String>> 
    func keySet -> Set<String> 
    func valueSet -> Set<String> 
    func clear 
end



object Tuple< key,  String,  value,  String> 

    func init: (String g1, String g2)  
    func new: (String p0, String p1)  -> Tuple<key,String,value,String> 
    override func prototype -> Tuple<key,String,value,String> 
    func key: (String g1) 
        value: (String g2)  -> Tuple<key,String,value,String> 
    func key -> String 
    func key: (String other)  
    func value -> String 
    func value: (String other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<key,String,value,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<key, String, value, String>>
    func iterator -> Iterator<Tuple<key,String,value,String>> 
    func foreach: Function<Tuple<key,String,value,String>,Nil>  
end



public interface Iterator< Tuple<key, String, value, String>>
    func hasNext -> Boolean 
    func next -> Tuple<key,String,value,String> 
end



abstract open object Function< Tuple<key, String, value, String>,  Nil> 

    func init 
    func new -> Function<Tuple<key,String,value,String>,Nil> 
    override func prototype -> Function<Tuple<key,String,value,String>,Nil> 
    abstract func eval: Tuple<key,String,value,String>  -> Nil 
    func curry: (Tuple<key,String,value,String> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<key,String,value,String>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Tuple<key, String, value, String>> 
          implements IHas<Tuple<key, String, value, String>>, Iterable<Tuple<key, String, value, String>>

    func init 
    func new -> Set<Tuple<key,String,value,String>> 
    func add: (Tuple<key,String,value,String> elem)  
    func size -> Int 
    override func has: (Tuple<key,String,value,String> elem)  -> Boolean 
    func remove: (Tuple<key,String,value,String> elem)  -> Boolean 
    override func foreach: (Function<Tuple<key,String,value,String>,Nil> b)  
    func filter: (Function<Tuple<key,String,value,String>,Boolean> f)  -> Set<Tuple<key,String,value,String>> 
    func filter: (Function<Tuple<key,String,value,String>,Boolean> f) 
        foreach: (Function<Tuple<key,String,value,String>,Nil> b)  
    func map: (Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> f)  -> Set<Tuple<key,String,value,String>> 
    override func iterator -> Iterator<Tuple<key,String,value,String>> 
    func + Iterable<Tuple<key,String,value,String>> other -> Iterable<Tuple<key,String,value,String>> 
    func asArray -> Array<Tuple<key,String,value,String>> 
    override func prototype -> Set<Tuple<key,String,value,String>> 
    override func clone -> Set<Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Tuple<key, String, value, String>>
    func has: Tuple<key,String,value,String>  -> Boolean 
end



abstract open object Function< Tuple<key, String, value, String>,  Boolean> 

    func init 
    func new -> Function<Tuple<key,String,value,String>,Boolean> 
    override func prototype -> Function<Tuple<key,String,value,String>,Boolean> 
    abstract func eval: Tuple<key,String,value,String>  -> Boolean 
    func curry: (Tuple<key,String,value,String> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<key,String,value,String>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, String>,  Tuple<key, String, value, String>> 

    func init 
    func new -> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> 
    override func prototype -> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> 
    abstract func eval: Tuple<key,String,value,String>  -> Tuple<key,String,value,String> 
    func curry: (Tuple<key,String,value,String> t1)  -> Function<Tuple<key,String,value,String>> 
    func |> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> f -> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> 
    func nilReturn -> Function<Tuple<key,String,value,String>,Nil> 
    override func clone -> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<key, String, value, String>> 
          implements Iterable<Tuple<key, String, value, String>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<key,String,value,String>> 
    func new: (Int p0)  -> Array<Tuple<key,String,value,String>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<key,String,value,String> elem)  
    func replace: (Int i, Tuple<key,String,value,String> elem)  
    func addAll: (Iterable<Tuple<key,String,value,String>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<key,String,value,String> 
    func  [] at: (Int index) 
        put: (Tuple<key,String,value,String> elem)  
    func last -> Tuple<key,String,value,String> 
    func head -> Tuple<key,String,value,String> 
    func tail -> Array<Tuple<key,String,value,String>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<key,String,value,String>> 
    func concat: (Array<Tuple<key,String,value,String>> other)  -> Array<Tuple<key,String,value,String>> 
    func size -> Int 
    override func foreach: (Function<Tuple<key,String,value,String>,Nil> b)  
    func filter: (Function<Tuple<key,String,value,String>,Boolean> f)  -> Array<Tuple<key,String,value,String>> 
    func filter: (Function<Tuple<key,String,value,String>,Boolean> f) 
        foreach: (Function<Tuple<key,String,value,String>,Nil> b)  
    func map: (Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> f)  -> Array<Tuple<key,String,value,String>> 
    func |> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> f -> Array<Tuple<key,String,value,String>> 
    override func iterator -> Iterator<Tuple<key,String,value,String>> 
    func contains: (Tuple<key,String,value,String> elem)  -> Boolean 
    func notContains: (Tuple<key,String,value,String> elem)  -> Boolean 
    func containsArray: (Array<Tuple<key,String,value,String>> other)  -> Boolean 
    func indexOf: (Tuple<key,String,value,String> elem)  -> Int 
    override func prototype -> Array<Tuple<key,String,value,String>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, String>>,  Array<Tuple<key, String, value, String>>> 

    func init 
    func new -> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> 
    override func prototype -> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> 
    abstract func eval: Array<Tuple<key,String,value,String>>  -> Array<Tuple<key,String,value,String>> 
    func curry: (Array<Tuple<key,String,value,String>> t1)  -> Function<Array<Tuple<key,String,value,String>>> 
    func |> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> f -> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> 
    func nilReturn -> Function<Array<Tuple<key,String,value,String>>,Nil> 
    override func clone -> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< String> 
          implements IHas<String>, Iterable<String>

    func init 
    func new -> Set<String> 
    func add: (String elem)  
    func size -> Int 
    override func has: (String elem)  -> Boolean 
    func remove: (String elem)  -> Boolean 
    override func foreach: (Function<String,Nil> b)  
    func filter: (Function<String,Boolean> f)  -> Set<String> 
    func filter: (Function<String,Boolean> f) 
        foreach: (Function<String,Nil> b)  
    func map: (Function<String,String> f)  -> Set<String> 
    override func iterator -> Iterator<String> 
    func + Iterable<String> other -> Iterable<String> 
    func asArray -> Array<String> 
    override func prototype -> Set<String> 
    override func clone -> Set<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< String>
    func has: String  -> Boolean 
end



abstract open object Filter< String> extends Function<String, Boolean>

    func init 
    override func prototype -> Filter<String> 
    override func clone -> Filter<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IMap< String,  Dyn>          extends Iterable<Tuple<key, String, value, Dyn>>
    func  [] at: (String key)  -> cyan.lang.Nil|Dyn 
    func  [] at: (String key) 
        put: (Dyn value)  -> cyan.lang.Nil|Dyn 
    func get: (String key)  -> cyan.lang.Nil|Dyn 
    func add: (String key, Dyn value)  -> cyan.lang.Nil|Dyn 
    func containsKey: (String key)  -> Boolean 
    func containsValue: (Dyn value)  -> Boolean 
    func isEmpty -> Boolean 
    func remove: (String key)  -> cyan.lang.Nil|Dyn 
    func size -> Int 
    func asSet -> Set<Tuple<key,String,value,Dyn>> 
    func asArray -> Array<Tuple<key,String,value,Dyn>> 
    func keySet -> Set<String> 
    func valueSet -> Set<Dyn> 
    func clear 
end



object Tuple< key,  String,  value,  Dyn> 

    func init: (String g1, Dyn g2)  
    func new: (String p0, Dyn p1)  -> Tuple<key,String,value,Dyn> 
    override func prototype -> Tuple<key,String,value,Dyn> 
    func key: (String g1) 
        value: (Dyn g2)  -> Tuple<key,String,value,Dyn> 
    func key -> String 
    func key: (String other)  
    func value -> Dyn 
    func value: (Dyn other)  
    override func == Dyn other -> Boolean 
    override func hashCode -> Int 
    override func asString -> String 
    override func clone -> Tuple<key,String,value,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface Iterable< Tuple<key, String, value, Dyn>>
    func iterator -> Iterator<Tuple<key,String,value,Dyn>> 
    func foreach: Function<Tuple<key,String,value,Dyn>,Nil>  
end



public interface Iterator< Tuple<key, String, value, Dyn>>
    func hasNext -> Boolean 
    func next -> Tuple<key,String,value,Dyn> 
end



abstract open object Function< Tuple<key, String, value, Dyn>,  Nil> 

    func init 
    func new -> Function<Tuple<key,String,value,Dyn>,Nil> 
    override func prototype -> Function<Tuple<key,String,value,Dyn>,Nil> 
    abstract func eval: Tuple<key,String,value,Dyn>  -> Nil 
    func curry: (Tuple<key,String,value,Dyn> t1)  -> Function<Nil> 
    override func clone -> Function<Tuple<key,String,value,Dyn>,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Tuple<key, String, value, Dyn>> 
          implements IHas<Tuple<key, String, value, Dyn>>, Iterable<Tuple<key, String, value, Dyn>>

    func init 
    func new -> Set<Tuple<key,String,value,Dyn>> 
    func add: (Tuple<key,String,value,Dyn> elem)  
    func size -> Int 
    override func has: (Tuple<key,String,value,Dyn> elem)  -> Boolean 
    func remove: (Tuple<key,String,value,Dyn> elem)  -> Boolean 
    override func foreach: (Function<Tuple<key,String,value,Dyn>,Nil> b)  
    func filter: (Function<Tuple<key,String,value,Dyn>,Boolean> f)  -> Set<Tuple<key,String,value,Dyn>> 
    func filter: (Function<Tuple<key,String,value,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<key,String,value,Dyn>,Nil> b)  
    func map: (Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> f)  -> Set<Tuple<key,String,value,Dyn>> 
    override func iterator -> Iterator<Tuple<key,String,value,Dyn>> 
    func + Iterable<Tuple<key,String,value,Dyn>> other -> Iterable<Tuple<key,String,value,Dyn>> 
    func asArray -> Array<Tuple<key,String,value,Dyn>> 
    override func prototype -> Set<Tuple<key,String,value,Dyn>> 
    override func clone -> Set<Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Tuple<key, String, value, Dyn>>
    func has: Tuple<key,String,value,Dyn>  -> Boolean 
end



abstract open object Function< Tuple<key, String, value, Dyn>,  Boolean> 

    func init 
    func new -> Function<Tuple<key,String,value,Dyn>,Boolean> 
    override func prototype -> Function<Tuple<key,String,value,Dyn>,Boolean> 
    abstract func eval: Tuple<key,String,value,Dyn>  -> Boolean 
    func curry: (Tuple<key,String,value,Dyn> t1)  -> Function<Boolean> 
    override func clone -> Function<Tuple<key,String,value,Dyn>,Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, Dyn>,  Tuple<key, String, value, Dyn>> 

    func init 
    func new -> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> 
    override func prototype -> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> 
    abstract func eval: Tuple<key,String,value,Dyn>  -> Tuple<key,String,value,Dyn> 
    func curry: (Tuple<key,String,value,Dyn> t1)  -> Function<Tuple<key,String,value,Dyn>> 
    func |> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> f -> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> 
    func nilReturn -> Function<Tuple<key,String,value,Dyn>,Nil> 
    override func clone -> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


@addCodeFromMetaobject 
object Array< Tuple<key, String, value, Dyn>> 
          implements Iterable<Tuple<key, String, value, Dyn>>

    func init 
    func init: (Int intSizeArray)  
    func new -> Array<Tuple<key,String,value,Dyn>> 
    func new: (Int p0)  -> Array<Tuple<key,String,value,Dyn>> 
    override func == Dyn other -> Boolean 
    override func != Dyn other -> Boolean 
    func add: (Tuple<key,String,value,Dyn> elem)  
    func replace: (Int i, Tuple<key,String,value,Dyn> elem)  
    func addAll: (Iterable<Tuple<key,String,value,Dyn>> list)  
    func clear 
    func isEmpty -> Boolean 
    func remove: (Int i)  
    func  [] at: (Int index)  -> Tuple<key,String,value,Dyn> 
    func  [] at: (Int index) 
        put: (Tuple<key,String,value,Dyn> elem)  
    func last -> Tuple<key,String,value,Dyn> 
    func head -> Tuple<key,String,value,Dyn> 
    func tail -> Array<Tuple<key,String,value,Dyn>> 
    func slice: (Interval<Int> interval)  -> Array<Tuple<key,String,value,Dyn>> 
    func concat: (Array<Tuple<key,String,value,Dyn>> other)  -> Array<Tuple<key,String,value,Dyn>> 
    func size -> Int 
    override func foreach: (Function<Tuple<key,String,value,Dyn>,Nil> b)  
    func filter: (Function<Tuple<key,String,value,Dyn>,Boolean> f)  -> Array<Tuple<key,String,value,Dyn>> 
    func filter: (Function<Tuple<key,String,value,Dyn>,Boolean> f) 
        foreach: (Function<Tuple<key,String,value,Dyn>,Nil> b)  
    func map: (Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> f)  -> Array<Tuple<key,String,value,Dyn>> 
    func |> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> f -> Array<Tuple<key,String,value,Dyn>> 
    override func iterator -> Iterator<Tuple<key,String,value,Dyn>> 
    func contains: (Tuple<key,String,value,Dyn> elem)  -> Boolean 
    func notContains: (Tuple<key,String,value,Dyn> elem)  -> Boolean 
    func containsArray: (Array<Tuple<key,String,value,Dyn>> other)  -> Boolean 
    func indexOf: (Tuple<key,String,value,Dyn> elem)  -> Int 
    override func prototype -> Array<Tuple<key,String,value,Dyn>> 
    override func hashCode -> Int 
    override func asString: (Int ident)  -> String 
    func apply: (String message)  
    func apply: (String message) 
        select: (String slot)  -> Dyn 
    func .+ String message -> Dyn 
    func .* String message 
    override func clone -> Array<Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Dyn>>,  Array<Tuple<key, String, value, Dyn>>> 

    func init 
    func new -> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> 
    override func prototype -> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> 
    abstract func eval: Array<Tuple<key,String,value,Dyn>>  -> Array<Tuple<key,String,value,Dyn>> 
    func curry: (Array<Tuple<key,String,value,Dyn>> t1)  -> Function<Array<Tuple<key,String,value,Dyn>>> 
    func |> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> f -> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> 
    func nilReturn -> Function<Array<Tuple<key,String,value,Dyn>>,Nil> 
    override func clone -> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Dyn> 
          implements IHas<Dyn>, Iterable<Dyn>

    func init 
    func new -> Set<Dyn> 
    func add: (Dyn elem)  
    func size -> Int 
    override func has: (Dyn elem)  -> Boolean 
    func remove: (Dyn elem)  -> Boolean 
    override func foreach: (Function<Dyn,Nil> b)  
    func filter: (Function<Dyn,Boolean> f)  -> Set<Dyn> 
    func filter: (Function<Dyn,Boolean> f) 
        foreach: (Function<Dyn,Nil> b)  
    func map: (Function<Dyn,Dyn> f)  -> Set<Dyn> 
    override func iterator -> Iterator<Dyn> 
    func + Iterable<Dyn> other -> Iterable<Dyn> 
    func asArray -> Array<Dyn> 
    override func prototype -> Set<Dyn> 
    override func clone -> Set<Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Dyn>
    func has: Dyn  -> Boolean 
end



object Stack< String> 

    func init 
    func new -> Stack<String> 
    func isEmpty -> Boolean 
    func peek -> String 
    func pop -> String 
    func push: (String item)  
    func search: (String item)  -> Int 
    func elementAt: (Int n)  -> String 
    override func prototype -> Stack<String> 
    override func clone -> Stack<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Int> 

    func init 
    override func prototype -> Function<Int> 
    abstract func eval -> Int 
    func |> Function<Int,Int> f -> Function<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Int>> 

    func init 
    override func prototype -> Function<Array<Int>> 
    abstract func eval -> Array<Int> 
    func |> Function<Array<Int>,Array<Int>> f -> Function<Array<Int>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Int>,  Nil> 

    func init 
    override func prototype -> Function<Array<Int>,Nil> 
    abstract func eval: Array<Int>  -> Nil 
    func curry: (Array<Int> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Int>> 

    func init 
    override func prototype -> Function<Interval<Int>> 
    abstract func eval -> Interval<Int> 
    func |> Function<Interval<Int>,Interval<Int>> f -> Function<Interval<Int>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Int>,  Nil> 

    func init 
    override func prototype -> Function<Interval<Int>,Nil> 
    abstract func eval: Interval<Int>  -> Nil 
    func curry: (Interval<Int> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, Any>> 

    func init 
    override func prototype -> Function<Tuple<key,String,value,Any>> 
    abstract func eval -> Tuple<key,String,value,Any> 
    func |> Function<Tuple<key,String,value,Any>,Tuple<key,String,value,Any>> f -> Function<Tuple<key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Any>>> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,Any>>> 
    abstract func eval -> Array<Tuple<key,String,value,Any>> 
    func |> Function<Array<Tuple<key,String,value,Any>>,Array<Tuple<key,String,value,Any>>> f -> Function<Array<Tuple<key,String,value,Any>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Any>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,Any>>,Nil> 
    abstract func eval: Array<Tuple<key,String,value,Any>>  -> Nil 
    func curry: (Array<Tuple<key,String,value,Any>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<slotName, String, key, String, value, Any>> 

    func init 
    override func prototype -> Function<Tuple<slotName,String,key,String,value,Any>> 
    abstract func eval -> Tuple<slotName,String,key,String,value,Any> 
    func |> Function<Tuple<slotName,String,key,String,value,Any>,Tuple<slotName,String,key,String,value,Any>> f -> Function<Tuple<slotName,String,key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<slotName, String, key, String, value, Any>>> 

    func init 
    override func prototype -> Function<Array<Tuple<slotName,String,key,String,value,Any>>> 
    abstract func eval -> Array<Tuple<slotName,String,key,String,value,Any>> 
    func |> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Array<Tuple<slotName,String,key,String,value,Any>>> f -> Function<Array<Tuple<slotName,String,key,String,value,Any>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<slotName, String, key, String, value, Any>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<slotName,String,key,String,value,Any>>,Nil> 
    abstract func eval: Array<Tuple<slotName,String,key,String,value,Any>>  -> Nil 
    func curry: (Array<Tuple<slotName,String,key,String,value,Any>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Any> 

    func init 
    override func prototype -> Function<Any> 
    abstract func eval -> Any 
    func |> Function<Any,Any> f -> Function<Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Any>> 

    func init 
    override func prototype -> Function<Array<Any>> 
    abstract func eval -> Array<Any> 
    func |> Function<Array<Any>,Array<Any>> f -> Function<Array<Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Any>,  Nil> 

    func init 
    override func prototype -> Function<Array<Any>,Nil> 
    abstract func eval: Array<Any>  -> Nil 
    func curry: (Array<Any> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Dyn>> 

    func init 
    override func prototype -> Function<Array<Dyn>> 
    abstract func eval -> Array<Dyn> 
    func |> Function<Array<Dyn>,Array<Dyn>> f -> Function<Array<Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Array<Dyn>>> 

    func init 
    override func prototype -> Function<Array<Array<Dyn>>> 
    abstract func eval -> Array<Array<Dyn>> 
    func |> Function<Array<Array<Dyn>>,Array<Array<Dyn>>> f -> Function<Array<Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Array<Dyn>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Array<Dyn>>,Nil> 
    abstract func eval: Array<Array<Dyn>>  -> Nil 
    func curry: (Array<Array<Dyn>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< String> 

    func init 
    override func prototype -> Function<String> 
    abstract func eval -> String 
    func |> Function<String,String> f -> Function<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<String>> 

    func init 
    override func prototype -> Function<Array<String>> 
    abstract func eval -> Array<String> 
    func |> Function<Array<String>,Array<String>> f -> Function<Array<String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<String>,  Nil> 

    func init 
    override func prototype -> Function<Array<String>,Nil> 
    abstract func eval: Array<String>  -> Nil 
    func curry: (Array<String> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Boolean>> 

    func init 
    override func prototype -> Function<Array<Boolean>> 
    abstract func eval -> Array<Boolean> 
    func |> Function<Array<Boolean>,Array<Boolean>> f -> Function<Array<Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Boolean>,  Nil> 

    func init 
    override func prototype -> Function<Array<Boolean>,Nil> 
    abstract func eval: Array<Boolean>  -> Nil 
    func curry: (Array<Boolean> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Char> 

    func init 
    override func prototype -> Function<Char> 
    abstract func eval -> Char 
    func |> Function<Char,Char> f -> Function<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Char>> 

    func init 
    override func prototype -> Function<Array<Char>> 
    abstract func eval -> Array<Char> 
    func |> Function<Array<Char>,Array<Char>> f -> Function<Array<Char>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Char>,  Nil> 

    func init 
    override func prototype -> Function<Array<Char>,Nil> 
    abstract func eval: Array<Char>  -> Nil 
    func curry: (Array<Char> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Byte> 

    func init 
    override func prototype -> Function<Byte> 
    abstract func eval -> Byte 
    func |> Function<Byte,Byte> f -> Function<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Byte>> 

    func init 
    override func prototype -> Function<Array<Byte>> 
    abstract func eval -> Array<Byte> 
    func |> Function<Array<Byte>,Array<Byte>> f -> Function<Array<Byte>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Byte>,  Nil> 

    func init 
    override func prototype -> Function<Array<Byte>,Nil> 
    abstract func eval: Array<Byte>  -> Nil 
    func curry: (Array<Byte> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Short> 

    func init 
    override func prototype -> Function<Short> 
    abstract func eval -> Short 
    func |> Function<Short,Short> f -> Function<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Short>> 

    func init 
    override func prototype -> Function<Array<Short>> 
    abstract func eval -> Array<Short> 
    func |> Function<Array<Short>,Array<Short>> f -> Function<Array<Short>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Short>,  Nil> 

    func init 
    override func prototype -> Function<Array<Short>,Nil> 
    abstract func eval: Array<Short>  -> Nil 
    func curry: (Array<Short> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Long> 

    func init 
    override func prototype -> Function<Long> 
    abstract func eval -> Long 
    func |> Function<Long,Long> f -> Function<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Long>> 

    func init 
    override func prototype -> Function<Array<Long>> 
    abstract func eval -> Array<Long> 
    func |> Function<Array<Long>,Array<Long>> f -> Function<Array<Long>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Long>,  Nil> 

    func init 
    override func prototype -> Function<Array<Long>,Nil> 
    abstract func eval: Array<Long>  -> Nil 
    func curry: (Array<Long> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Float> 

    func init 
    override func prototype -> Function<Float> 
    abstract func eval -> Float 
    func |> Function<Float,Float> f -> Function<Float> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Float>> 

    func init 
    override func prototype -> Function<Array<Float>> 
    abstract func eval -> Array<Float> 
    func |> Function<Array<Float>,Array<Float>> f -> Function<Array<Float>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Float>,  Nil> 

    func init 
    override func prototype -> Function<Array<Float>,Nil> 
    abstract func eval: Array<Float>  -> Nil 
    func curry: (Array<Float> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Double> 

    func init 
    override func prototype -> Function<Double> 
    abstract func eval -> Double 
    func |> Function<Double,Double> f -> Function<Double> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Double>> 

    func init 
    override func prototype -> Function<Array<Double>> 
    abstract func eval -> Array<Double> 
    func |> Function<Array<Double>,Array<Double>> f -> Function<Array<Double>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Double>,  Nil> 

    func init 
    override func prototype -> Function<Array<Double>,Nil> 
    abstract func eval: Array<Double>  -> Nil 
    func curry: (Array<Double> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Array<Dyn>>> 

    func init 
    override func prototype -> Function<Tuple<Dyn,Array<Dyn>>> 
    abstract func eval -> Tuple<Dyn,Array<Dyn>> 
    func |> Function<Tuple<Dyn,Array<Dyn>>,Tuple<Dyn,Array<Dyn>>> f -> Function<Tuple<Dyn,Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Array<Dyn>>>> 

    func init 
    override func prototype -> Function<Array<Tuple<Dyn,Array<Dyn>>>> 
    abstract func eval -> Array<Tuple<Dyn,Array<Dyn>>> 
    func |> Function<Array<Tuple<Dyn,Array<Dyn>>>,Array<Tuple<Dyn,Array<Dyn>>>> f -> Function<Array<Tuple<Dyn,Array<Dyn>>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Array<Dyn>>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<Dyn,Array<Dyn>>>,Nil> 
    abstract func eval: Array<Tuple<Dyn,Array<Dyn>>>  -> Nil 
    func curry: (Array<Tuple<Dyn,Array<Dyn>>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Array<String>>> 

    func init 
    override func prototype -> Function<Tuple<String,Array<String>>> 
    abstract func eval -> Tuple<String,Array<String>> 
    func |> Function<Tuple<String,Array<String>>,Tuple<String,Array<String>>> f -> Function<Tuple<String,Array<String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Array<String>>>> 

    func init 
    override func prototype -> Function<Array<Tuple<String,Array<String>>>> 
    abstract func eval -> Array<Tuple<String,Array<String>>> 
    func |> Function<Array<Tuple<String,Array<String>>>,Array<Tuple<String,Array<String>>>> f -> Function<Array<Tuple<String,Array<String>>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Array<String>>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<String,Array<String>>>,Nil> 
    abstract func eval: Array<Tuple<String,Array<String>>>  -> Nil 
    func curry: (Array<Tuple<String,Array<String>>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String>> 

    func init 
    override func prototype -> Function<Tuple<String,String>> 
    abstract func eval -> Tuple<String,String> 
    func |> Function<Tuple<String,String>,Tuple<String,String>> f -> Function<Tuple<String,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String>>> 

    func init 
    override func prototype -> Function<Array<Tuple<String,String>>> 
    abstract func eval -> Array<Tuple<String,String>> 
    func |> Function<Array<Tuple<String,String>>,Array<Tuple<String,String>>> f -> Function<Array<Tuple<String,String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<String,String>>,Nil> 
    abstract func eval: Array<Tuple<String,String>>  -> Nil 
    func curry: (Array<Tuple<String,String>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, String, Boolean>> 

    func init 
    override func prototype -> Function<Tuple<String,String,Boolean>> 
    abstract func eval -> Tuple<String,String,Boolean> 
    func |> Function<Tuple<String,String,Boolean>,Tuple<String,String,Boolean>> f -> Function<Tuple<String,String,Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String, Boolean>>> 

    func init 
    override func prototype -> Function<Array<Tuple<String,String,Boolean>>> 
    abstract func eval -> Array<Tuple<String,String,Boolean>> 
    func |> Function<Array<Tuple<String,String,Boolean>>,Array<Tuple<String,String,Boolean>>> f -> Function<Array<Tuple<String,String,Boolean>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, String, Boolean>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<String,String,Boolean>>,Nil> 
    abstract func eval: Array<Tuple<String,String,Boolean>>  -> Nil 
    func curry: (Array<Tuple<String,String,Boolean>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Byte>> 

    func init 
    override func prototype -> Function<Interval<Byte>> 
    abstract func eval -> Interval<Byte> 
    func |> Function<Interval<Byte>,Interval<Byte>> f -> Function<Interval<Byte>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Byte>,  Nil> 

    func init 
    override func prototype -> Function<Interval<Byte>,Nil> 
    abstract func eval: Interval<Byte>  -> Nil 
    func curry: (Interval<Byte> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Short>> 

    func init 
    override func prototype -> Function<Interval<Short>> 
    abstract func eval -> Interval<Short> 
    func |> Function<Interval<Short>,Interval<Short>> f -> Function<Interval<Short>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Short>,  Nil> 

    func init 
    override func prototype -> Function<Interval<Short>,Nil> 
    abstract func eval: Interval<Short>  -> Nil 
    func curry: (Interval<Short> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Long>> 

    func init 
    override func prototype -> Function<Interval<Long>> 
    abstract func eval -> Interval<Long> 
    func |> Function<Interval<Long>,Interval<Long>> f -> Function<Interval<Long>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Long>,  Nil> 

    func init 
    override func prototype -> Function<Interval<Long>,Nil> 
    abstract func eval: Interval<Long>  -> Nil 
    func curry: (Interval<Long> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Char>> 

    func init 
    override func prototype -> Function<Interval<Char>> 
    abstract func eval -> Interval<Char> 
    func |> Function<Interval<Char>,Interval<Char>> f -> Function<Interval<Char>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Interval<Char>,  Nil> 

    func init 
    override func prototype -> Function<Interval<Char>,Nil> 
    abstract func eval: Interval<Char>  -> Nil 
    func curry: (Interval<Char> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<Dyn, Dyn, Dyn, Dyn>> 

    func init 
    override func prototype -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    abstract func eval -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    func |> Function<Tuple<Dyn,Dyn,Dyn,Dyn>,Tuple<Dyn,Dyn,Dyn,Dyn>> f -> Function<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Dyn, Dyn, Dyn>>> 

    func init 
    override func prototype -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    abstract func eval -> Array<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    func |> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> f -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<Dyn, Dyn, Dyn, Dyn>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<Dyn,Dyn,Dyn,Dyn>>,Nil> 
    abstract func eval: Array<Tuple<Dyn,Dyn,Dyn,Dyn>>  -> Nil 
    func curry: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<String, Int, Int, Dyn>> 

    func init 
    override func prototype -> Function<Tuple<String,Int,Int,Dyn>> 
    abstract func eval -> Tuple<String,Int,Int,Dyn> 
    func |> Function<Tuple<String,Int,Int,Dyn>,Tuple<String,Int,Int,Dyn>> f -> Function<Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Int, Int, Dyn>>> 

    func init 
    override func prototype -> Function<Array<Tuple<String,Int,Int,Dyn>>> 
    abstract func eval -> Array<Tuple<String,Int,Int,Dyn>> 
    func |> Function<Array<Tuple<String,Int,Int,Dyn>>,Array<Tuple<String,Int,Int,Dyn>>> f -> Function<Array<Tuple<String,Int,Int,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<String, Int, Int, Dyn>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<String,Int,Int,Dyn>>,Nil> 
    abstract func eval: Array<Tuple<String,Int,Int,Dyn>>  -> Nil 
    func curry: (Array<Tuple<String,Int,Int,Dyn>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, String>> 

    func init 
    override func prototype -> Function<Tuple<key,String,value,String>> 
    abstract func eval -> Tuple<key,String,value,String> 
    func |> Function<Tuple<key,String,value,String>,Tuple<key,String,value,String>> f -> Function<Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, String>>> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,String>>> 
    abstract func eval -> Array<Tuple<key,String,value,String>> 
    func |> Function<Array<Tuple<key,String,value,String>>,Array<Tuple<key,String,value,String>>> f -> Function<Array<Tuple<key,String,value,String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, String>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,String>>,Nil> 
    abstract func eval: Array<Tuple<key,String,value,String>>  -> Nil 
    func curry: (Array<Tuple<key,String,value,String>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Tuple<key, String, value, Dyn>> 

    func init 
    override func prototype -> Function<Tuple<key,String,value,Dyn>> 
    abstract func eval -> Tuple<key,String,value,Dyn> 
    func |> Function<Tuple<key,String,value,Dyn>,Tuple<key,String,value,Dyn>> f -> Function<Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Dyn>>> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,Dyn>>> 
    abstract func eval -> Array<Tuple<key,String,value,Dyn>> 
    func |> Function<Array<Tuple<key,String,value,Dyn>>,Array<Tuple<key,String,value,Dyn>>> f -> Function<Array<Tuple<key,String,value,Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Dyn>>,  Nil> 

    func init 
    override func prototype -> Function<Array<Tuple<key,String,value,Dyn>>,Nil> 
    abstract func eval: Array<Tuple<key,String,value,Dyn>>  -> Nil 
    func curry: (Array<Tuple<key,String,value,Dyn>> t1)  -> Function<Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< CyException,  Nil> 

    func init 
    func new -> Function<CyException,Nil> 
    override func prototype -> Function<CyException,Nil> 
    abstract func eval: CyException  -> Nil 
    func curry: (CyException t1)  -> Function<Nil> 
    override func clone -> Function<CyException,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object HashMap< String,  Dyn> 
          implements IMap<String, Dyn>

    func init 
    func new -> HashMap<String,Dyn> 
    override func iterator -> Iterator<Tuple<key,String,value,Dyn>> 
    override func foreach: (Function<Tuple<key,String,value,Dyn>,Nil> f)  
    override func  [] at: (String key)  -> cyan.lang.Nil|Dyn 
    override func  [] at: (String key) 
        put: (Dyn value)  -> cyan.lang.Nil|Dyn 
    override func get: (String key)  -> cyan.lang.Nil|Dyn 
    override func add: (String key, Dyn value)  -> cyan.lang.Nil|Dyn 
    override func containsKey: (String key)  -> Boolean 
    override func containsValue: (Dyn value)  -> Boolean 
    override func isEmpty -> Boolean 
    override func remove: (String key)  -> cyan.lang.Nil|Dyn 
    override func size -> Int 
    override func clear 
    override func asSet -> Set<Tuple<key,String,value,Dyn>> 
    override func asArray -> Array<Tuple<key,String,value,Dyn>> 
    override func keySet -> Set<String> 
    override func valueSet -> Set<Dyn> 
    override func asString: (Int ident)  -> String 
    override func prototype -> HashMap<String,Dyn> 
    override func clone -> HashMap<String,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<key, String, value, Any>> 
          implements Iterator<Tuple<key, String, value, Any>>

    func init: (Array<Tuple<key,String,value,Any>> s)  
    func new: (Array<Tuple<key,String,value,Any>> p0)  -> ArrayIterator<Tuple<key,String,value,Any>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,Any> 
    override func prototype -> ArrayIterator<Tuple<key,String,value,Any>> 
    override func clone -> ArrayIterator<Tuple<key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Int> 
          implements IHas<Int>, Iterable<Int>

    func init 
    func new -> Set<Int> 
    func add: (Int elem)  
    func size -> Int 
    override func has: (Int elem)  -> Boolean 
    func remove: (Int elem)  -> Boolean 
    override func foreach: (Function<Int,Nil> b)  
    func filter: (Function<Int,Boolean> f)  -> Set<Int> 
    func filter: (Function<Int,Boolean> f) 
        foreach: (Function<Int,Nil> b)  
    func map: (Function<Int,Int> f)  -> Set<Int> 
    override func iterator -> Iterator<Int> 
    func + Iterable<Int> other -> Iterable<Int> 
    func asArray -> Array<Int> 
    override func prototype -> Set<Int> 
    override func clone -> Set<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Int>
    func has: Int  -> Boolean 
end



object IntervalIterator< Int> 
          implements Iterator<Int>

    func init: (Interval<Int> s)  
    func new: (Interval<Int> p0)  -> IntervalIterator<Int> 
    override func hasNext -> Boolean 
    override func next -> Int 
    override func prototype -> IntervalIterator<Int> 
    override func clone -> IntervalIterator<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Int> 
          implements Iterator<Int>

    func init: (Array<Int> s)  
    func new: (Array<Int> p0)  -> ArrayIterator<Int> 
    override func hasNext -> Boolean 
    override func next -> Int 
    override func prototype -> ArrayIterator<Int> 
    override func clone -> ArrayIterator<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<slotName, String, key, String, value, Any>> 
          implements Iterator<Tuple<slotName, String, key, String, value, Any>>

    func init: (Array<Tuple<slotName,String,key,String,value,Any>> s)  
    func new: (Array<Tuple<slotName,String,key,String,value,Any>> p0)  -> ArrayIterator<Tuple<slotName,String,key,String,value,Any>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<slotName,String,key,String,value,Any> 
    override func prototype -> ArrayIterator<Tuple<slotName,String,key,String,value,Any>> 
    override func clone -> ArrayIterator<Tuple<slotName,String,key,String,value,Any>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Any> 
          implements Iterator<Any>

    func init: (Array<Any> s)  
    func new: (Array<Any> p0)  -> ArrayIterator<Any> 
    override func hasNext -> Boolean 
    override func next -> Any 
    override func prototype -> ArrayIterator<Any> 
    override func clone -> ArrayIterator<Any> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Dyn> 
          implements Iterator<Dyn>

    func init: (Array<Dyn> s)  
    func new: (Array<Dyn> p0)  -> ArrayIterator<Dyn> 
    override func hasNext -> Boolean 
    override func next -> Dyn 
    override func prototype -> ArrayIterator<Dyn> 
    override func clone -> ArrayIterator<Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Array<Dyn>> 
          implements Iterator<Array<Dyn>>

    func init: (Array<Array<Dyn>> s)  
    func new: (Array<Array<Dyn>> p0)  -> ArrayIterator<Array<Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Array<Dyn> 
    override func prototype -> ArrayIterator<Array<Dyn>> 
    override func clone -> ArrayIterator<Array<Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< String> 
          implements Iterator<String>

    func init: (Array<String> s)  
    func new: (Array<String> p0)  -> ArrayIterator<String> 
    override func hasNext -> Boolean 
    override func next -> String 
    override func prototype -> ArrayIterator<String> 
    override func clone -> ArrayIterator<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Boolean> 
          implements Iterator<Boolean>

    func init: (Array<Boolean> s)  
    func new: (Array<Boolean> p0)  -> ArrayIterator<Boolean> 
    override func hasNext -> Boolean 
    override func next -> Boolean 
    override func prototype -> ArrayIterator<Boolean> 
    override func clone -> ArrayIterator<Boolean> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Char> 
          implements Iterator<Char>

    func init: (Array<Char> s)  
    func new: (Array<Char> p0)  -> ArrayIterator<Char> 
    override func hasNext -> Boolean 
    override func next -> Char 
    override func prototype -> ArrayIterator<Char> 
    override func clone -> ArrayIterator<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Byte> 
          implements Iterator<Byte>

    func init: (Array<Byte> s)  
    func new: (Array<Byte> p0)  -> ArrayIterator<Byte> 
    override func hasNext -> Boolean 
    override func next -> Byte 
    override func prototype -> ArrayIterator<Byte> 
    override func clone -> ArrayIterator<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Short> 
          implements Iterator<Short>

    func init: (Array<Short> s)  
    func new: (Array<Short> p0)  -> ArrayIterator<Short> 
    override func hasNext -> Boolean 
    override func next -> Short 
    override func prototype -> ArrayIterator<Short> 
    override func clone -> ArrayIterator<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Long> 
          implements Iterator<Long>

    func init: (Array<Long> s)  
    func new: (Array<Long> p0)  -> ArrayIterator<Long> 
    override func hasNext -> Boolean 
    override func next -> Long 
    override func prototype -> ArrayIterator<Long> 
    override func clone -> ArrayIterator<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Float> 
          implements Iterator<Float>

    func init: (Array<Float> s)  
    func new: (Array<Float> p0)  -> ArrayIterator<Float> 
    override func hasNext -> Boolean 
    override func next -> Float 
    override func prototype -> ArrayIterator<Float> 
    override func clone -> ArrayIterator<Float> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Double> 
          implements Iterator<Double>

    func init: (Array<Double> s)  
    func new: (Array<Double> p0)  -> ArrayIterator<Double> 
    override func hasNext -> Boolean 
    override func next -> Double 
    override func prototype -> ArrayIterator<Double> 
    override func clone -> ArrayIterator<Double> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<Dyn, Array<Dyn>>> 
          implements Iterator<Tuple<Dyn, Array<Dyn>>>

    func init: (Array<Tuple<Dyn,Array<Dyn>>> s)  
    func new: (Array<Tuple<Dyn,Array<Dyn>>> p0)  -> ArrayIterator<Tuple<Dyn,Array<Dyn>>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<Dyn,Array<Dyn>> 
    override func prototype -> ArrayIterator<Tuple<Dyn,Array<Dyn>>> 
    override func clone -> ArrayIterator<Tuple<Dyn,Array<Dyn>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<String, Array<String>>> 
          implements Iterator<Tuple<String, Array<String>>>

    func init: (Array<Tuple<String,Array<String>>> s)  
    func new: (Array<Tuple<String,Array<String>>> p0)  -> ArrayIterator<Tuple<String,Array<String>>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<String,Array<String>> 
    override func prototype -> ArrayIterator<Tuple<String,Array<String>>> 
    override func clone -> ArrayIterator<Tuple<String,Array<String>>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<String, String>> 
          implements Iterator<Tuple<String, String>>

    func init: (Array<Tuple<String,String>> s)  
    func new: (Array<Tuple<String,String>> p0)  -> ArrayIterator<Tuple<String,String>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<String,String> 
    override func prototype -> ArrayIterator<Tuple<String,String>> 
    override func clone -> ArrayIterator<Tuple<String,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<String, String, Boolean>> 
          implements Iterator<Tuple<String, String, Boolean>>

    func init: (Array<Tuple<String,String,Boolean>> s)  
    func new: (Array<Tuple<String,String,Boolean>> p0)  -> ArrayIterator<Tuple<String,String,Boolean>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<String,String,Boolean> 
    override func prototype -> ArrayIterator<Tuple<String,String,Boolean>> 
    override func clone -> ArrayIterator<Tuple<String,String,Boolean>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Byte> 
          implements IHas<Byte>, Iterable<Byte>

    func init 
    func new -> Set<Byte> 
    func add: (Byte elem)  
    func size -> Int 
    override func has: (Byte elem)  -> Boolean 
    func remove: (Byte elem)  -> Boolean 
    override func foreach: (Function<Byte,Nil> b)  
    func filter: (Function<Byte,Boolean> f)  -> Set<Byte> 
    func filter: (Function<Byte,Boolean> f) 
        foreach: (Function<Byte,Nil> b)  
    func map: (Function<Byte,Byte> f)  -> Set<Byte> 
    override func iterator -> Iterator<Byte> 
    func + Iterable<Byte> other -> Iterable<Byte> 
    func asArray -> Array<Byte> 
    override func prototype -> Set<Byte> 
    override func clone -> Set<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Byte>
    func has: Byte  -> Boolean 
end



object IntervalIterator< Byte> 
          implements Iterator<Byte>

    func init: (Interval<Byte> s)  
    func new: (Interval<Byte> p0)  -> IntervalIterator<Byte> 
    override func hasNext -> Boolean 
    override func next -> Byte 
    override func prototype -> IntervalIterator<Byte> 
    override func clone -> IntervalIterator<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Short> 
          implements IHas<Short>, Iterable<Short>

    func init 
    func new -> Set<Short> 
    func add: (Short elem)  
    func size -> Int 
    override func has: (Short elem)  -> Boolean 
    func remove: (Short elem)  -> Boolean 
    override func foreach: (Function<Short,Nil> b)  
    func filter: (Function<Short,Boolean> f)  -> Set<Short> 
    func filter: (Function<Short,Boolean> f) 
        foreach: (Function<Short,Nil> b)  
    func map: (Function<Short,Short> f)  -> Set<Short> 
    override func iterator -> Iterator<Short> 
    func + Iterable<Short> other -> Iterable<Short> 
    func asArray -> Array<Short> 
    override func prototype -> Set<Short> 
    override func clone -> Set<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Short>
    func has: Short  -> Boolean 
end



object IntervalIterator< Short> 
          implements Iterator<Short>

    func init: (Interval<Short> s)  
    func new: (Interval<Short> p0)  -> IntervalIterator<Short> 
    override func hasNext -> Boolean 
    override func next -> Short 
    override func prototype -> IntervalIterator<Short> 
    override func clone -> IntervalIterator<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Long> 
          implements IHas<Long>, Iterable<Long>

    func init 
    func new -> Set<Long> 
    func add: (Long elem)  
    func size -> Int 
    override func has: (Long elem)  -> Boolean 
    func remove: (Long elem)  -> Boolean 
    override func foreach: (Function<Long,Nil> b)  
    func filter: (Function<Long,Boolean> f)  -> Set<Long> 
    func filter: (Function<Long,Boolean> f) 
        foreach: (Function<Long,Nil> b)  
    func map: (Function<Long,Long> f)  -> Set<Long> 
    override func iterator -> Iterator<Long> 
    func + Iterable<Long> other -> Iterable<Long> 
    func asArray -> Array<Long> 
    override func prototype -> Set<Long> 
    override func clone -> Set<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Long>
    func has: Long  -> Boolean 
end



object IntervalIterator< Long> 
          implements Iterator<Long>

    func init: (Interval<Long> s)  
    func new: (Interval<Long> p0)  -> IntervalIterator<Long> 
    override func hasNext -> Boolean 
    override func next -> Long 
    override func prototype -> IntervalIterator<Long> 
    override func clone -> IntervalIterator<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object Set< Char> 
          implements IHas<Char>, Iterable<Char>

    func init 
    func new -> Set<Char> 
    func add: (Char elem)  
    func size -> Int 
    override func has: (Char elem)  -> Boolean 
    func remove: (Char elem)  -> Boolean 
    override func foreach: (Function<Char,Nil> b)  
    func filter: (Function<Char,Boolean> f)  -> Set<Char> 
    func filter: (Function<Char,Boolean> f) 
        foreach: (Function<Char,Nil> b)  
    func map: (Function<Char,Char> f)  -> Set<Char> 
    override func iterator -> Iterator<Char> 
    func + Iterable<Char> other -> Iterable<Char> 
    func asArray -> Array<Char> 
    override func prototype -> Set<Char> 
    override func clone -> Set<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



public interface IHas< Char>
    func has: Char  -> Boolean 
end



object IntervalIterator< Char> 
          implements Iterator<Char>

    func init: (Interval<Char> s)  
    func new: (Interval<Char> p0)  -> IntervalIterator<Char> 
    override func hasNext -> Boolean 
    override func next -> Char 
    override func prototype -> IntervalIterator<Char> 
    override func clone -> IntervalIterator<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Tuple<Dyn, Dyn, Dyn, Dyn>> 
          implements Iterator<Tuple<Dyn, Dyn, Dyn, Dyn>>

    func init: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> s)  
    func new: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> p0)  -> SetIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> SetIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func clone -> SetIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<Dyn, Dyn, Dyn, Dyn>> 
          implements Iterator<Tuple<Dyn, Dyn, Dyn, Dyn>>

    func init: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> s)  
    func new: (Array<Tuple<Dyn,Dyn,Dyn,Dyn>> p0)  -> ArrayIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<Dyn,Dyn,Dyn,Dyn> 
    override func prototype -> ArrayIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func clone -> ArrayIterator<Tuple<Dyn,Dyn,Dyn,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Tuple<String, Int, Int, Dyn>> 
          implements Iterator<Tuple<String, Int, Int, Dyn>>

    func init: (Array<Tuple<String,Int,Int,Dyn>> s)  
    func new: (Array<Tuple<String,Int,Int,Dyn>> p0)  -> SetIterator<Tuple<String,Int,Int,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<String,Int,Int,Dyn> 
    override func prototype -> SetIterator<Tuple<String,Int,Int,Dyn>> 
    override func clone -> SetIterator<Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<String, Int, Int, Dyn>> 
          implements Iterator<Tuple<String, Int, Int, Dyn>>

    func init: (Array<Tuple<String,Int,Int,Dyn>> s)  
    func new: (Array<Tuple<String,Int,Int,Dyn>> p0)  -> ArrayIterator<Tuple<String,Int,Int,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<String,Int,Int,Dyn> 
    override func prototype -> ArrayIterator<Tuple<String,Int,Int,Dyn>> 
    override func clone -> ArrayIterator<Tuple<String,Int,Int,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object HashMapIterator< String,  String> 
          implements Iterator<Tuple<key, String, value, String>>

    func init: (HashMap<String,String> map)  
    func new: (HashMap<String,String> p0)  -> HashMapIterator<String,String> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,String> 
    override func prototype -> HashMapIterator<String,String> 
    override func clone -> HashMapIterator<String,String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< String,  String,  Nil> 

    func init 
    func new -> Function<String,String,Nil> 
    override func prototype -> Function<String,String,Nil> 
    abstract func eval: (String, String)  -> Nil 
    func curry: (String t1)  -> Function<String,Nil> 
    func curry: (String t1, String t2)  -> Function<Nil> 
    override func clone -> Function<String,String,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Tuple<key, String, value, String>> 
          implements Iterator<Tuple<key, String, value, String>>

    func init: (Array<Tuple<key,String,value,String>> s)  
    func new: (Array<Tuple<key,String,value,String>> p0)  -> SetIterator<Tuple<key,String,value,String>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,String> 
    override func prototype -> SetIterator<Tuple<key,String,value,String>> 
    override func clone -> SetIterator<Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<key, String, value, String>> 
          implements Iterator<Tuple<key, String, value, String>>

    func init: (Array<Tuple<key,String,value,String>> s)  
    func new: (Array<Tuple<key,String,value,String>> p0)  -> ArrayIterator<Tuple<key,String,value,String>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,String> 
    override func prototype -> ArrayIterator<Tuple<key,String,value,String>> 
    override func clone -> ArrayIterator<Tuple<key,String,value,String>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< String> 
          implements Iterator<String>

    func init: (Array<String> s)  
    func new: (Array<String> p0)  -> SetIterator<String> 
    override func hasNext -> Boolean 
    override func next -> String 
    override func prototype -> SetIterator<String> 
    override func clone -> SetIterator<String> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Tuple<key, String, value, Dyn>> 
          implements Iterator<Tuple<key, String, value, Dyn>>

    func init: (Array<Tuple<key,String,value,Dyn>> s)  
    func new: (Array<Tuple<key,String,value,Dyn>> p0)  -> SetIterator<Tuple<key,String,value,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,Dyn> 
    override func prototype -> SetIterator<Tuple<key,String,value,Dyn>> 
    override func clone -> SetIterator<Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



open object ArrayIterator< Tuple<key, String, value, Dyn>> 
          implements Iterator<Tuple<key, String, value, Dyn>>

    func init: (Array<Tuple<key,String,value,Dyn>> s)  
    func new: (Array<Tuple<key,String,value,Dyn>> p0)  -> ArrayIterator<Tuple<key,String,value,Dyn>> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,Dyn> 
    override func prototype -> ArrayIterator<Tuple<key,String,value,Dyn>> 
    override func clone -> ArrayIterator<Tuple<key,String,value,Dyn>> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Dyn> 
          implements Iterator<Dyn>

    func init: (Array<Dyn> s)  
    func new: (Array<Dyn> p0)  -> SetIterator<Dyn> 
    override func hasNext -> Boolean 
    override func next -> Dyn 
    override func prototype -> SetIterator<Dyn> 
    override func clone -> SetIterator<Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object HashMapIterator< String,  Dyn> 
          implements Iterator<Tuple<key, String, value, Dyn>>

    func init: (HashMap<String,Dyn> map)  
    func new: (HashMap<String,Dyn> p0)  -> HashMapIterator<String,Dyn> 
    override func hasNext -> Boolean 
    override func next -> Tuple<key,String,value,Dyn> 
    override func prototype -> HashMapIterator<String,Dyn> 
    override func clone -> HashMapIterator<String,Dyn> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< String,  Dyn,  Nil> 

    func init 
    func new -> Function<String,Dyn,Nil> 
    override func prototype -> Function<String,Dyn,Nil> 
    abstract func eval: (String, Dyn)  -> Nil 
    func curry: (String t1)  -> Function<Dyn,Nil> 
    func curry: (String t1, Dyn t2)  -> Function<Nil> 
    override func clone -> Function<String,Dyn,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Int> 
          implements Iterator<Int>

    func init: (Array<Int> s)  
    func new: (Array<Int> p0)  -> SetIterator<Int> 
    override func hasNext -> Boolean 
    override func next -> Int 
    override func prototype -> SetIterator<Int> 
    override func clone -> SetIterator<Int> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Byte> 
          implements Iterator<Byte>

    func init: (Array<Byte> s)  
    func new: (Array<Byte> p0)  -> SetIterator<Byte> 
    override func hasNext -> Boolean 
    override func next -> Byte 
    override func prototype -> SetIterator<Byte> 
    override func clone -> SetIterator<Byte> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Short> 
          implements Iterator<Short>

    func init: (Array<Short> s)  
    func new: (Array<Short> p0)  -> SetIterator<Short> 
    override func hasNext -> Boolean 
    override func next -> Short 
    override func prototype -> SetIterator<Short> 
    override func clone -> SetIterator<Short> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Long> 
          implements Iterator<Long>

    func init: (Array<Long> s)  
    func new: (Array<Long> p0)  -> SetIterator<Long> 
    override func hasNext -> Boolean 
    override func next -> Long 
    override func prototype -> SetIterator<Long> 
    override func clone -> SetIterator<Long> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



object SetIterator< Char> 
          implements Iterator<Char>

    func init: (Array<Char> s)  
    func new: (Array<Char> p0)  -> SetIterator<Char> 
    override func hasNext -> Boolean 
    override func next -> Char 
    override func prototype -> SetIterator<Char> 
    override func clone -> SetIterator<Char> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, String>>,  String,  String,  Nil> 

    func init 
    func new -> Function<Array<Tuple<key,String,value,String>>,String,String,Nil> 
    override func prototype -> Function<Array<Tuple<key,String,value,String>>,String,String,Nil> 
    abstract func eval: (Array<Tuple<key,String,value,String>>, String, String)  -> Nil 
    func curry: (Array<Tuple<key,String,value,String>> t1)  -> Function<String,String,Nil> 
    func curry: (Array<Tuple<key,String,value,String>> t1, String t2)  -> Function<String,Nil> 
    func curry: (Array<Tuple<key,String,value,String>> t1, String t2, String t3)  -> Function<Nil> 
    override func clone -> Function<Array<Tuple<key,String,value,String>>,String,String,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end



abstract open object Function< Array<Tuple<key, String, value, Dyn>>,  String,  Dyn,  Nil> 

    func init 
    func new -> Function<Array<Tuple<key,String,value,Dyn>>,String,Dyn,Nil> 
    override func prototype -> Function<Array<Tuple<key,String,value,Dyn>>,String,Dyn,Nil> 
    abstract func eval: (Array<Tuple<key,String,value,Dyn>>, String, Dyn)  -> Nil 
    func curry: (Array<Tuple<key,String,value,Dyn>> t1)  -> Function<String,Dyn,Nil> 
    func curry: (Array<Tuple<key,String,value,Dyn>> t1, String t2)  -> Function<Dyn,Nil> 
    func curry: (Array<Tuple<key,String,value,Dyn>> t1, String t2, Dyn t3)  -> Function<Nil> 
    override func clone -> Function<Array<Tuple<key,String,value,Dyn>>,String,Dyn,Nil> 
    override func getFeatureListNameDoesNotCollide__ -> Array<Tuple<key,String,value,Any>> 
    override func getAnnotListNameDoesNotCollide__ -> Array<Any> 
    override func getSlotFeatureListNameDoesNotCollide__ -> Array<Tuple<slotName,String,key,String,value,Any>> 
end


