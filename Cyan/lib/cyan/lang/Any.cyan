package cyan.lang

@shouldNotHaveFields
open
object Any


    @doc{* This method can only be overridden in prototypes of basic types *}    
    @restrictOverrideTo(Byte, Short, Int, Long, Float, Double, Char, Boolean, String)
    func eq:  Dyn other -> Boolean { 
         @javacode<*< 
               return new CyBoolean(_other == this);
          >*>
    }

    @doc{* This method can only be overridden in prototypes of basic types *}    
    @restrictOverrideTo(Byte, Short, Int, Long, Float, Double, Char, Boolean, String)
    func neq: Dyn other -> Boolean { 
         @javacode<*< 
               return new CyBoolean(_other != this);
          >*>
    }
    

    func prototype -> Any = Any;
    
    
    @annot(canBeCalledOnPrototypes)
    final 
    func prototypeName -> String { 
        @javacode<<*
            return new CyString( getPrototypeName() );
        *>>
    }
    
    /*
        return the parent prototype of the prototype of the receiver. 
        When the receiver is Any, Any itself is returned.
    */
    @annot(canBeCalledOnPrototypes)
    final 
    func prototypeParent -> Any { @javacode<<<< return  parent(); >>>> }
    
    @annot(canBeCalledOnPrototypes)
    final 
    func prototypePackageName -> String { @javacode{* return prototypePackage(); *} }
    
    @annot(canBeCalledOnPrototypes)
    final 
    func isInterface -> Boolean { 
        @javacode<<< 
            return new CyBoolean(isInterface());
        >>>
    }

    
    @checkIsA
    @annot(canBeCalledOnPrototypes)
    final 
    func isA: (Any proto) -> Boolean { 
        /*
        @javacode<*<
            Object elem = getUnionElem();
            if ( elem != null ) {
                if ( elem instanceof _Any ) 
                    return ((_Any ) elem)._isA_1(_proto);
            }
        >*>
        */
        var Any current = self prototype;
        while true {
            if current eq: proto {
                return true
            }
            else {
                if current eq: Any { break }
                current = current prototypeParent;
            }
        }
        return false;
    }

    @checkIsA
    @annot(canBeCalledOnPrototypes)
    final 
    func notIsA: (Any proto) -> Boolean {
        var Any current = self prototype;
        while true {
            if current eq: proto {
                return false
            }
            else {
                if current eq: Any { break }
                current = current prototypeParent;
            }
        }
        return true
     }
    

    
    @annot(canBeCalledOnPrototypes)
    @accessOnlySharedFields
    final 
    func throw: (CyException e) -> Dyn {
        @javacode<<<
        throw new ExceptionContainer__(_e);
        >>>
    }

    
    func clone -> Any = self;

    
    final
    func ++ (Any other) -> String { 
        @javacode<<< return new CyString(this._asString().s + _other._asString().s); >>> 
    }
    
    func asString -> String = asString: 0;
    
    func asString: (Int ident) -> String {
        @javacode<<<<
        return new CyString(asString(_ident.n));
        >>>>
    }
    // only the instance variables of this object, without the super-prototype ones
    func asStringThisOnly: Int ident -> String {
        @javacode<<<<
        return new CyString(asStringThisOnly(_ident.n));
        >>>>
    }
    
    
    
    func asStringQuoteIfString -> String = asString;
    
    
    @checkMethodEqualEqual
    @overrideToo("hashCode")
    @overrideTest{* 
        func equalityTest: SUBPROTOTYPE a, SUBPROTOTYPE b, SUBPROTOTYPE c -> String|Nil {
            if a == a && a != a && ! (a == a) || 
               !(b == b) || !(c == c) || (a == b && a != b) ||
               !(a == b && b == c && a != c) ||
               (a == b && b != a) {
                return "method '==' or '!=' of SUBPROTOTYPE do not satisfy the axioms for equality and non-equality";
            }
            if ( a == b && (a != b) ) || (a != a) || (b != b) || (a == b && b != a) ||
                (b != a && b == a) {
                return " SUBPROTOTYPE do not obey the rules for equality"
            }
            return Nil
        }

    *}
    
    func == (Dyn other) -> Boolean { 
        @javacode<<< 
            if ( _other instanceof _Any ) {
                return new CyBoolean( this == _other );            }
            else {
                return new CyBoolean(false); 
            }
        >>> 
    }
    
    func === (Dyn other) -> Boolean { 
        return self == other 
    }

    func !== (Dyn other) -> Boolean { 
        return !(self === other);
    }


    @checkMethodEqualEqual
    final 
    func != (Dyn other) -> Boolean { 
        return !(self == other);
    }

    func isCase: (Any other) -> Boolean = self == other;
    
    func assertxx: (Boolean expr) { 
        if ! expr  {
            throw: ExceptionAssert()
        }
    }
    func assertxx: Boolean expr, String message {
        if ! expr {
            message println;
            throw: ExceptionAssert();
        }
    }

    func print { Out print: (self asString) }
    
    func println { print; Out print: "\n" }
    
    func printspc { Out print: (self asString); Out print: " " }
    
    func printc { print; Out print: ", " }
    

    @prototypeCallOnly
    @annot(canBeCalledOnPrototypes)
    final
    func toAny: Dyn elem -> Any = elem;
    
    @annot(canBeCalledOnPrototypes)
    final
    func featureList -> Array<Tuple<key, String, value, Any>> { 
        @javacode<<<
            return _getFeatureListNameDoesNotCollide____();
        >>>
    }

    // return the list of features of field
    // or method whose name is 'slotName'
    @annot(canBeCalledOnPrototypes)
    final
    func featureList: (String slotName) -> Array<Tuple<key, String, value, Any>> { 
        var Array<Tuple<key, String, value, Any>> ret = Array<Tuple<key, String, value, Any>> new;
        var Array<Tuple<slotName, String, key, String, value, Any>> anArray = slotFeatureList;
        anArray foreach: { (: Tuple<slotName, String, key, String, value, Any> elem :)
            if slotName == elem slotName {
                ret add: (Tuple<key, String, value, Any> new: (elem key), (elem value));
            }
        };
        return ret;
    }

    // return the list of features of all instance variables and methods
    @annot(canBeCalledOnPrototypes)
    final
    func slotFeatureList -> Array<Tuple<slotName, String, key, String, value, Any>> { 
        @javacode<<<
            return _getSlotFeatureListNameDoesNotCollide____();
        >>>
    }


    @annot(canBeCalledOnPrototypes)
    final
    func annotList -> Array<Any> { 
        var Array<Any> anyList;
        @javacode{*  _anyList = _getAnnotListNameDoesNotCollide____(); *}
        return anyList;
    }

        
    @annot(canBeCalledOnPrototypes)
    final
    func annotList: (String slotName) -> Array<Any> { 
        var anyList = Array<Any> new;
        (featureList: slotName) foreach: { (: Tuple<key, String, value, Any> elem :)
            if elem key == "annot" { anyList add:  elem value; }
        };
        return anyList;    
    }
    

    /*
       this method is called if a message is sent to the object and the method
       is not found. 'methodName' is, obviously the method name. 'args' contains
       the message parameters. args[i] is an array with the real parameters of the
       i-th selector. So in a message send
             dyn with: 0, 'a' print: f0, 100, "A";
       args would be
           [ [ 0, 'a' ], [ f0, 100, "A" ] ] 
       This is not a valid Cyan literal array because of type errors. But you 
       got the idea. 
    */
    func doesNotUnderstand: (String methodName, Array<Array<Dyn>> args) -> Dyn {
        throw: ExceptionDoesNotUnderstand(methodName)
    }

    
    @changeFunctionForMethod
    final func functionForMethod: String signature -> Any {
        // this can only be called through reflection
        throw: ExceptionStr("Method 'functionForMethod' should not be called using reflection, Dyn, or using ?functionForMethod");
    }

    @changeFunctionForMethod
    final func functionForMethodWithSelf: String signature -> Any {
        // this can only be called through reflection
        throw: ExceptionStr("Method 'functionForMethodWithSelf' should not be called using reflection, Dyn, or using ?functionForMethodWithSelf");
    }


    @overrideTest{* 
        func hashTest: SUBPROTOTYPE a, SUBPROTOTYPE b -> String|Nil {
            if a hashCode != a hashCode ||
               b hashCode != b hashCode {
               return "method 'hashCode' should always return the same value";
            }
            if a == b && a hashCode != b hashCode {
               return "method 'hashCode' should always return true for methods equal according to '=='";
            }
            return Nil
        }

    *}

    func hashCode -> Int { 
        @javacode<<<
            return new CyInt(System.identityHashCode(this));
        >>>
    }

    /*
    final
    func isUnion -> Boolean {
        @javacode{*
            return getUnionElem() != null ? CyBoolean.cyTrue : CyBoolean.cyFalse;
        *}
    }
    */
    
    /* very inefficient, this should be changed
    */
    @annot(canBeCalledOnPrototypes)
    final
    func getMethodNameList -> Array<String> {
        let nameList = Array<String>();
        @javacode{*
            CyString []list = this.getMethodNameList2();
            for (int i = 0; i <list.length; ++i) {
                _nameList._add_1( list[i] );
            }
        *}
        return nameList;
    }

    /* very inefficient, this should be changed
    */
    @annot(canBeCalledOnPrototypes)
    final
    func getFieldNameList -> Array<String> {
        let nameList = Array<String>();
        @javacode{*
            String []list = getFieldList2();
            for (int i = 0; i < list.length; ++i) {
                _nameList._add_1( new CyString(list[i]) );
            }
        *}
        return nameList;
    }


    @javacode<*<
       protected static final int defaultIdentNumber__ = 4;
       //public Object getUnionElem() { return null; }
       public boolean eq(Object other) { return this == other; }

       protected String getWhiteSpaces(int n) {
            String s = "";
            for (int i = 0; i < n; ++i)
                s = s + "";
            return s;
       }

       @Override 
       public int hashCode() {
           return this._hashCode().n;            
       }

        public boolean  equals( Object _other )  {
            return _equal_equal(_other).b;
        } 
        
       public String toString() {
           return _asString().s;
       }
         
    >*>


    /*  The declaration of this shared field assures
        that some prototypes are created. These
        prototypes are used when interpreting Cyan. A
        parameter of each of them is declared inside
        AssurePrototypesAreCreated.
    private shared AssurePrototypesAreCreated assurePrototypesAreCreated = 
        AssurePrototypesAreCreated();
    */

    
    /***********************
        methods that have not been implemented. Probably they will never be
        because the JVM does not support them directly. 
     ***********************
    
    
    @checkSetMethod
    final func setMethod: (String signature, Any method) {
    }
    
    @checkAddMethod
    @grammarMethod{*
    
          (  addMethod:
                 (selector: String ( param: (Any)+ )?
                   )+
                  (returnType: Any)?
                  body: Any    
           )
    *}
    func addMethod: Tuple<Any, 
                          Array<  
                             Tuple<String, Union<some, Array<Any>, none, Any>>
                              >, 
                          Union<some, Any, none, Any>, 
                          Any> t { 
    }
    */
    

end

