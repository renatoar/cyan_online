package cyan.lang

@javacode{*
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.File;
*}

object System

    public func exit { 
        @javacode<<< 
            System.exit(0);
        >>>    
        return Nil
    }
       // ends the program with a return value
    public func exit: (Int errorCode) { 
        @javacode<<< 
            System.exit(_errorCode.n);
        >>>    
        return Nil
    }
       // runs the garbage collector
    public func gc { 
        @javacode<*<
           System.gc();
        >*>
        return Nil
    }
       // current time in milliseconds
    public func currentTime -> Long { 
        @javacode<*<
            return new CyLong(System.currentTimeMillis());
        >*>    
    }
       // prints the stack of called methods in the
       // standard output
    public func printMethodStack {  
        @javacode<**
            StackTraceElement[] elements = Thread.currentThread().getStackTrace();

            for( int i = 0; i < elements.length; i++) {
                System.out.println( elements[i] );
            }
        **>
        return Nil
    }

    overload    
    func exec: String command {
        var Int errorCode = 0;
        @javacode{*
        
            try {
                Runtime.getRuntime().exec( _command.s );
            }
            catch ( Throwable e ) {
                throw new ExceptionContainer__( new _ExceptionJavaException(e) );
            }
            /*
            catch ( SecurityException e ) {
                _errorCode.n = 1;
            }
            catch ( IOException e ) {
                _errorCode.n = 2;
            }
            catch ( NullPointerException e ) {
                _errorCode.n = 3;
            }
            catch ( IllegalArgumentException e ) {
                _errorCode.n = 4;
            }
            */
        *}
        return Nil; // It will return Process some day
    }
    
    func exec: Array<String> commandList {
        @javacode{*
            String []cmdArray = new String[_commandList._size().n];
            int i = 0;
        *}
        for command in commandList {
            @javacode{*
                cmdArray[i] = _command.s;
                ++i;
            *}
        }
        @javacode{*
            try {
                Runtime.getRuntime().exec( cmdArray );
            }
            catch ( Throwable e ) {
                throw new ExceptionContainer__( new _ExceptionJavaException(e) );
            }
            
        *}
        
        return Nil; // It will return Process some day
    }
    
    func exec: Array<String> commandList, Array<String> envpList, String dir {
        @javacode{*
            String []cmdArray = new String[_commandList._size().n];
            int i = 0;
            String []envpArray = new String[_envpList._size().n];
        *}
        for command in commandList {
            @javacode{*
                cmdArray[i] = _command.s;
                ++i;
            *}
        }
        @javacode{*
            i = 0;
        *}
        for envp in envpList {
            @javacode{*
                envpArray[i] = _envp.s;
                ++i;
            *}
        }
        @javacode{*
            try {
                Runtime.getRuntime().exec( cmdArray, envpArray, new File(_dir.s) );
            }
            catch ( Throwable e ) {
                throw new ExceptionContainer__( new _ExceptionJavaException(e) );
            }
            
        *}
        
        return Nil; // It will return Process some day
    }
    
    
    @doc{*
        this method can be used as a dynamic storage for global variables
    *}
    func globalTable -> IMap<String, Dyn> = mapGlobalVariables;
    
    func pushCheckStack: String s {
        checkStack push: s;
    }

    func popCheckStack -> String = checkStack pop;
    
    func peekCheckStack -> String = checkStack peek;

    func topCheckStackEquals: String s -> Boolean = checkStack peek == s;
    
    let Stack<String> checkStack = Stack<String>();
    
    shared let IMap<String, Dyn> mapGlobalVariables = HashMap<String, Dyn>();

    @javacode{**
        static public java.util.Stack<String> checkStack = new java.util.Stack<>();

    static public PrintWriter fileToAddTypeInfo;

    
    static public void writeToFileToAddTypeInfo(
        String parameterName, boolean typeSupplied,
        int fileOffset, String runtimeType,
        boolean addCommaAtEnd,
        String fileNameToAddTypeInfo ) {
        
            String wasTypeSupplied = typeSupplied ? "true" : "false";

            fileToAddTypeInfo.println(
                "        {\r\n" + 
                "          \"parameter name\": \"" + parameterName + "\",\r\n" +
                "          \"type supplied\": " + wasTypeSupplied + ",\r\n" + 
                "          \"file offset\": " + fileOffset + ",\r\n" + 
                "          \"runtime Type\": \"" + runtimeType + "\"\r\n" + 
                "        }" +
                (addCommaAtEnd ? "," : "")
                );
            if ( fileToAddTypeInfo.checkError() ) {
                System.out.println("Error in writing to file '" +
                    fileNameToAddTypeInfo + "' that keeps information on " +
                    "the types of Dyn variables and parameters. " +
                    "If the error persists, try to compile without " +
                    "option -addTypeInfo " + runtimeType);
            }

    }    
    
    
    static public void writeToFileToAddTypeInfo(
        String variableFieldName, 
        int fileOffset, String runtimeType,
        boolean typeSupplied,
        String fileNameToAddTypeInfo ) {

            String wasTypeSupplied = typeSupplied ? "true" : "false";
        
            fileToAddTypeInfo.println(
                "      \"variable name\": \"" + variableFieldName + "\",\r\n" +
                "      \"type supplied\": " + wasTypeSupplied + ",\r\n" + 
                "      \"file offset\": " + fileOffset + ",\r\n" + 
                "      \"runtime Type\": \"" + runtimeType + "\"\r\n" 
                );
            if ( fileToAddTypeInfo.checkError() ) {
                System.out.println("Error in writing to file '" +
                    fileNameToAddTypeInfo + "' that keeps information on " +
                    "the types of Dyn variables and parameters. " +
                    "If the error persists, try to compile without " +
                    "option -addTypeInfo " + runtimeType);
            }

    }    
    
    
    
    
    static public void write_ln_only_ToFileToAddTypeInfo() {
        fileToAddTypeInfo.println();
    }
    
    static public void writeToFileToAddTypeInfo(
            String s,
            String fileNameToAddTypeInfo ) {

            fileToAddTypeInfo.println(s);
            if ( fileToAddTypeInfo.checkError() ) {
                System.out.println("Error in writing to file '" +
                    fileNameToAddTypeInfo + "' that keeps information on " +
                    "the types of Dyn variables and parameters. " +
                    "If the error persists, try to compile without " +
                    "option -addTypeInfo '" + s);
                System.exit(0);
            }

    }
    /**
        number of method calls whose dynamic argument types were
        saved in file fileNameToAddTypeInfo
    */
    static public long numberEntriesTypeInfo = 0;
    



        
    **}
    
    
    
end

